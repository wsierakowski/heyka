{
    "_id": {
        "$oid": "55af9f1c8fb1260489f3050b"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc33"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\"><img style=\"margin-right: 10px; float: left;\" src=\"http://sierakowski.eu/examples/requirejs/requireLogo.jpg\" alt=\"requirejs logo\" />One of the first things I had to learn when starting developing JavaScript applications was how to overcome lack of dependency management and concept of modules and namespaces. Unfortunately there are few JS books touching on these topics. When building large scale application, implementing hundreds of &lt;script&gt; tags becomes really hard to manage, especially when we need to keep them in specific order. Also the more script tags are included in the html files, the more requests a browser needs to do - this may cause a significant impact to the overall user experience - loading times, UI freezes... As JS lately became a language of choice for developing web applications targeting not only desktops but also mobile devices, developers needed to find a solution for that. Instead of waiting for changes to the JS specification (<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:modules\">http://wiki.ecmascript.org/doku.php?id=harmony:modules</a>) and for implementing that consequently to the popular browsers, they agreed for a standard that would be used both on server and client side and they named it CommonJS (<a href=\"http://wiki.commonjs.org/wiki/CommonJS\">http://wiki.commonjs.org/wiki/CommonJS</a>). The solution works great with JS on the server side but due to the fact that files are loaded synchronously, it doesn't work well with browsers as this would block user interface during script load process. So the client side solution was modified for asynchronous loading by wrapping modules in files into callback functions. This is known as AMD - Asynchronous Module Definition<br /><span style=\"line-height: 1.6em;\">(<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">https://github.com/amdjs/amdjs-api/wiki/AMD</a>, <a href=\"http://requirejs.org/docs/whyamd.html\">http://requirejs.org/docs/whyamd.html</a>). One of the most popular AMD loader solutions is the require.js and in this article we will look how to use it.</span></p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/javascript-tips/25-javascript-tips/118-using-modules-and-dependency-management-in-javascript-applications-with-amd-requirejs.html</em></div>\r\n<h3>Single-file car dealer shop application</h3>\r\n<p style=\"text-align: justify;\">As the oversimplified sample application we are going to build a small car/bike dealer application. The dealer sells two type of vehicles, cars and bikes. As an owner of the dealer's shop we are able to buy a new item and put in on the stock or we can sell it and earn some money. All transactions are reflected in the bank account, when buying things we need to pay for them if we have enough money, when selling our earnings are deposited.</p>\r\n<p style=\"text-align: justify;\">For demonstration I decided to try to implement the functional inheritance pattern demonstrated in the \"JavaScript: The Good Parts\" book. We need items that we will be selling in the shop, so I created a base object called 'item' and both 'bike' and 'car' objects are extending it. Next we have the bank object that has a private variable named 'balance' and public methods that allow to deposit and withdraw our money. The initial deposit is set when creating a new bank object. The 'shop' object allows us to buy and sell items by adding or removing items from the stock and deducting or adding money to the bank. Finally at the end of the script file we initiate everything and buy and sell some items. Also to make it more complex, there is a dependency on the underscore.js library as we are going to use here and there.</p>\r\n<p><em>scripts/app.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> item = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = <span style=\"color: #000000;\">{</span><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    spec.itemType = <span style=\"color: #990000;\">'item'</span>;</span>\r\n<span style=\"vertical-align: top;\">    spec.id = <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getItemType = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.itemType;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getId = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.id;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.setId = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>id<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        spec.id = id;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getColor = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.<span style=\"color: #004993;\">color</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getMake = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.make;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getSellingPrice = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.sellingPrice;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getPurchasePrice = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.purchasePrice;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> car = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = item<span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    spec.itemType = <span style=\"color: #990000;\">'car'</span>;</span>\r\n<span style=\"vertical-align: top;\">    spec.mileage = spec.mileage <span style=\"color: #000000; font-weight: bold;\">||</span> <span style=\"color: #990000;\">'n/a'</span>;</span>\r\n<span style=\"vertical-align: top;\">    spec.engineType = spec.engineType <span style=\"color: #000000; font-weight: bold;\">||</span> <span style=\"color: #990000;\">'n/a'</span>;</span>\r\n<span style=\"vertical-align: top;\">    spec.model = spec.model <span style=\"color: #000000; font-weight: bold;\">||</span> <span style=\"color: #990000;\">'n/a'</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getMileage = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.mileage;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getEngineType = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.engineType;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getModel = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.model;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> bike = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = item<span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    spec.itemType = <span style=\"color: #990000;\">'bike'</span>;</span>\r\n<span style=\"vertical-align: top;\">    spec.<span style=\"color: #004993;\">type</span> = spec.<span style=\"color: #004993;\">type</span> <span style=\"color: #000000; font-weight: bold;\">||</span> <span style=\"color: #990000;\">'n/a'</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> bank = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = <span style=\"color: #000000;\">{</span><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    spec.balance = spec.balance <span style=\"color: #000000; font-weight: bold;\">||</span> <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getBalance = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.balance;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.withdraw = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>amount<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>spec.balance <span style=\"color: #000000; font-weight: bold;\">-</span> amount <span style=\"color: #000000; font-weight: bold;\">&gt;</span> <span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            spec.balance <span style=\"color: #000000; font-weight: bold;\">-</span>= amount;</span>\r\n<span style=\"vertical-align: top;\">            console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Bank: balance after withdrawal of'</span>, </span>\r\n<span style=\"vertical-align: top;\">                                amount, <span style=\"color: #990000;\">'is'</span>, spec.balance<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">        console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Bank: unsuccesful withdrawal of'</span>, amount, <span style=\"color: #990000;\">', </span>\r\n<span style=\"vertical-align: top;\">                               current balance is'</span>, spec.balance<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">false</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.deposit = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>amount<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        spec.balance <span style=\"color: #000000; font-weight: bold;\">+</span>= amount;</span>\r\n<span style=\"vertical-align: top;\">        console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Bank: balance after deposit of'</span>, amount, <span style=\"color: #990000;\">'is'</span>, spec.balance<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> shop = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>myBank<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = <span style=\"color: #000000;\">{</span><span style=\"color: #000000;\">}</span>, stock = <span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">]</span>, itemId = <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.getItemsOfType = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>itemType<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> _.<span style=\"color: #004993;\">filter</span><span style=\"color: #000000;\">(</span>stock, <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> item.getItemType<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> === itemType;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.buyItem = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>myBank.withdraw<span style=\"color: #000000;\">(</span>item.getPurchasePrice<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            item.setId<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">++</span>itemId<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            stock.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Item added to the stock (id:'</span>, item.getId<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #990000;\">')'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> item.getId<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">        console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Not enough savings to buy this item'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">null</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    that.sellItem = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>id<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #6699cc; font-weight: bold;\">var</span> item = _.find<span style=\"color: #000000;\">(</span>stock, <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> item.getId<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> === id;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            stock.<span style=\"color: #004993;\">splice</span><span style=\"color: #000000;\">(</span>stock.<span style=\"color: #004993;\">indexOf</span><span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span>, <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            myBank.deposit<span style=\"color: #000000;\">(</span>item.getSellingPrice<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Item with id '</span>, id, <span style=\"color: #990000;\">' sold'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> id;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">        console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Item with id '</span>, id, <span style=\"color: #990000;\">'not in stock'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">null</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">/* ----------------------- */</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> myBank = bank<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span>balance<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">10000</span><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>,</span>\r\n<span style=\"vertical-align: top;\">    myShop = shop<span style=\"color: #000000;\">(</span>myBank<span style=\"color: #000000;\">)</span>,</span>\r\n<span style=\"vertical-align: top;\">    itemIds = <span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">]</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// add something to the shop's stock</span></span>\r\n<span style=\"vertical-align: top;\">itemIds<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">]</span> = myShop.buyItem<span style=\"color: #000000;\">(</span>car<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    sellingPrice    <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">2300</span>,</span>\r\n<span style=\"vertical-align: top;\">    purchasePrice   <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">2000</span>,</span>\r\n<span style=\"vertical-align: top;\">    make            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'VW'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">color</span>           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'silver'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mileage         <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">100000</span>,</span>\r\n<span style=\"vertical-align: top;\">    engineType      <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'1.9 diesel'</span>,</span>\r\n<span style=\"vertical-align: top;\">    model           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'Passat'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">itemIds<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">]</span> = myShop.buyItem<span style=\"color: #000000;\">(</span>car<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    sellingPrice    <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">8000</span>,</span>\r\n<span style=\"vertical-align: top;\">    purchasePrice   <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">6500</span>,</span>\r\n<span style=\"vertical-align: top;\">    make            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'Audi'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">color</span>           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'black'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mileage         <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">55000</span>,</span>\r\n<span style=\"vertical-align: top;\">    engineType      <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'2.5 petrol'</span>,</span>\r\n<span style=\"vertical-align: top;\">    model           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'A4'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">itemIds<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">]</span> = myShop.buyItem<span style=\"color: #000000;\">(</span>bike<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    sellingPrice    <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">800</span>,</span>\r\n<span style=\"vertical-align: top;\">    purchasePrice   <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">750</span>,</span>\r\n<span style=\"vertical-align: top;\">    make            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'romet'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">color</span>           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'yellow'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">type</span>            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'mountain'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">itemIds<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">3</span><span style=\"color: #000000;\">]</span> = myShop.buyItem<span style=\"color: #000000;\">(</span>car<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    sellingPrice    <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">800</span>,</span>\r\n<span style=\"vertical-align: top;\">    purchasePrice   <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">700</span>,</span>\r\n<span style=\"vertical-align: top;\">    make            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'Fiat'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">color</span>           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'red'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mileage         <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">170000</span>,</span>\r\n<span style=\"vertical-align: top;\">    engineType      <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'1.2 petrol'</span>,</span>\r\n<span style=\"vertical-align: top;\">    model           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'Punto'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">myShop.buyItem<span style=\"color: #000000;\">(</span>bike<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    sellingPrice    <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">500</span>,</span>\r\n<span style=\"vertical-align: top;\">    purchasePrice   <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">450</span>,</span>\r\n<span style=\"vertical-align: top;\">    make            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'noname'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">color</span>           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'green'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">type</span>            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'city'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// what is my current balance?</span></span>\r\n<span style=\"vertical-align: top;\">console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'My current bank account balance: '</span>, myBank.getBalance<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// time to sell something and start earning money!</span></span>\r\n<span style=\"vertical-align: top;\">myShop.sellItem<span style=\"color: #000000;\">(</span>itemIds<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">myShop.sellItem<span style=\"color: #000000;\">(</span>itemIds<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// what is my current balance?</span></span>\r\n<span style=\"vertical-align: top;\">console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'My current bank account balance: '</span>, myBank.getBalance<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And <em>index.html:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/underscore.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/app.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Here is a screenshot of the executed script.</p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase0_browser.png\" alt=\"phase0_browser.png\" /></p>\r\n<h3>Breaking modules down into individual script files</h3>\r\n<p style=\"text-align: justify;\">The first improvement that we can make is to break the modules into individual js files, so item module would go to the items/item.js, the same for items/car.js, items/bike.js, app/shop.js and app/bank.js. The main.js file has the code running the shop that is taken from the end of the app.js file. We don't need the app.js anymore.</p>\r\n<p>The folder structure now looks like this:</p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase1_filestructure.png\" alt=\"phase1_filestructure.png\" /></p>\r\n<p>We need to make a change to the <em>index.html file</em>:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/libs/underscore.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/items/item.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/items/car.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/items/bike.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/app/shop.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/app/bank.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"scripts/main.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">If we test it again, it should work the same as it was working before with just a single script file.</p>\r\n<p style=\"text-align: justify;\"><img src=\"http://sierakowski.eu/examples/requirejs/phase1_browser_ok.png\" alt=\"phase1_browser_ok.png\" /></p>\r\n<p style=\"text-align: justify;\">But what would happen if we changed the order of the script tags and moved main.js one line up above the bank.js?</p>\r\n<p style=\"text-align: justify;\"><img src=\"http://sierakowski.eu/examples/requirejs/phase1_browser_notok.png\" alt=\"phase1_browser_notok.png\" /></p>\r\n<p style=\"text-align: justify;\">We broke the dependency order, because the main.js references the bank.js that wasn't loaded yet, the uncaught reference error is thrown. Of course in simple applications these dependencies are quite easy to manage, but imagine applications that consist of tens if not hundreds of different dependencies and modules.</p>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<h3 style=\"text-align: justify;\">Wrapping modules into require.js AMD type modules</h3>\r\n<p style=\"text-align: justify;\">With AMD we can avoid all of that. The first thing that we need to do is to wrap our modules in the define function callbacks and the main file using these modules in the require wrapper.</p>\r\n<p style=\"text-align: justify;\">This is the item.js after wrapping in the define function, the content is literary copied and pasted inside of the callback function that is the first and only parameter to the define and the item object is returned from it. This structure is required to let other modules using it.</p>\r\n<p><em>scripts/items/item.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">define<span style=\"color: #000000;\">(</span><span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> item = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = <span style=\"color: #000000;\">{</span><span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        spec.itemType = <span style=\"color: #990000;\">'item'</span>;</span>\r\n<span style=\"vertical-align: top;\">        spec.id = <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.getItemType = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.itemType;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.getId = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.id;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.setId = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>id<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            spec.id = id;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.getColor = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.<span style=\"color: #004993;\">color</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.getMake = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.make;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.getSellingPrice = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.sellingPrice;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.getPurchasePrice = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> spec.purchasePrice;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> item;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Because the bike.js and the car.js depend on the item.js, in the define method we additionally add that 'item' dependency. Note that an array with a string representing a name of the dependency is passed as the first parameter to the define method and then again as a parameter to the callback function that now became the second parameter of the define. Here is the bike.js example, the car.js is done in the similar way:</p>\r\n<p><em>scripts/items/bike.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">define<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">[</span><span style=\"color: #990000;\">'item'</span><span style=\"color: #000000;\">]</span>, <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> bike = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = item<span style=\"color: #000000;\">(</span>spec<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        spec.itemType = <span style=\"color: #990000;\">'bike'</span>;</span>\r\n<span style=\"vertical-align: top;\">        spec.<span style=\"color: #004993;\">type</span> = spec.<span style=\"color: #004993;\">type</span> <span style=\"color: #000000; font-weight: bold;\">||</span> <span style=\"color: #990000;\">'n/a'</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> bike;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">The bank.js would be wrapped in the same way as the item.js as it doesn't depend on any other module. But the shop.js is the module that has more dependencies as it depends on the car, the bike and the underscore library.</p>\r\n<p><em>scripts/app/shop.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">define<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">[</span><span style=\"color: #990000;\">'underscore'</span>, <span style=\"color: #990000;\">'car'</span>, <span style=\"color: #990000;\">'bike'</span><span style=\"color: #000000;\">]</span>, <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>_, car, bike<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> shop = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>myBank<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #6699cc; font-weight: bold;\">var</span> that = <span style=\"color: #000000;\">{</span><span style=\"color: #000000;\">}</span>, stock = <span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">]</span>, itemId = <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.getItemsOfType = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>itemType<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> _.<span style=\"color: #004993;\">filter</span><span style=\"color: #000000;\">(</span>stock, <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">                <span style=\"color: #0033ff; font-weight: bold;\">return</span> item.getItemType<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> === itemType;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.buyItem = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>myBank.withdraw<span style=\"color: #000000;\">(</span>item.getPurchasePrice<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">                item.setId<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">++</span>itemId<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">                stock.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">                console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Item added to the stock (id:'</span>, item.getId<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #990000;\">')'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">                <span style=\"color: #0033ff; font-weight: bold;\">return</span> item.getId<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">            console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Not enough savings to buy this item'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">null</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        that.sellItem = <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>id<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #6699cc; font-weight: bold;\">var</span> item = _.find<span style=\"color: #000000;\">(</span>stock, <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">                <span style=\"color: #0033ff; font-weight: bold;\">return</span> item.getId<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> === id;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">                stock.<span style=\"color: #004993;\">splice</span><span style=\"color: #000000;\">(</span>stock.<span style=\"color: #004993;\">indexOf</span><span style=\"color: #000000;\">(</span>item<span style=\"color: #000000;\">)</span>, <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">                myBank.deposit<span style=\"color: #000000;\">(</span>item.getSellingPrice<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">                console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Item with id '</span>, id, <span style=\"color: #990000;\">' sold'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">                <span style=\"color: #0033ff; font-weight: bold;\">return</span> id;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">            console.<span style=\"color: #004993;\">log</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">'Item with id '</span>, id, <span style=\"color: #990000;\">'not in stock'</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">null</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">return</span> that;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">return</span> shop;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Now let's have a look at the main.js. This is our main application file that launches the application. Instead of wrapping in the define function, we wrap it into the require. We also add a config definition to specify the base folder and paths to different modules. Because the underscore library is not wrapped in the AMD compatible wrapper, we need to use a workaround to import it correctly (shim). The require function is similar in structure to define, as the first parameter we pass an array of dependencies and the second parameter is a callback that takes module names as the parameters. We do not return anything from the require callback.</p>\r\n<p><em>scripts/main.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">require.config<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    baseUrl<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    paths<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        item<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'items/item'</span>,</span>\r\n<span style=\"vertical-align: top;\">        bike<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'items/bike'</span>,</span>\r\n<span style=\"vertical-align: top;\">        car<span style=\"color: #000000; font-weight: bold;\">:</span>  <span style=\"color: #990000;\">'items/car'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">        bank<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'app/bank'</span>,</span>\r\n<span style=\"vertical-align: top;\">        shop<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'app/shop'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">        underscore<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'libs/underscore'</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    shim<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        underscore<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            exports<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'_'</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">require<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">[</span><span style=\"color: #990000;\">'shop'</span>, <span style=\"color: #990000;\">'bank'</span>, <span style=\"color: #990000;\">'car'</span>, <span style=\"color: #990000;\">'bike'</span><span style=\"color: #000000;\">]</span>, <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #000000;\">(</span>shop, bank, car, bike<span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">{</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> myBank = bank<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span>balance<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">10000</span><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>,</span>\r\n<span style=\"vertical-align: top;\">        myShop = shop<span style=\"color: #000000;\">(</span>myBank<span style=\"color: #000000;\">)</span>,</span>\r\n<span style=\"vertical-align: top;\">        itemIds = <span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">]</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// add something to the shop's stock</span></span>\r\n<span style=\"vertical-align: top;\">    itemIds<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">]</span> = myShop.buyItem<span style=\"color: #000000;\">(</span>car<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        sellingPrice    <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">2300</span>,</span>\r\n<span style=\"vertical-align: top;\">        purchasePrice   <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">2000</span>,</span>\r\n<span style=\"vertical-align: top;\">        make            <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'VW'</span>,</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #004993;\">color</span>           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'silver'</span>,</span>\r\n<span style=\"vertical-align: top;\">        mileage         <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">100000</span>,</span>\r\n<span style=\"vertical-align: top;\">        engineType      <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'1.9 diesel'</span>,</span>\r\n<span style=\"vertical-align: top;\">        model           <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'Passat'</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #3f5fbf;\">/*</span>\r\n \r\n<span style=\"vertical-align: top;\">    ...</span>\r\n \r\n<span style=\"vertical-align: top;\">    */</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">The last thing to get our application working again is to modify the index.html file, there is no need to load all these different js script files anymore. We don't need to remember about order in which we need to load scripts as well - all this is managed for us automatically. The only script tag links to the require.js itself but it also has data-main attribute that points the require to the main script, note that there is no need to put the \"js\" extension at the end.</p>\r\n<p><em>index.html:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script data<span style=\"color: #000000; font-weight: bold;\">-</span>main=<span style=\"color: #990000;\">\"scripts/main\"</span> src=<span style=\"color: #990000;\">\"scripts/libs/require.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The files structure looks like this now:</p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase1_filestructure_require.png\" alt=\"phase1_filestructure_require.png\" /></p>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">And the application should execute in the same way as before we wrapped it into the AMD modules with requuire.js.</p>\r\n<p style=\"text-align: justify;\"><img src=\"http://sierakowski.eu/examples/requirejs/phase1_browser_require.png\" alt=\"phase1_browser_require.png\" /></p>\r\n<p style=\"text-align: justify;\"><a class=\"download\" href=\"http://sierakowski.eu/examples/requirejs/phase1.zip\">&lt;phase1.zip&gt;</a></p>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<h3>Optimising with r.js</h3>\r\n<p style=\"text-align: justify;\">Our application is broken into modules so it is easier for us developers to maintain and extend it. But having many different separate module files isn't a good thing for a user, browsers will need to make multiple network request to load all the modules. This isn't very problematic with a small application, but it may become an overhead with large scale applications depending on hundreds of different modules. The solution is to merge our modules into a single file. This is good for us as during the development we would still use separate files, that then would be merged during the build process (locally or on the continuous integration server) and from the end user's perspective there will be only one js file loaded with a single request from a browser.</p>\r\n<p style=\"text-align: justify;\">For combining modules into one file we will use the r.js \"adapter\" that also includes the optimiser - all that is developed by the same team that works on the require.js project. Apart from just combining, the optimiser can also minify the script with UglifyJS. Full documentation of using the require optimizer is available here: http://requirejs.org/docs/optimization.html.</p>\r\n<p style=\"text-align: justify;\">The r.js script can be run in a browser but I prefer to use it with Node.js as a part of the build process. To prepare our application for building, let's create a new build configuration file build.js. It is not required as we could pass build properties as options when executing the build process in the command line but it is certainly easier to manage it this way. In the build.js we specify the location of the run-time configuration file (that we will just create in a moment), name of the main application file (main.js in our case), location for the output (processed) file that will be in the \"build\" folder and finally I set the optimisation parameter to none for now as we want to see first how the combined modules look like without \"minificating\" it. Let's call this build file \"build-dev\" as it will not be optimised for production - not minified/uglified and all code comments will be kept there.</p>\r\n<p><em>build-dev.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    baseUrl<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mainConfigFile<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/config.js'</span>,</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"main\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    out<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"build/dealerapp-dev.js\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    optimize<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'none'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">I also moved the require.config from the main.js to a separate file config.js (this file is called the runtime config file).</p>\r\n<p><em>scripts/config.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">require.config<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    baseUrl<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    paths<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        item<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'items/item'</span>,</span>\r\n<span style=\"vertical-align: top;\">        bike<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'items/bike'</span>,</span>\r\n<span style=\"vertical-align: top;\">        car<span style=\"color: #000000; font-weight: bold;\">:</span>  <span style=\"color: #990000;\">'items/car'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">        bank<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'app/bank'</span>,</span>\r\n<span style=\"vertical-align: top;\">        shop<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'app/shop'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">        underscore<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'libs/underscore'</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    shim<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        underscore<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            exports<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'_'</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"text-align: justify;\">This is how the current code structure looks like at the moment:</div>\r\n<div style=\"text-align: justify;\"><img src=\"http://sierakowski.eu/examples/requirejs/phase2_filestructure.png\" alt=\"phase2_filestructure.png\" /></div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">So we are ready to run the script. In the terminal, in the root of our project folder, run this command:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">node r.js <span style=\"color: #000000; font-weight: bold;\">-</span>o build-dev.js</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">If everything is in place correctly you should be able to see a result like below:</p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase2_terminal_norequire.png\" alt=\"phase2_terminal_norequire.png\" /></p>\r\n<p style=\"text-align: justify;\">But what is most important, the build file is placed in the build folder, so let's have a look at it. As you can see this is just pure merge of our modules, the underscore lib comes first and the other modules follow it.</p>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<p><a class=\"download\" href=\"http://sierakowski.eu/examples/requirejs/phase2_1/dealerapp-dev.js\">&lt;phase2_1/dealerapp-dev.js&gt;</a></p>\r\n<p>&nbsp;</p>\r\n<p>So let's link our index.html directly to this file and see how it works:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>script src=<span style=\"color: #990000;\">\"build/dealerapp-dev.js\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>script<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Of course you should see an error like this:</p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase2_browser_defineerror.png\" alt=\"phase2_browser_defineerror.png\" /></p>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">We didn't add the require.js library as one of the dependencies! Let's update the build-dev.js file by adding a path to the require.js script file (property is named \"requireLib\" as \"require\" word is already reserved):</p>\r\n<p><em>build-dev.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    baseUrl<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mainConfigFile<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/config.js'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    paths<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        requireLib<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'libs/require'</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    include<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">[</span><span style=\"color: #990000;\">'requireLib'</span><span style=\"color: #000000;\">]</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"main\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    out<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"build/dealerapp-dev.js\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    optimize<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'none'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Now when you run the build script again, you will notice that require.js is added at the top. If you refresh your browser, this time the page should launch correctly.</p>\r\n<p style=\"text-align: justify;\"><img src=\"http://sierakowski.eu/examples/requirejs/phase2_terminal_require.png\" alt=\"phase2_terminal_require.png\" /></p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase2_browser_withdefine.png\" alt=\"phase2_browser_withdefine.png\" /></p>\r\n<p style=\"text-align: justify;\">Once we learned how to combine multiple module files and how to get the output script running, let's have a look how to optimise it with the r.js \"adapter\". Let's create another build script - build.js and copy the entire content of the build-dev.js excluding the line optimize: false and change the out property to export the file to dealerapp.js.</p>\r\n<p><em>build.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    baseUrl<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mainConfigFile<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/config.js'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    paths<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        requireLib<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'libs/require'</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    include<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000;\">[</span><span style=\"color: #990000;\">'requireLib'</span><span style=\"color: #000000;\">]</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"main\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    out<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"build/dealerapp.js\"</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">When we run our script we should see an additional line about uglifying dealerapp.js.</p>\r\n<p style=\"text-align: justify;\"><img src=\"http://sierakowski.eu/examples/requirejs/phase2_terminal_require_optimisation.png\" alt=\"phase2_terminal_require_optimisation.png\" /></p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase2_browser_optimised.png\" alt=\"phase2_browser_optimised.png\" /></p>\r\n<p style=\"text-align: justify;\">The main script file became now a 'one liner', from 101 KB dealerapp-dev.js we managed to get 33 KB in our production code and still our application works perfectly.</p>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<p><a class=\"download\" href=\"http://sierakowski.eu/examples/requirejs/phase2_2.zip\">&lt;phase2.zip&gt;</a></p>\r\n<p>&nbsp;</p>\r\n<h3>Almond</h3>\r\n<p>The majority of the content of the combined file is now the require.js script. It contains functionality that we don't need, we just want to be able to load and run our AMD modules. Luckily there is another AMD loader that is a lot smaller and contains only necessary functionality - almond.js <a href=\"https://github.com/jrburke/almond\" target=\"_blank\">https://github.com/jrburke/almond</a>, a library from James Burke - the same guy that stay behind the require.js library. Download it and place in the libs folder in place of the require.js file.</p>\r\n<p>We need to slightly modify our build files, the build-dev.js and build.js, first remove references to the require.js and then instead of having 'main' in the name property we add a path to almond.js (without 'js') and the reference to 'main' will go to the 'include' property.</p>\r\n<p><em>build-dev.js:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    baseUrl<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mainConfigFile<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/config.js'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"libs/almond\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    include<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"main\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    out<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"build/dealerapp-dev.js\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    optimize<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'none'</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>We follow the same approach for the <em>build.js file:</em></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    baseUrl<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/'</span>,</span>\r\n<span style=\"vertical-align: top;\">    mainConfigFile<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">'scripts/config.js'</span>,</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"libs/almond\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    include<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"main\"</span>,</span>\r\n<span style=\"vertical-align: top;\">    out<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"build/dealerapp.js\"</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>So let's run the r.js optimisation tool in terminal:</p>\r\n<p><img src=\"http://sierakowski.eu/examples/requirejs/phase3_almondoptimisation.png\" alt=\"phase3_almondoptimisation.png\" /></p>\r\n<p>If we run the application in a browser, it runs in exactly the same way as before with the require.js. Let's compare file sizes after optimising with the require.js loader and the almond.js loader:</p>\r\n<p><strong>Require.js:</strong></p>\r\n<p>dealerapp-dev.js 99 KB<br />dealerapp.js 32 KB</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Almond.js:</strong></p>\r\n<p>dealerapp-dev.js 32 KB<br />dealerapp.js 18 KB</p>\r\n<p>&nbsp;</p>\r\n<p><a class=\"download\" href=\"http://sierakowski.eu/examples/requirejs/phase3.zip\">&lt;phase3.zip&gt;</a></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>TBD</p>\r\n<p>&nbsp;</p>\r\n<p>...</p>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">Vladimir</span> <span class=\"comment-date\">2013-07-19 18:20</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Good stuff.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">szczypior</span> <span class=\"comment-date\">2013-07-11 21:14</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Thanks for this tutorial. There aren't many examples on the internet on how to use require practically. Require.js documentations is comprehensive but not easy to understand at first.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 1542,
    "publishedDate": {
        "$date": "2013-06-02T23:00:00.000+0000"
    },
    "slug": "using-modules-and-dependency-management-in-javascript-applications-with-amd-require-js",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc38"
    }, {
        "$oid": "55ae65e269291600761cdc3b"
    }],
    "title": "Using modules and dependency management in JavaScript applications with AMD - require.js",
    "migrated": true
} {
    "_id": {
        "$oid": "55afc5648fb1260489f3050e"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc33"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\">Inspired by the great blog post from <a href=\"http://twitter.com/devon_o\">Devon_O </a>on conversion of GLSL (OpenGL) shaders to AGAL shaders, I decided to pick one of the examples available on Shader Toy website and to my suprise it wasn't that hard to get it working. I wanted to put the example with code on the Wonderfl but I can't get it running over there so I decided to put it here. And while I put it here, why not add just few additional words about shaders in AGAL...</p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/list-of-tips/113-agal-multitexture-shader.html</em></div>\r\n<p style=\"text-align: justify;\">So here is the shader itself. The original GLSL source is available here under the 'multitexture' name: <a href=\"http://www.iquilezles.org/apps/shadertoy/\">http://www.iquilezles.org/apps/shadertoy/</a></p>\r\n<p><object style=\"vertical-align: middle;\" data=\"http://sierakowski.eu/examples/shader_multitexture/multitexture_shader.swf\" type=\"application/x-shockwave-flash\" width=\"550\" height=\"400\"><param name=\"src\" value=\"http://sierakowski.eu/examples/shader_multitexture/multitexture_shader.swf\" /><param name=\"wmode\" value=\"direct\" />\r\n</object></p>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">As always the most difficult are the initial steps. To get started I advise to read an article from Adobe explaining what the AGAL is, what are Vertex and Fragment programs, registers, available op-codes and AGALMiniAssembler: <a href=\"http://www.adobe.com/devnet/flashplayer/articles/what-is-agal.html\">http://www.adobe.com/devnet/flashplayer/articles/what-is-agal.html</a>. This article is not comprehensive enough and leaves you with many questions and unfortunately I couldn't find any additional information on Adobe websites explaining AGAL in greater detail. Anyway it is good enough to get you started. Additional handy information about registers could be found here: <a href=\"http://www.saltgames.com/2011/agal-registers/\">http://www.saltgames.com/2011/agal-registers/</a></p>\r\n<p style=\"text-align: justify;\">So now when you know all the basics and want to try creating some shaders based on one of many of the GLSL examples available on internet, read a great article from Devon_O on his blog: <a href=\"http://blog.onebyonedesign.com/actionscript/learning-agal-with-agalmacroassembler-and-opengl-examples/\">http://blog.onebyonedesign.com/actionscript/learning-agal-with-agalmacroassembler-and-opengl-examples/</a>. If you read it attentively, you shouldn't have any problems understanding it as it guides you step by step how to do it.</p>\r\n<p style=\"text-align: justify;\">Just to make it easier to get the whole picture of the registers and the way how to populate them from ActionScript level, take a look at the figure below. [Update: <a href=\"http://sierakowski.eu/examples/agal/agal_cheatsheet.pdf\" target=\"_blank\">here is a pdf version</a>]</p>\r\n<p><img src=\"http://sierakowski.eu/examples/shader_multitexture/agal_graph_thumb.jpg\" alt=\"Agal_Graph\" /></p>\r\n<p>Also take a look at these images from the Adobe article listing all available opcodes:</p>\r\n<p><a class=\"jcepopup\" href=\"http://sierakowski.eu/examples/shader_multitexture/fig01.agal_opcodes.jpg\" target=\"_blank\"><img src=\"http://sierakowski.eu/examples/shader_multitexture/fig01.agal_opcodes_thumb.jpg\" alt=\"AGAL opcodes 1\" /></a></p>\r\n<p><a class=\"jcepopup\" href=\"http://sierakowski.eu/examples/shader_multitexture/fig02.agal_opcodes.jpg\" target=\"_blank\"><img src=\"http://sierakowski.eu/examples/shader_multitexture/fig02.agal_opcodes_thumb.jpg\" alt=\"AGAL opcodes 2\" /></a></p>\r\n<p style=\"text-align: justify;\">And here is the shader itself, I left the comments so you can easily find out how I got there (if you carefully followed instructions given by Devon).</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">/*</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">//GLSL: /////////////////////////////////////////////////////////</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    // a rotozoom</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    vec2 cst = vec2( cos(.5*time), sin(.5*time) );</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    mat2 rot = 0.5*cst.x*mat2(cst.x,-cst.y,cst.y,cst.x);</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    vec3 col1 = texture2D(tex0,rot*p).xyz;</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    // scroll</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    vec3 col2 = texture2D(tex1,0.5*p+sin(0.1*time)).xyz;</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    // blend layers</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    vec3 col = col2*col1;</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">    gl_FragColor = vec4(col,1.0);</span></span>\r\n    \r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">//CONSTANTS: ////////////////////////////////////////////////////</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">  fc0 = [ 1, 1, 1, 1 ]</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">  fc1 = [ .5 * mTime, .1 * mTime, 2, 0 ]</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">  fc2 = [ sin(.5 * mTime), cos(.5 * mTime), sin(.1 * mTime), .5 ]</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">/////////////////////////////////////////////////////////////////</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">*/</span>  </span>\r\n \r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step 1: ft1 = vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;</span></span>\r\n<span style=\"vertical-align: top;\">mov ft1, v0</span>\r\n<span style=\"vertical-align: top;\">mul ft1.xy, ft1.xy, fc1.z</span>\r\n<span style=\"vertical-align: top;\">div ft1.xy, ft1.xy, fc0.xy</span>\r\n<span style=\"vertical-align: top;\">sub ft1.xy, ft1.xy, fc0.<span style=\"color: #004993;\">x</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step2: ft2 = vec2 cst = vec2( cos(.5*time), sin(.5*time) );</span></span>\r\n<span style=\"vertical-align: top;\">mov ft2.<span style=\"color: #004993;\">x</span>, fc2.<span style=\"color: #004993;\">y</span></span>\r\n<span style=\"vertical-align: top;\">mov ft2.<span style=\"color: #004993;\">y</span>, fc2.<span style=\"color: #004993;\">x</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step3: ft3 = mat2 rot = 0.5*cst.x*mat2(cst.x,-cst.y,cst.y,cst.x);</span></span>\r\n<span style=\"vertical-align: top;\">mov ft0.<span style=\"color: #004993;\">x</span>, fc2.w</span>\r\n<span style=\"vertical-align: top;\">mul ft0.<span style=\"color: #004993;\">x</span>, ft0.<span style=\"color: #004993;\">x</span>, ft2.<span style=\"color: #004993;\">x</span></span>\r\n \r\n<span style=\"vertical-align: top;\">mov ft3.<span style=\"color: #004993;\">x</span>, ft2.<span style=\"color: #004993;\">x</span></span>\r\n<span style=\"vertical-align: top;\">mul ft3.<span style=\"color: #004993;\">x</span>, ft3.<span style=\"color: #004993;\">x</span>, ft0.<span style=\"color: #004993;\">x</span></span>\r\n \r\n<span style=\"vertical-align: top;\">mov ft3.<span style=\"color: #004993;\">y</span>, fc1.w</span>\r\n<span style=\"vertical-align: top;\">sub ft3.<span style=\"color: #004993;\">y</span>, ft3.<span style=\"color: #004993;\">y</span>, ft2.<span style=\"color: #004993;\">y</span></span>\r\n<span style=\"vertical-align: top;\">mul ft3.<span style=\"color: #004993;\">y</span>, ft3.<span style=\"color: #004993;\">y</span>, ft0.<span style=\"color: #004993;\">x</span></span>\r\n \r\n<span style=\"vertical-align: top;\">mov ft3.z, ft2.<span style=\"color: #004993;\">y</span></span>\r\n<span style=\"vertical-align: top;\">mul ft3.z, ft3.z, ft0.<span style=\"color: #004993;\">x</span></span>\r\n \r\n<span style=\"vertical-align: top;\">mov ft3.w, ft2.<span style=\"color: #004993;\">x</span></span>\r\n<span style=\"vertical-align: top;\">mul ft3.w, ft3.w, ft0.<span style=\"color: #004993;\">x</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step4: ft4 = rot * p</span></span>\r\n<span style=\"vertical-align: top;\">mul ft0.<span style=\"color: #004993;\">x</span>, ft3.<span style=\"color: #004993;\">x</span>, ft1.<span style=\"color: #004993;\">x</span></span>\r\n<span style=\"vertical-align: top;\">mul ft0.<span style=\"color: #004993;\">y</span>, ft3.<span style=\"color: #004993;\">y</span>, ft1.<span style=\"color: #004993;\">y</span></span>\r\n<span style=\"vertical-align: top;\">mul ft0.z, ft3.z, ft1.<span style=\"color: #004993;\">x</span></span>\r\n<span style=\"vertical-align: top;\">mul ft0.w, ft3.w, ft1.<span style=\"color: #004993;\">y</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #004993;\">add</span> ft4.<span style=\"color: #004993;\">x</span>, ft0.<span style=\"color: #004993;\">x</span>, ft0.<span style=\"color: #004993;\">y</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #004993;\">add</span> ft4.<span style=\"color: #004993;\">y</span>, ft0.z, ft0.w</span>\r\n<span style=\"vertical-align: top;\">mov ft4.zw, fc0.zw</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step5: ft5 = vec3 col1 = texture2D(tex0,rot*p).xyz;</span></span>\r\n<span style=\"vertical-align: top;\">tex ft5, ft4, fs0<span style=\"color: #000000; font-weight: bold;\">&lt;</span>2d, repeat, linear, nomip<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step6: ft6 = vec3 col2 = texture2D(tex1,0.5*p+sin(0.1*time)).xyz;</span></span>\r\n<span style=\"vertical-align: top;\">mov ft0, fc0</span>\r\n<span style=\"vertical-align: top;\">mul ft0, ft1, fc2.w</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #004993;\">add</span> ft0, ft0, fc2.z</span>\r\n<span style=\"vertical-align: top;\">tex ft6, ft0, fs1<span style=\"color: #000000; font-weight: bold;\">&lt;</span>2d, repeat, linear, nomip<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step7 ft7 = vec3 col = col2*col1;</span></span>\r\n<span style=\"vertical-align: top;\">mul ft7, ft6, ft5</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//Step8 gl_FragColor = vec4(col,1.0);</span></span>\r\n<span style=\"vertical-align: top;\">mov oc, ft7</span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Constants are uploaded to registers in onTick method:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span> <span style=\"color: #000000; font-weight: bold;\">!</span>mContext3d <span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">mContext3d.<span style=\"color: #004993;\">clear</span> <span style=\"color: #000000;\">(</span> <span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">1</span> <span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">mContext3d.setProgramConstantsFromMatrix<span style=\"color: #000000;\">(</span></span>\r\n<span style=\"vertical-align: top;\">  Context3DProgramType.VERTEX, <span style=\"color: #000000; font-weight: bold;\">0</span>, mMatrix, <span style=\"color: #0033ff; font-weight: bold;\">true</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//fc0 = [ 1, 1, 1, 1 ]</span></span>\r\n<span style=\"vertical-align: top;\">mContext3d.setProgramConstantsFromVector<span style=\"color: #000000;\">(</span></span>\r\n<span style=\"vertical-align: top;\">  Context3DProgramType.FRAGMENT, <span style=\"color: #000000; font-weight: bold;\">0</span>, Vector.<span style=\"color: #000000; font-weight: bold;\">&lt;</span>Number<span style=\"color: #000000; font-weight: bold;\">&gt;</span><span style=\"color: #000000;\">(</span> <span style=\"color: #000000;\">[</span> <span style=\"color: #000000; font-weight: bold;\">1</span>, <span style=\"color: #000000; font-weight: bold;\">1</span>, <span style=\"color: #000000; font-weight: bold;\">1</span>, <span style=\"color: #000000; font-weight: bold;\">1</span> <span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">)</span>;</span>\r\n \r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//fc1 = [ .5 * mTime, .1 * mTime, 2, 0 ]</span></span>\r\n<span style=\"vertical-align: top;\">mContext3d.setProgramConstantsFromVector<span style=\"color: #000000;\">(</span></span>\r\n<span style=\"vertical-align: top;\">  Context3DProgramType.FRAGMENT, <span style=\"color: #000000; font-weight: bold;\">1</span>, Vector.<span style=\"color: #000000; font-weight: bold;\">&lt;</span>Number<span style=\"color: #000000; font-weight: bold;\">&gt;</span><span style=\"color: #000000;\">(</span> <span style=\"color: #000000;\">[</span> .5 <span style=\"color: #000000; font-weight: bold;\">*</span> mTime, .1 <span style=\"color: #000000; font-weight: bold;\">*</span> mTime, <span style=\"color: #000000; font-weight: bold;\">2</span>, <span style=\"color: #000000; font-weight: bold;\">0</span> <span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">)</span>;</span>\r\n \r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//fc2 = [ sin(.5 * mTime), cos(.5 * mTime), sin(.1 * mTime), .5 ]</span></span>\r\n<span style=\"vertical-align: top;\">mContext3d.setProgramConstantsFromVector<span style=\"color: #000000;\">(</span></span>\r\n<span style=\"vertical-align: top;\">  Context3DProgramType.FRAGMENT, <span style=\"color: #000000; font-weight: bold;\">2</span>, </span>\r\n<span style=\"vertical-align: top;\">  Vector.<span style=\"color: #000000; font-weight: bold;\">&lt;</span>Number<span style=\"color: #000000; font-weight: bold;\">&gt;</span><span style=\"color: #000000;\">(</span> <span style=\"color: #000000;\">[</span> <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">sin</span><span style=\"color: #000000;\">(</span>.5 <span style=\"color: #000000; font-weight: bold;\">*</span> mTime<span style=\"color: #000000;\">)</span>, </span>\r\n<span style=\"vertical-align: top;\">  <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">cos</span><span style=\"color: #000000;\">(</span>.5 <span style=\"color: #000000; font-weight: bold;\">*</span> mTime<span style=\"color: #000000;\">)</span>, <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">sin</span><span style=\"color: #000000;\">(</span>.1 <span style=\"color: #000000; font-weight: bold;\">*</span> mTime<span style=\"color: #000000;\">)</span>, .5 <span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000;\">)</span>;</span>\r\n \r\n \r\n<span style=\"vertical-align: top;\">mContext3d.drawTriangles<span style=\"color: #000000;\">(</span>mIndexBuffer<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">mContext3d.present<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">mTime <span style=\"color: #000000; font-weight: bold;\">+</span>= .025;</span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p class=\"download\">The full source code is available on wondefl (but doesn't work for no obvious reason): <a href=\"http://wonderfl.net/c/xZs3\">http://wonderfl.net/c/xZs3</a></p>\r\n<p class=\"download\">or on the GitHub: <a href=\"https://github.com/wsierakowski/stage3d/blob/master/shader-multitexture/Main.as\">https://github.com/wsierakowski/stage3d/blob/master/shader-multitexture/Main.as</a></p>\r\n<p>&nbsp;</p>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">wojciech</span> <span class=\"comment-date\">2012-09-19 21:53</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">No problem, just added a link to it in the article.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">Carbon</span> <span class=\"comment-date\">2012-09-19 21:40</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Hey, would you be able to share the hires version of the AGAL image so I can print it and stick it on my wall? Thanks in advance.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 3755,
    "publishedDate": {
        "$date": "2012-09-05T23:00:00.000+0000"
    },
    "slug": "agal-multitexture-shader",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3a"
    }, {
        "$oid": "55ae65e269291600761cdc38"
    }],
    "title": "AGAL multitexture shader",
    "migrated": true
} {
    "_id": {
        "$oid": "55afca098fb1260489f30510"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc34"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\"><img style=\"margin: 0px 10px 0px 0px; float: left;\" src=\"http://sierakowski.eu/examples/box2d_part1/Box2D_logo.png\" alt=\"Box2D logo\" />Box2D probably doesn't have to be introduced to anyone, even if you have never used it, you have probably still heard about it. This is the most popular physics simulation engine that has been ported to every popular platform available. I had a chance to work with Box2D in C++ and I have been reading tutorials from guys using it with Python, Objective-C, Java and JavaScript. So if you come from other platform than Flash, I encourage you to read this article anyway as although I'm using a Flash port here, everything works exactly the same way in other platforms. In the first part, I cover how to create a world, static and dynamic objects, how to add interaction and work with collision detection.</p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/list-of-tips/114-box2d-basics-part-1.html</em></div>\r\n<p><span style=\"text-align: justify;\">There are two latest major versions of Box2D, 2.0 and 2.1 and there are not compatible. It means code written in 2.0 will not work in 2.1. There aren't big changes but just giving you a heads up that when following 2.0 tutorials but working with 2.1 libraries plugged in to your IDE you may experience problems.</span></p>\r\n<p style=\"text-align: justify;\">When you start working with Box2D you will quickly realise that all data types are prefixed with b2. This is to eliminate a risk of having conflicts in naming between the framework and your project.</p>\r\n<p>&nbsp;</p>\r\n<h2>Units</h2>\r\n<p>Before start coding, there is one important value that we need to set:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> const pixelsPerMeter<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">30</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Quoting the manual: \"Box2D works with floating point numbers, so some tolerances have to be used to make Box2D perform well. These tolerance have been tuned to work well with meters-kilogram-second (MKS) units. In particular, Box2D has been tuned to work well with moving objects between 0.1 and 10 meters. So this means objects between soup cans and buses in size should work well.\"</p>\r\n<p style=\"text-align: justify;\">We don't want one pixel represent one meter as considering our stage size, some objects that are 1000 pixels long would have one kilometer in Box2D world. The standard is that one pixel will be represented by 1/30 meter. This means that when working with objects, specifying their sizes or positions, we will need to convert pixels to meters. To make it easier let's create a helper function that will do a conversion for us:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> p2m<span style=\"color: #000000;\">(</span>pixels<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">return</span> pixels <span style=\"color: #000000; font-weight: bold;\">/</span> pixelsPerMeter;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h2>Debug Draw</h2>\r\n<p style=\"text-align: justify;\">We are going to use the debug drawing to see the graphical representation of what is happening in our world. This isn't a necessary step, but remember that Box2D operates on numbers and returns numbers.</p>\r\n<p style=\"text-align: justify;\">As the name implies this is only for debugging and you won't be using this in your games. Later on we will look at using our own graphical assets, we will be reading physical objects positions and move our sprites or bitmaps accordingly.</p>\r\n<p>Debug draw can show the following things:</p>\r\n<ul>\r\n<li>shape outlines</li>\r\n<li>joint connectivity</li>\r\n<li>core shapes (for continuous collision)</li>\r\n<li>broad-phase axis-aligned bounding boxes (AABBs), including the world AABB</li>\r\n<li>polygon oriented bounding boxes (OBBs)</li>\r\n<li>broad-phase pairs (potential contacts)</li>\r\n<li>center of mass</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">You can customise your view using drawFlags that are defined in the b2DebugDraw class.</p>\r\n<p style=\"text-align: justify;\">Let's declare our debugDraw globally and create createDebugDraw function:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> debugDraw<span style=\"color: #000000; font-weight: bold;\">:</span>b2DebugDraw;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> initDebugDraw<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  debugDraw = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2DebugDraw<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> debugSprite<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>debugSprite<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  debugDraw.SetSprite<span style=\"color: #000000;\">(</span>debugSprite<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  debugDraw.SetDrawScale<span style=\"color: #000000;\">(</span>pixelsPerMeter<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  debugDraw.SetFillAlpha<span style=\"color: #000000;\">(</span>.3<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  debugDraw.SetLineThickness<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">1.0</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  debugDraw.SetFlags<span style=\"color: #000000;\">(</span>b2DebugDraw.e_shapeBit <span style=\"color: #000000; font-weight: bold;\">|</span> b2DebugDraw.e_jointBit<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  ourWorld.SetDebugDraw<span style=\"color: #000000;\">(</span>debugDraw<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Then just in few moments, when we create a world object and the update function called on every step, we also call the DrawDebudData method to update the view and reflect changes in the physics world:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">ourWorld.DrawDebugData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<p style=\"text-align: justify;\">And that would be it about the debug view. However, for the purpose of this tutorial, I wanted to make it easier to change the debug view at runtime and read information about the main object - our hero's position, speed and collisions. I used components (minimalcomps from bit101) and created buttons representing each type of debug view. Have a look at the final code for this tutorial to see the implementation.</p>\r\n<p>&nbsp;</p>\r\n<h2>World creation</h2>\r\n<p style=\"text-align: justify;\">World object of type b2World is the physics hub that manages memory, objects, and simulation and it's the first thing that we create.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> ourWorld<span style=\"color: #000000; font-weight: bold;\">:</span>b2World;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">To keep everything clean let's create the \"createWorld\" function that will set up our world. Constructor of b2World takes two parameters, a gravity vector and a boolean indicating whether bodies will be allowed to sleep. In our case the gravity will be on y axis down (as in our real world) and bodies are allowed to sleep (if there are no collisions bodies will be temporary disabled to save CPU some work).</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> createWorld<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> gravity<span style=\"color: #000000; font-weight: bold;\">:</span>b2Vec2 = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0.0</span>, <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">10.0</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> doSleep<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  ourWorld = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2World<span style=\"color: #000000;\">(</span>gravity, doSleep<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h2>Conducting simulation</h2>\r\n<p style=\"text-align: justify;\"><span style=\"line-height: 26.383333206176758px;\">Let's create two more constants. The first is a time-step which is number of steps in a second is needed for the Integrator, the part of Box2D which simulates physics equations at discrete points of time. This value shouldn't be changed.</span></p>\r\n<div class=\"rj_insertcode\" style=\"line-height: 26.383333206176758px;\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> const timeStep<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">1.0</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">60.0</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">The second is a number of iterations for the Constraint Solver which is responsible for solving constraints in the simulation. We surely need more than one at a time step as \"when we solve one constraint, we slightly disrupt other constraints. The iteration count controls how many times the constraint solver sweeps over all the contacts and joints in the world. More iterations always yields a better simulation. But don't trade a small time step for a large iteration count. 60Hz and 10 iterations is far better than 30Hz and 20 iterations.\"</p>\r\n<div class=\"rj_insertcode\" style=\"line-height: 26.383333206176758px;\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> const iterations<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">10</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">In order to get the simulation working we need to plug it to a loop. We should avoid Box2D updates depending on a frame rate (that may be changing depending on the CPU load) but in Flash because of the way how the code execution is tied in to frames generation, we just use a standard enterFrame event. Let's create the update function that will be plugged to ENTER_FRAME listener.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> updatePhysics<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">null</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  ourWorld.Step<span style=\"color: #000000;\">(</span>timeStep, iterations, iterations<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  ourWorld.ClearForces<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  ourWorld.DrawDebugData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">To perform a step we need to pass our time-step value and iterations values for velocity and position iterations. After each step we clearForces and also update our debug view.</p>\r\n<p>&nbsp;</p>\r\n<h2>Creating objects</h2>\r\n<p style=\"text-align: justify;\">This might look a bit complicated at first but it makes sense when you get some practise and better understanding of Box2D.</p>\r\n<p>There are three major sub-objects that create a complete physical object: shape, fixture and body.</p>\r\n<ul>\r\n<li><strong>Shape </strong>defines a geometric shape of an object such as radius for circle, vertices for polygons. It is used to calculate a mass of an object and for collision detection.</li>\r\n<li><strong>Fixture </strong>defines material properties of an object such as density and friction. It also allows to add a userData - a pointer to an object containing data defined by yourself.</li>\r\n<li><strong>Body </strong>uses fixtures and shapes and defines position in the world and object's velocity.</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/box2d_part1/BodiesFixturesShapes.jpg\" alt=\"Bodies Fixtures Shapes explanation\" /></p>\r\n<h3>&nbsp;</h3>\r\n<h3><br />Creating static objects</h3>\r\n<p style=\"text-align: justify;\">There are three types of bodies: static, dynamic and kinetic (the last one introduced in v2.1). The main feature of bodies is that you can apply forces, torques, and impulses to them. Static bodies have mass equal to zero, never move and don't collide with other static bodies. Bodies are always rigid bodies which meant that two shapes attached to the same rigid body never move relative to each other.</p>\r\n<p style=\"text-align: justify;\">We will create four static bodies that will be walls in our world. Let's create the createWorldWalls function for that purpose. In order to create a body we need to create a body definition first that will be used to specify mass and position. The default mass is zero and since we are creating static bodies this is what we need. Let our wall have thickness of 50 pixels and width and height matching our game width and height size. Note that when creating shapes, the constructors take half of the width and half of the height. When positioning bodies however, Box2D sets position of the center of an object, not the top left like in Flash, so we have to add the middle (width/2, height/2) to the position to get it where we actually want to have it.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> static const GAME_AREA_WIDTH  <span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">500</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> static const GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">400</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> createWorldWalls<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> wallThickness<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> wallWidth<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">490</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> wallHeight<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">390</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// Definitions can be reused</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> wallShape<span style=\"color: #000000; font-weight: bold;\">:</span>b2PolygonShape = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2PolygonShape<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> wallBodyDef<span style=\"color: #000000; font-weight: bold;\">:</span>b2BodyDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2BodyDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> wallBody<span style=\"color: #000000; font-weight: bold;\">:</span>b2Body;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// Left / right wall shape</span></span>\r\n<span style=\"vertical-align: top;\">  wallShape.SetAsBox<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span>wallThickness <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span>wallHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// left</span></span>\r\n<span style=\"vertical-align: top;\">  wallBodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span>wallThickness<span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span>GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>wallBodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody.CreateFixture2<span style=\"color: #000000;\">(</span>wallShape<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// right</span></span>\r\n<span style=\"vertical-align: top;\">  wallBodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span>GAME_AREA_WIDTH <span style=\"color: #000000; font-weight: bold;\">-</span> wallThickness<span style=\"color: #000000;\">)</span>, </span>\r\n<span style=\"vertical-align: top;\">                                               p2m<span style=\"color: #000000;\">(</span>GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>wallBodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody.CreateFixture2<span style=\"color: #000000;\">(</span>wallShape<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// Top / bottom wall shape</span></span>\r\n<span style=\"vertical-align: top;\">  wallShape.SetAsBox<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span>wallWidth <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span>wallThickness <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// top </span></span>\r\n<span style=\"vertical-align: top;\">  wallBodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span>GAME_AREA_WIDTH <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span>wallThickness<span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>wallBodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody.CreateFixture2<span style=\"color: #000000;\">(</span>wallShape<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// bottom</span></span>\r\n<span style=\"vertical-align: top;\">  wallBodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span>GAME_AREA_WIDTH <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, </span>\r\n<span style=\"vertical-align: top;\">                                    p2m<span style=\"color: #000000;\">(</span>GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">-</span> wallThickness<span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>wallBodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  wallBody.CreateFixture2<span style=\"color: #000000;\">(</span>wallShape<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Do you see a pattern here? To create a body you need a body definition. You create a shape and a fixture and plug it in to a body. And to create body you use the world object.</p>\r\n<p style=\"text-align: justify;\">Important note: Do not instantiate bodies and joints with the 'new' operator though. By using the world object, you let Box2d manage them and utilise memory when they are destroyed.</p>\r\n<p style=\"text-align: justify;\">So this is how our world looks like. Just four walls around the stage.</p>\r\n<p style=\"text-align: center;\"><object data=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_1_walls.swf\" type=\"application/x-shockwave-flash\" width=\"500\" height=\"480\"><param name=\"src\" value=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_1_walls.swf\" /><param name=\"play\" value=\"false\" /><param name=\"wmode\" value=\"window\" />\r\n</object></p>\r\n<p>&nbsp;</p>\r\n<h3>Creating dynamic objects</h3>\r\n<p style=\"text-align: justify;\">Now once we have four walls surrounding our world, let's create some dynamic bodies, let it be some boxes that will be dropped from the middle of our stage. The make it easier let's create function 'createBox' that will take x, y, width, height. In addition let's add few more properties like isDynamic so we could use this function to create static bodies as well, density, friction, fixedRotation and name string. Function will return a body object that we may keep for a reference if required.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #004993;\">createBox</span><span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                           <span style=\"color: #004993;\">width</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, <span style=\"color: #004993;\">height</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                           isDynamic<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                           density<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">1</span>, friction<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = .5, </span>\r\n<span style=\"vertical-align: top;\">                           fixedRotation<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">false</span>,</span>\r\n<span style=\"vertical-align: top;\">                           <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"\"</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span>b2Body</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bWidth<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">width</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bHeight<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">height</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// box shape</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> shape<span style=\"color: #000000; font-weight: bold;\">:</span>b2PolygonShape = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2PolygonShape<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  shape.SetAsBox<span style=\"color: #000000;\">(</span>bWidth <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, bHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// fixture</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixture<span style=\"color: #000000; font-weight: bold;\">:</span>b2FixtureDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2FixtureDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixture.density = density;</span>\r\n<span style=\"vertical-align: top;\">  fixture.friction = friction;</span>\r\n<span style=\"vertical-align: top;\">  fixture.shape = shape;</span>\r\n<span style=\"vertical-align: top;\">  fixture.userData = <span style=\"color: #0033ff; font-weight: bold;\">new</span> UserDataInfo<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">name</span>, bWidth, bHeight<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body definition</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bodyDef<span style=\"color: #000000; font-weight: bold;\">:</span>b2BodyDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2BodyDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> bWidth <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">y</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> bHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">type</span> = isDynamic <span style=\"color: #000000; font-weight: bold;\">?</span> b2Body.b2_dynamicBody <span style=\"color: #000000; font-weight: bold;\">:</span> b2Body.b2_staticBody;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.fixedRotation = fixedRotation;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> body<span style=\"color: #000000; font-weight: bold;\">:</span>b2Body = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>bodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  body.CreateFixture<span style=\"color: #000000;\">(</span>fixture<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">return</span> body;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>First we convert width and height from pixels to Box2D units - meters.</p>\r\n<p style=\"text-align: justify;\">Next we create a shape. As this is going to be a box, as when we created our walls, we use the b2PolygonShape class again. Polygons could be created with one of the following methods available in the definition of the class:</p>\r\n<ul>\r\n<li><strong>SetAsBox </strong>- takes just half width and height of a box and positions it in the center</li>\r\n<li><strong>SetAsOrientedBox </strong>- allows also setting position of a box</li>\r\n<li><strong>SetAsArray </strong>- takes a list of vertices to create more complex polygons</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">It is always a good idea to go through the Box2D classes and review their methods as documentation may not be up to date, especially when there is a new release.</p>\r\n<p style=\"text-align: justify;\">The next part of code is actually the only new thing here - the fixture definition. When creating the static walls we used a shortcut and fixtures were created automatically for us. Now we want to be more specific and we aren't going to use defaults, so we create one and attach our shape to it among other details like density, friction and userData object.</p>\r\n<p>Just to say a little more about friction properties:</p>\r\n<ul>\r\n<li><strong>Friction </strong>makes objects slide along each other realistically. The parameter is usually between 0 and 1. A value of zero turns off friction and a value of one makes the friction strong. The friction is computed between two shapes with the following formula: Math.sqrt(shape1.friction * shape2.friction).</li>\r\n<li><strong>Restitution </strong>makes objects bounce and its value is usually set between 0 and 1. A value of zero means an object won't bounce. This is called an inelastic collision. A value of one means that an object's velocity will be exactly reflected. This is called a perfectly elastic collision. Restitution is combined using the following formula: Math.Max(shape1.restitution, shape2.restitution).</li>\r\n<li><strong>UserData </strong>allows to point to a custom object. You don't have to use it if you don't need to track your object down.</li>\r\n<li><strong>Shape</strong> is used to connect a shape object.</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">Next we create a body definition and specify its position and type: dynamic or static. We can also specify if it's going to rotate or not. Once definition is created, we use the world object to create a new body and using that body we can plug a fixture from our fixture definition.</p>\r\n<p style=\"text-align: justify;\">For the userData part of the fixture we could use just a string, number or we could create a custom object. To keep consistency, we will create a class UserDataInfo that will hold width, height and object's name. We will use these information when working on collisions later on.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #9900cc; font-weight: bold;\">class</span> UserDataInfo</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> <span style=\"color: #004993;\">width</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, <span style=\"color: #004993;\">height</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> UserDataInfo<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"\"</span>, </span>\r\n<span style=\"vertical-align: top;\">                               <span style=\"color: #004993;\">width</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #004993;\">height</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">this</span>.<span style=\"color: #004993;\">name</span> = <span style=\"color: #004993;\">name</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">this</span>.<span style=\"color: #004993;\">width</span> = <span style=\"color: #004993;\">width</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">this</span>.<span style=\"color: #004993;\">height</span> = <span style=\"color: #004993;\">height</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Now when we have our box creation function in place, let's create one static body - a platform in the middle of a stage and few dynamic boxes with random size and position.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> createWorldObjects<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> i<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// Create platfroms - static boxes</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #004993;\">createBox</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">10</span>, GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, GAME_AREA_WIDTH <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">3</span>, </span>\r\n<span style=\"vertical-align: top;\">                            <span style=\"color: #000000; font-weight: bold;\">10</span>, <span style=\"color: #0033ff; font-weight: bold;\">false</span>, <span style=\"color: #000000; font-weight: bold;\">1</span>, .5, <span style=\"color: #0033ff; font-weight: bold;\">false</span>, <span style=\"color: #990000;\">\"platform\"</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// Create some random dynamic boxes</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> offsetX<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">40</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> offsetTopY<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">20</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> offsetBottomY<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> maxWidthHeight<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">20</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> rX<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, rY<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, rWidth<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, rHeight<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixedRotation<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>i = <span style=\"color: #000000; font-weight: bold;\">0</span>; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span> <span style=\"color: #000000; font-weight: bold;\">10</span>; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    rX = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000;\">(</span>GAME_AREA_WIDTH <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">2</span> <span style=\"color: #000000; font-weight: bold;\">*</span> offsetX<span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> offsetX;</span>\r\n<span style=\"vertical-align: top;\">    rY = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> </span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #000000;\">(</span>GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">-</span> offsetBottomY <span style=\"color: #000000; font-weight: bold;\">-</span> offsetTopY<span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> offsetTopY;</span>\r\n<span style=\"vertical-align: top;\">    rWidth = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> maxWidthHeight <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n<span style=\"vertical-align: top;\">    rHeight = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> maxWidthHeight <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n<span style=\"vertical-align: top;\">    fixedRotation = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span>= .5;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">createBox</span><span style=\"color: #000000;\">(</span>rX, rY, rWidth, rHeight, <span style=\"color: #0033ff; font-weight: bold;\">true</span>, <span style=\"color: #000000; font-weight: bold;\">1</span>, .5, </span>\r\n<span style=\"vertical-align: top;\">                                               fixedRotation, <span style=\"color: #990000;\">\"box\"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> i<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">We aren't limited just to boxes, we can provide a list of vertices ourselves and create other type of polygons - triangles. Let's create some triangles with a function very similar to the createBox. There is one important thing to note quoting the Box2D manual: \"When you build a polygon definition you must specify the number of vertices you will use. The vertices must be specified in counter-clockwise (CCW) order about the z-axis of a right-handed coordinate system. This might turn out to be clockwise on your screen, depending on your coordinate system conventions\". In practise if you are not sure what's your coordinate system, you can always try both ways, an indication that the order is incorrect would be that your polygons will not properly collide with other objects (fall through them). The same thing may happen if a polygon is not convex, <span style=\"background-color: #ffffff; color: #333333; font-family: tahoma, verdana, sans-serif; font-size: 12px; line-height: 18.233333587646484px;\">each vertex must point outwards to some degree. Vertices can't overlap as well</span>. For our triangles below the vertices are provided in clockwise order.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> createTriangle<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                                <span style=\"color: #004993;\">width</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, <span style=\"color: #004993;\">height</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                                isDynamic<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                                density<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">1</span>, friction<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = .5, </span>\r\n<span style=\"vertical-align: top;\">                                fixedRotation<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">false</span>, </span>\r\n<span style=\"vertical-align: top;\">                                <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"\"</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span>b2Body</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bWidth<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">width</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bHeight<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">height</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// shape</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> shape<span style=\"color: #000000; font-weight: bold;\">:</span>b2PolygonShape = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2PolygonShape<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> vertices<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a> = <span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">]</span>;</span>\r\n<span style=\"vertical-align: top;\">  vertices.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span>bWidth <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, bHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;  <span style=\"color: #009900;\">// right bottom</span></span>\r\n<span style=\"vertical-align: top;\">  vertices.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">-</span>bWidth <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, bHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>; <span style=\"color: #009900;\">// left bottom</span></span>\r\n<span style=\"vertical-align: top;\">  vertices.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">-</span>bHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;          <span style=\"color: #009900;\">// middle top</span></span>\r\n<span style=\"vertical-align: top;\">  shape.SetAsArray<span style=\"color: #000000;\">(</span>vertices<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// fixture</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixture<span style=\"color: #000000; font-weight: bold;\">:</span>b2FixtureDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2FixtureDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixture.density = density;</span>\r\n<span style=\"vertical-align: top;\">  fixture.friction = friction;</span>\r\n<span style=\"vertical-align: top;\">  fixture.shape = shape;</span>\r\n<span style=\"vertical-align: top;\">  fixture.userData = <span style=\"color: #0033ff; font-weight: bold;\">new</span> UserDataInfo<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">name</span>, bWidth, bHeight<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body definition</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bodyDef<span style=\"color: #000000; font-weight: bold;\">:</span>b2BodyDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2BodyDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> bWidth <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">y</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> bHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">type</span> = isDynamic <span style=\"color: #000000; font-weight: bold;\">?</span> </span>\r\n<span style=\"vertical-align: top;\">                          b2Body.b2_dynamicBody <span style=\"color: #000000; font-weight: bold;\">:</span> b2Body.b2_staticBody;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.fixedRotation = fixedRotation;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> body<span style=\"color: #000000; font-weight: bold;\">:</span>b2Body = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>bodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  body.CreateFixture<span style=\"color: #000000;\">(</span>fixture<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">return</span> body;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And let's plug triangles to our makeWorldObjects function:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// Create some random triangles</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>i = <span style=\"color: #000000; font-weight: bold;\">0</span>; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span> <span style=\"color: #000000; font-weight: bold;\">10</span>; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  rX = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> </span>\r\n<span style=\"vertical-align: top;\">                <span style=\"color: #000000;\">(</span>GAME_AREA_WIDTH <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">2</span> <span style=\"color: #000000; font-weight: bold;\">*</span> offsetX<span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> offsetX;</span>\r\n<span style=\"vertical-align: top;\">  rY = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> </span>\r\n<span style=\"vertical-align: top;\">                <span style=\"color: #000000;\">(</span>GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">-</span> offsetBottomY <span style=\"color: #000000; font-weight: bold;\">-</span> offsetTopY<span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> offsetTopY;</span>\r\n<span style=\"vertical-align: top;\">  rWidth = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> maxWidthHeight <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n<span style=\"vertical-align: top;\">  rHeight = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> maxWidthHeight <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixedRotation = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span>= .5;</span>\r\n \r\n<span style=\"vertical-align: top;\">  createTriangle<span style=\"color: #000000;\">(</span>rX, rY, rWidth, rHeight, <span style=\"color: #0033ff; font-weight: bold;\">true</span>, <span style=\"color: #000000; font-weight: bold;\">1</span>, .5, </span>\r\n<span style=\"vertical-align: top;\">                                              fixedRotation, <span style=\"color: #990000;\">\"triangle\"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> i<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">We have boxes and triangles so let's add some circles as well. We will create another function createCircle, very similar to createBox and createTriangle but instead of width and height we will pass radius and to create a circular shape we will use b2CircleShape object.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> createCircle<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                              radius<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                              isDynamic<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a>, </span>\r\n<span style=\"vertical-align: top;\">                              density<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">1</span>, friction<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = .5, </span>\r\n<span style=\"vertical-align: top;\">                              fixedRotation<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">false</span>, </span>\r\n<span style=\"vertical-align: top;\">                              <span style=\"color: #004993;\">name</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"\"</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span>b2Body</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bRadius<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = p2m<span style=\"color: #000000;\">(</span>radius<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// circle shape</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> shape<span style=\"color: #000000; font-weight: bold;\">:</span>b2CircleShape = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2CircleShape<span style=\"color: #000000;\">(</span>bRadius<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// fixture</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixture<span style=\"color: #000000; font-weight: bold;\">:</span>b2FixtureDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2FixtureDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixture.density = density;</span>\r\n<span style=\"vertical-align: top;\">  fixture.friction = friction;</span>\r\n<span style=\"vertical-align: top;\">  fixture.shape = shape;</span>\r\n<span style=\"vertical-align: top;\">  fixture.userData = <span style=\"color: #0033ff; font-weight: bold;\">new</span> UserDataInfo<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">name</span>, bRadius <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, bRadius <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body definition</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bodyDef<span style=\"color: #000000; font-weight: bold;\">:</span>b2BodyDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2BodyDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> bRadius <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">y</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> bRadius <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">type</span> = isDynamic <span style=\"color: #000000; font-weight: bold;\">?</span> </span>\r\n<span style=\"vertical-align: top;\">                         b2Body.b2_dynamicBody <span style=\"color: #000000; font-weight: bold;\">:</span> b2Body.b2_staticBody;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.fixedRotation = fixedRotation;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> body<span style=\"color: #000000; font-weight: bold;\">:</span>b2Body = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>bodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  body.CreateFixture<span style=\"color: #000000;\">(</span>fixture<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">return</span> body;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And let's add this code to the makeWorldObjects function:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// Create some random circles</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> rRadius<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> maxRadius<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>i = <span style=\"color: #000000; font-weight: bold;\">0</span>; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span> <span style=\"color: #000000; font-weight: bold;\">10</span>; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  rX = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000;\">(</span>GAME_AREA_WIDTH <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">2</span> <span style=\"color: #000000; font-weight: bold;\">*</span> offsetX<span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> offsetX;</span>\r\n<span style=\"vertical-align: top;\">  rY = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> </span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #000000;\">(</span>GAME_AREA_HEIGHT <span style=\"color: #000000; font-weight: bold;\">-</span> offsetBottomY <span style=\"color: #000000; font-weight: bold;\">-</span> offsetTopY<span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> offsetTopY;</span>\r\n<span style=\"vertical-align: top;\">  rRadius = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">random</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> maxRadius <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixedRotation = <span style=\"color: #0033ff; font-weight: bold;\">false</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  createCircle<span style=\"color: #000000;\">(</span>rX, rY, rRadius, <span style=\"color: #0033ff; font-weight: bold;\">true</span>, <span style=\"color: #000000; font-weight: bold;\">1</span>, .5, fixedRotation, <span style=\"color: #990000;\">\"circle\"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> i<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Just in a moment we will start applying forces and impulses, but before let's create one more a little bit more complex object, made of different shapes. You can add multiple shapes to one body, remember that bodies are rigid so you nothing can breakthem. Additional shapes are not for visual effect, they will form more complex object for collision detection and may change the center of a mass in a body. I we add a very long left hand to a human object, it will move a mass to that side and if that object can rotate, it will probably fall on that side.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> createHero<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span>b2Body</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// fixture</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixture<span style=\"color: #000000; font-weight: bold;\">:</span>b2FixtureDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2FixtureDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixture.friction = .5;</span>\r\n<span style=\"vertical-align: top;\">  fixture.userData = <span style=\"color: #0033ff; font-weight: bold;\">new</span> UserDataInfo<span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\"hero\"</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">30</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">60</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body definition</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> bodyDef<span style=\"color: #000000; font-weight: bold;\">:</span>b2BodyDef = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2BodyDef<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">position</span>.Set<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">15</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">30</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.<span style=\"color: #004993;\">type</span> = b2Body.b2_dynamicBody;</span>\r\n<span style=\"vertical-align: top;\">  bodyDef.fixedRotation = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// body</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> body<span style=\"color: #000000; font-weight: bold;\">:</span>b2Body = ourWorld.CreateBody<span style=\"color: #000000;\">(</span>bodyDef<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// shapes</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> headShape<span style=\"color: #000000; font-weight: bold;\">:</span>b2CircleShape = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2CircleShape<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">10</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  headShape.b2internal<span style=\"color: #000000; font-weight: bold;\">::</span>m_p.Set<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">20</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixture.shape = headShape;</span>\r\n<span style=\"vertical-align: top;\">  body.CreateFixture<span style=\"color: #000000;\">(</span>fixture<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> boxShape<span style=\"color: #000000; font-weight: bold;\">:</span>b2PolygonShape = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2PolygonShape<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  boxShape.SetAsBox<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">15</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">10</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixture.shape = boxShape;</span>\r\n<span style=\"vertical-align: top;\">  body.CreateFixture<span style=\"color: #000000;\">(</span>fixture<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> leftLegShape<span style=\"color: #000000; font-weight: bold;\">:</span>b2PolygonShape = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2PolygonShape<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  leftLegShape.SetAsArray<span style=\"color: #000000;\">(</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">[</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">30</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">20</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>,  <span style=\"color: #009900;\">// right top</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">20</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">60</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>,  <span style=\"color: #009900;\">// right bottom</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">20</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">60</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>, <span style=\"color: #009900;\">// left bottom</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span>p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">30</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, p2m<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">20</span> <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>  <span style=\"color: #009900;\">// left top</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  fixture.shape = leftLegShape;</span>\r\n<span style=\"vertical-align: top;\">  body.CreateFixture<span style=\"color: #000000;\">(</span>fixture<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">return</span> body;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Now let's create global variable hero and create hero in createWorldObjects function:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">hero = createHero<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">40</span>, <span style=\"color: #000000; font-weight: bold;\">20</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>To tell the truth, most of the simple games based on Box2D have hero which is just a simple box shape and a bitmap representing it has a shape of human, robot or whatever the hero might be. But there are also games that have really very complex structures like cross country cars or even tanks made of many objects.</p>\r\n<p>This is the current state of our project. Notice how objects change their colors to gray just after few seconds from the start of the simulation, this indicates that they are sleeping. Do you remember the doSleep parameter when creating the world object - we allowed bodies to sleep? This means that every time a body becomes inactive - it's velocity is zero and is not colliding with other body that has some velocity, it will be removed from the simulation what will improve the performance. But if a body is in the sleep mode it doesn't mean it can't be woken up. You can check if body is sleeping with IsSleeping and you can wake it up with WakeUp, both are methods of the body object. Body will also be woken up if there is a collision or a force applied to it.</p>\r\n<p style=\"text-align: center;\"><object data=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_2_more_objects.swf\" type=\"application/x-shockwave-flash\" width=\"500\" height=\"480\"><param name=\"src\" value=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_2_more_objects.swf\" /><param name=\"play\" value=\"false\" /><param name=\"loop\" value=\"false\" /><param name=\"wmode\" value=\"window\" />\r\n</object></p>\r\n<h2><br />Using forces to control objects</h2>\r\n<p style=\"text-align: justify;\">You can apply forces, torques, and impulses to a body. When applying a force or an impulse, you need to provide a world point coordination where the load is going to be applied. Let's test this on our hero and add some way of controlling him using keyboard.</p>\r\n<p style=\"text-align: justify;\">First we need to add a way to find out what keys are pressed by a user. We will create a global array keysDown that will hold all keys that are currently down (pressed) and then add necessary listeners to our init function. We will also create listener handlers that will mark what keys are currently down and a little helper function returning boolean to check what key is currently pressed.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> keysDown<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #004993;\">init</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">hasEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ADDED_TO_STAGE</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> </span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #004993;\">removeEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ADDED_TO_STAGE</span>, <span style=\"color: #004993;\">init</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  initDebugUI<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  createWorld<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  initDebugDraw<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  createWorldWalls<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  createWorldObjects<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ENTER_FRAME</span>, updatePhysics<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  keysDown = <span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">]</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=keyboardevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboardevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">KeyboardEvent</span></a>.<span style=\"color: #004993;\">KEY_DOWN</span>, onKeyDown<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=keyboardevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboardevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">KeyboardEvent</span></a>.<span style=\"color: #004993;\">KEY_UP</span>, onKeyUp<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">protected</span> <span style=\"color: #339966; font-weight: bold;\">function</span> onKeyDown<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=keyboardevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboardevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">KeyboardEvent</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  keysDown<span style=\"color: #000000;\">[</span>e.<span style=\"color: #004993;\">keyCode</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">protected</span> <span style=\"color: #339966; font-weight: bold;\">function</span> onKeyUp<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=keyboardevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboardevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">KeyboardEvent</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  keysDown<span style=\"color: #000000;\">[</span>e.<span style=\"color: #004993;\">keyCode</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #0033ff; font-weight: bold;\">false</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> isKeyDown<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">keyCode</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">return</span> keysDown<span style=\"color: #000000;\">[</span><span style=\"color: #004993;\">keyCode</span><span style=\"color: #000000;\">]</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Next let's two constants limiting hero's speed on x and y axis.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> const heroSpeedX<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>  = <span style=\"color: #000000; font-weight: bold;\">2</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> const heroSpeedY<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>  = <span style=\"color: #000000; font-weight: bold;\">50</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>At the beginning of our updatePhysics function add these lines:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>isKeyDown<span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=keyboard%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboard.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Keyboard</span></a>.<span style=\"color: #004993;\">LEFT</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> hero.GetLinearVelocity<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span> <span style=\"color: #000000; font-weight: bold;\">-</span>heroSpeedX<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  hero.ApplyImpulse<span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">-</span>heroSpeedX <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, <span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">)</span>, hero.GetWorldCenter<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>isKeyDown<span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=keyboard%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboard.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Keyboard</span></a>.<span style=\"color: #004993;\">RIGHT</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> hero.GetLinearVelocity<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">&lt;</span> heroSpeedX<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  hero.ApplyImpulse<span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span>heroSpeedX <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span>, <span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">)</span>, hero.GetWorldCenter<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>isKeyDown<span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=keyboard%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboard.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Keyboard</span></a>.<span style=\"color: #004993;\">UP</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  hero.ApplyForce<span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">-</span>heroSpeedY <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, hero.GetWorldCenter<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">What we are doing is we are checking if LEFT, RIGHT or UP button was pressed and in case of left and right we are also checking if the current hero's linear velocity is not greater than our limit in heroSpeedX as we don't want him to speed up out of control. If these conditions are met we apply impulse with power equal to hero's max speed to the center of our hero object using GetWorldCenter method. If we applied force to some other point than the center, the hero object would rotate (actually it wouldn't in our case as the body definition had fixedRotation parameter set to true).</p>\r\n<p style=\"text-align: center;\"><object data=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_3_flying_hero.swf\" type=\"application/x-shockwave-flash\" width=\"500\" height=\"480\"><param name=\"src\" value=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_3_flying_hero.swf\" /><param name=\"play\" value=\"false\" /><param name=\"loop\" value=\"false\" /><param name=\"wmode\" value=\"window\" />\r\n</object></p>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">There are three popular ways of having an interaction with objects in Box2D, all of them are methods of a body object (as they are applied to a body object):</p>\r\n<ul>\r\n<li>applying impulse with ApplyImpulse</li>\r\n<li>applying force with ApplyForce</li>\r\n<li>setting linear velocity with SetLinearVelocity</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<p style=\"text-align: justify;\">Box2D documentation doesn't say much about differences but just by playing with it you can see the difference.</p>\r\n<p style=\"text-align: justify;\">Try to change the heroSpeedY and the type of force applied:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// inside update:</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>isKeyDown<span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=keyboard%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboard.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Keyboard</span></a>.<span style=\"color: #004993;\">UP</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// for heroSpeedY = 1</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">//hero.ApplyImpulse(new b2Vec2(0, -heroSpeedY / 2), hero.GetWorldCenter());</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// for heroSpeedY = 50</span></span>\r\n<span style=\"vertical-align: top;\">  hero.ApplyForce<span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">-</span>heroSpeedY <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, hero.GetWorldCenter<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// for heroSpeedY = 10</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">//hero.SetLinearVelocity(new b2Vec2(hero.GetLinearVelocity().x, -heroSpeedY / 2));</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">What you should notice is that the longer you keep the UP key down the more acceleration the hero gets, it means that the impulses or forces are added on top of the current speed. But applying the linear velocity doesn't do that, it only sets that speed and the hero never goes above that. Also notice that we apply different values to force and impulse to get the same hero's actual speed.</p>\r\n<p style=\"text-align: justify;\">But what if we wanted to make our hero jumping instead of flying, like in platformer games?</p>\r\n<p>&nbsp;</p>\r\n<h2>Collisions - using contacts</h2>\r\n<p style=\"text-align: justify;\">We will start with a little bit of theory first. The most important thing to remember is that Box2D uses shapes (or rather fixtures containing shapes) for collision detection. Information about collisions is available in contacts which are objects of type b2Contact. We can get them either from a world object or specific body. In our case it makes sense to check collisions for the hero object. Contact objects contain pointers to two fixtures that are colliding with each other as well as other information. Contact objects are immediately created by Box2D when bounding boxes of two objects are colliding (this is called AABB - axis-aligned bounding box collision). Of course for circular or more complex polygonal object we want more precise detection than that, but no worries, contacts have IsTouching method that allows to check if the collision is actually happening.</p>\r\n<p style=\"text-align: justify;\">We want our hero to jump only when he touches (stands on) a ground or other objects. Let's create a new global boolean variable canHeroJump and a function updateHeroCollision that will set canHeroJump to true or false depending on whether the hero touches anything.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> updateHeroCollisions<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> manifold<span style=\"color: #000000; font-weight: bold;\">:</span>b2WorldManifold;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #6699cc; font-weight: bold;\">var</span> collisionNormal<span style=\"color: #000000; font-weight: bold;\">:</span>b2Vec2 = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  canHeroJump = <span style=\"color: #0033ff; font-weight: bold;\">false</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #009900;\">// Iterate through contact lists - all collisions that hero currently have</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span><span style=\"color: #6699cc; font-weight: bold;\">var</span> edge<span style=\"color: #000000; font-weight: bold;\">:</span>b2ContactEdge = hero.GetContactList<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>; edge; edge = edge.next<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    manifold = <span style=\"color: #0033ff; font-weight: bold;\">new</span> b2WorldManifold<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    edge.contact.GetWorldManifold<span style=\"color: #000000;\">(</span>manifold<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    collisionNormal = manifold.m_normal;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// We still don't know whether our hero is fixtureA or fixtureB</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixtureA<span style=\"color: #000000; font-weight: bold;\">:</span>b2Fixture = edge.contact.GetFixtureA<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixtureB<span style=\"color: #000000; font-weight: bold;\">:</span>b2Fixture = edge.contact.GetFixtureB<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> nameA<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = fixtureA.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">?</span> </span>\r\n<span style=\"vertical-align: top;\">                      <span style=\"color: #000000;\">(</span>fixtureA.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">name</span> <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"wall\"</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> nameB<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = fixtureB.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">?</span> </span>\r\n<span style=\"vertical-align: top;\">                      <span style=\"color: #000000;\">(</span>fixtureB.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">name</span> <span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #990000;\">\"wall\"</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// If hero is in fixtureB than the normal is calculated from the colliding </span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// object's point of view so to have consistent normals for hero in </span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// fixture A and B, we multiply it by minus one.</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>nameB == <span style=\"color: #990000;\">\"hero\"</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      collisionNormal.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">*</span>= <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n<span style=\"vertical-align: top;\">      collisionNormal.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">*</span>= <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// If we got here it means there is a bounding box collision (AABB).</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// To make sure that shapes are colliding we use IsTouching method.</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>edge.contact.IsTouching<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">// If the normal vertical value is greater than zero it means that some </span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">// object is pushing the hero up. In other words, the hero is standing </span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">// in something.</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>collisionNormal.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span> <span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        canHeroJump = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">      heroNormal = collisionNormal;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">What we are doing is iterating through a contacts list that we get from our hero body object. Each contact object (or ContactEdge) has a pointer to the next one. Why is it called ContactEdge? Well this is a graph structure where edges (lines in a graph) represent contacts and nodes (circles in a graph) are colliding objects. Graphically it looks like on a picture below.</p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/box2d_part1/Box2DCollisionGraph.jpg\" alt=\"Box2d Collision Graph\" /></p>\r\n<p style=\"text-align: justify;\">You can see how easy it is to read it, the object C collides with the object A and B and on the graph there are two edges linking these three objects from the object C point of view. So each edge has two ends - linking to two objects (nodes) - actually fixtures and you can get them using GetFixtureA and GetFixtureB methods.</p>\r\n<p style=\"text-align: justify;\">Ok, so once we have our edge contact, we create a manifold object and populate it using GetWorldManifold method of the contact object. What the hell is that manifold? Well, each contact stores location of the collision points in local coordinates which is not very useful to us, but we can get global collision points coordinates using these world manifolds. Why do we need point coordinates? This will be used to get collision normals that are very useful and we will see that just in a minute.</p>\r\n<p style=\"text-align: justify;\">So having pointers to our colliding objects (actually their fixtures!), we can check their names using GetUserData. We need to always check which fixture belongs to our hero as this is not guaranteed that FixtureA will always point to the body that we took the contacts from.</p>\r\n<p style=\"text-align: justify;\">As I mentioned before, these fixtures may not be actually colliding, their bounding boxes are but no their circular shapes. This is why we are using IsTouching method that returns true if the shapes are overlapping. In this place we want to set our heroCanJump boolean as well.</p>\r\n<p style=\"text-align: justify;\">To make it easier to understand difference between collision of AABB and collision of fixtures I created two text fields printing all obstacles our hero is colliding with. I also added two new static objects - the circles, move the hero down under them and you will see that even if he is not touching the second circle from the left, it shows up on as a AABB collision. To get a visual reference of bounding boxes around objects, click on the aabbBit button at the top.</p>\r\n<p style=\"text-align: justify;\">You may wonder why the hero standing on or touching one object is sometimes detected twice. Actually the hero object is made of three shapes (fixtures), head, waist and legs and if at any time two or more of them are touching something, the collision is detected for each of them separately.</p>\r\n<p style=\"text-align: justify;\">In addition to know if our hero is touching something, we also want to know if actually he is standing on something. We don't want him to jump if he is in the air already and touches left or right side walls (although some platformers actually do that), we want him to stand on something to jump. This is where we use normals from the manifold object mentioned before. Even if an colliding object has two contact points, both points have the same normal, pointing from fixtureA on fixtureB as on the illustration (from the Box2D manual) below:</p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/box2d_part1/normals.jpg\" alt=\"Normals\" /></p>\r\n<p style=\"text-align: justify;\">So if our hero is standing on something the y part of the normal should be +1, if there is something pressing him it should be -1. This is true if hero is our fixtureA. If other object colliding with the hero is fixtureA and the hero is fixtureB we need to mutliply the normal by -1.</p>\r\n<p style=\"text-align: justify;\">So this is why we added a check to determine which fixture is our hero and convert normal if needed.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>nameB == <span style=\"color: #990000;\">\"hero\"</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  collisionNormal.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">*</span>= <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n<span style=\"vertical-align: top;\">  collisionNormal.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">*</span>= <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Inside the isTouching if clause we check the normal's y part and set canHeroJump variable:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>collisionNormal.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span> <span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  canHeroJump = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Then in the updatePhysics function let's modify the condition for applying impulse to make the hero jump:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>isKeyDown<span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=keyboard%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:keyboard.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Keyboard</span></a>.<span style=\"color: #004993;\">UP</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> canHeroJump<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  hero.ApplyImpulse<span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> b2Vec2<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">-</span>heroSpeedY <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span>, hero.GetWorldCenter<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Now the impulse will be applied only once, so it won't add new value on top of the current one as before. For this reason we need to increase the maxSpeedY value to 20. And here is the result: (in the text fields I also print the normal value of the collision contact so you can read where is the obstacle colliding with the hero located).</p>\r\n<p style=\"text-align: center;\"><object data=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_4_jumping_hero_collision.swf\" type=\"application/x-shockwave-flash\" width=\"500\" height=\"480\"><param name=\"src\" value=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_4_jumping_hero_collision.swf\" /><param name=\"play\" value=\"false\" /><param name=\"loop\" value=\"false\" /><param name=\"wmode\" value=\"window\" />\r\n</object></p>\r\n<p style=\"text-align: justify;\">So our simulation looks little more like platformer, the hero only jumps when there is some piece of ground under his legs. But try to jump to the left or right wall pressing the LEFT or RIGHT key, you will notice that the hero stick to it. We don't want that. But we can help it again using our normals, this time the x component of it. If during collision we detect that x has negative value it would mean that the hero is pressing against the left wall, if normal has positive value, the hero presses the right wall. Let's create another global variable called heroNormal, set it equal to collisionNormal only if there is a touch collision and use it as the additional condition when controlling the hero's left and right movements in the update function. You can see it in the final code and here is a result:</p>\r\n<p style=\"text-align: center;\"><object data=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_5_jumping_hero_collision2.swf\" type=\"application/x-shockwave-flash\" width=\"500\" height=\"480\"><param name=\"src\" value=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_5_jumping_hero_collision2.swf\" /><param name=\"play\" value=\"false\" /><param name=\"wmode\" value=\"window\" />\r\n</object></p>\r\n<p>&nbsp;</p>\r\n<h3>Creating one-sided platfroms with custom contact listeners</h3>\r\n<p style=\"text-align: justify;\">To make the game a little bit more like a platformer, let's create one more platform and make it one sided, so the hero could jump on it through it.</p>\r\n<p style=\"text-align: justify;\">Add this line to the createWorldObjects function:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #004993;\">createBox</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">120</span>, GAME_HEIGHT <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">125</span>, GAME_WIDTH <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">250</span>, <span style=\"color: #000000; font-weight: bold;\">10</span>, </span>\r\n<span style=\"vertical-align: top;\">                         <span style=\"color: #0033ff; font-weight: bold;\">false</span>, <span style=\"color: #000000; font-weight: bold;\">1</span>, .5, <span style=\"color: #0033ff; font-weight: bold;\">false</span>, <span style=\"color: #990000;\">\"oneSidedPlatform2\"</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">So what does it mean the platform is one-sided? It means that when the hero is below that platform, it could jump on it but when the hero falls on that platform, it will stop him. So how are we going to do make platforms one-sided? We can manipulate contacts so the Box2B engine will not perform default action which is the collision reaction that prevents objects overlapping when the collision is detected.</p>\r\n<p style=\"text-align: justify;\">In order to do that we need to create our own custom contact listener that will extend from the b2ContactListener and register it to the world object using the SetContactListener method.</p>\r\n<p>According to the documentation there are four type of events:</p>\r\n<ul>\r\n<li><strong>Begin Contact Event</strong> called when two fixtures begin to everlap</li>\r\n<li><strong>Pre-Solve Event</strong> called after collision detection but before collision resolution (this is when we can stop resolution from happening)</li>\r\n<li><strong>Post-Solve Event</strong> called after collision resolution (useful when you want to read collision impulse results)</li>\r\n<li><strong>End Contact Event </strong>called when two fixtures stop overlapping</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">So first let's create our custom contact listener and use Pre-Solve event to stop collision reaction from happening:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #9900cc; font-weight: bold;\">class</span> CustomContactListener extends b2ContactListener</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  override <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> PreSolve<span style=\"color: #000000;\">(</span>contact<span style=\"color: #000000; font-weight: bold;\">:</span>b2Contact, oldManifold<span style=\"color: #000000; font-weight: bold;\">:</span>b2Manifold<span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span> </span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixtureA<span style=\"color: #000000; font-weight: bold;\">:</span>b2Fixture = contact.GetFixtureA<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> fixtureB<span style=\"color: #000000; font-weight: bold;\">:</span>b2Fixture = contact.GetFixtureB<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// If any of the two fixtures doesn't have the user data object then return,</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// as we need 'hero' and 'oneSidedPlatform' objects only.</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">!</span>fixtureA.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">||</span> <span style=\"color: #000000; font-weight: bold;\">!</span>fixtureB.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> nameA<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #000000;\">(</span>fixtureA.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">name</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> nameB<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #000000;\">(</span>fixtureB.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">name</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>nameA <span style=\"color: #000000; font-weight: bold;\">!</span>= <span style=\"color: #990000;\">\"hero\"</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> nameB <span style=\"color: #000000; font-weight: bold;\">!</span>= <span style=\"color: #990000;\">\"hero\"</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>nameA.<span style=\"color: #004993;\">indexOf</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\"oneSidedPlatform\"</span><span style=\"color: #000000;\">)</span> == <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> nameB.<span style=\"color: #004993;\">indexOf</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\"oneSidedPlatform\"</span><span style=\"color: #000000;\">)</span> == <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// Now find out which is hero and which is platform and get their position and height.</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> heroPos<span style=\"color: #000000; font-weight: bold;\">:</span>b2Vec2, platformPos<span style=\"color: #000000; font-weight: bold;\">:</span>b2Vec2;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> heroHeight<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>, platformHeight<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>nameA == <span style=\"color: #990000;\">\"hero\"</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      heroPos = fixtureA.GetBody<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.GetPosition<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      heroHeight = <span style=\"color: #000000;\">(</span>fixtureA.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">height</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      platformPos = fixtureB.GetBody<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.GetPosition<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      platformHeight = <span style=\"color: #000000;\">(</span>fixtureB.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">height</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">else</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      platformPos = fixtureA.GetBody<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.GetWorldCenter<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      platformHeight = <span style=\"color: #000000;\">(</span>fixtureA.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">height</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      heroPos = fixtureB.GetBody<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.GetWorldCenter<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      heroHeight = <span style=\"color: #000000;\">(</span>fixtureB.GetUserData<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> UserDataInfo<span style=\"color: #000000;\">)</span>.<span style=\"color: #004993;\">height</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// If the bottom part of the hero is under a top part of a platform then do not create collision.</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// As the hero position is in the middle of the hero object we need to add half of his height</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// to get the position at the bottom of his legs. Similar for platform but we need to substract</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">// half of it's height to get the position of the top of it.</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>heroPos.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">+</span> heroHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span> platformPos.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">-</span> platformHeight <span style=\"color: #000000; font-weight: bold;\">/</span> <span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      contact.SetEnabled<span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">false</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">When PreSolve event handler is called, it receives two objects and the first one - contact - is very useful to us as this is the same type of contact as we used when going through the hero's collisions. From the contact we can get two fixtures. We are only interested in doing something if one fixture is the hero object and other one is one of the one-sided platforms. We use the name property from our UserDataInfo object that is referenced from fixture's userData property. In a real case scenario it would be a better idea to compare types of the objects rather than their names but for the purpose of this article it is fine. When we confirm that this collision happens for the hero and the one-sided platform we identify which is which and also read their current positions and their height. Having these two pairs of information, the last thing to do is to check if the hero bottom part (hero's position plus half of his height) is above or below the top part of a platform (platform's position minus half of its height). If the hero is above then do nothing - the hero will land on the platform. If he is below than set the contact disabled what will stop Box2D from doing collision reaction and the hero will fly through a platform.</p>\r\n<p style=\"text-align: justify;\">So the last bit is to register the object to the world object in the createWorld function:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">// Register custom contact listener for one-sided platforms</span></span>\r\n<span style=\"vertical-align: top;\">ourWorld.SetContactListener<span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> CustomContactListener<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And here is how our hero jumps through the platforms:</p>\r\n<p style=\"text-align: center;\"><object data=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_6_onesided_platforms.swf\" type=\"application/x-shockwave-flash\" width=\"500\" height=\"480\"><param name=\"src\" value=\"http://sierakowski.eu/examples/box2d_part1/Box2dBasicsPart1_6_onesided_platforms.swf\" /><param name=\"play\" value=\"false\" /><param name=\"wmode\" value=\"window\" />\r\n</object></p>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">I think this is a good point to end the first part of the Box2D tutorial. In the second part I will cover all various types of joints, how to control objects with mouse, how to use water and how to use your own graphical assets - display list sprites and Starling sprites. I don't want to say when it will be published as it took me almost a year to complete this one, I was so busy with my projects and the full time work and I create all different bits for this article but never had enough spare time to put it together. But hopefully it won't take long. Anyway there are plenty of really good tutorials available on the internet and having your current knowledge of Box2D will make it easier to understand code samples in different languages.</p>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<h2>Project files</h2>\r\n<p class=\"globe\">Project files on my GitHub: <a href=\"https://github.com/wsierakowski/Box2D-basics-part1\">https://github.com/wsierakowski/Box2D-basics-part1</a></p>\r\n<h2>Links to manuals and useful tutorials</h2>\r\n<p>There are plenty of resources for Box2D. Here are the ones I use most often:</p>\r\n<ul>\r\n<li>Official Box2D manual: <a href=\"http://www.box2d.org/manual.html\">http://www.box2d.org/manual.html</a></li>\r\n<li>Official Box2d Flash port manual: <a href=\"http://www.box2dflash.org/docs/2.0.2/manual\">http://www.box2dflash.org/docs/2.0.2/manual</a></li>\r\n<li>Anatomy of a collision on iforce2d blog: <a href=\"http://www.iforce2d.net/b2dtut/collision-anatomy\">http://www.iforce2d.net/b2dtut/collision-anatomy</a></li>\r\n<li>Collection of many good code samples on Emanuele Feronato blog: <a href=\"http://www.emanueleferonato.com/category/box2d/\">http://www.emanueleferonato.com/category/box2d/</a></li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>Please note that whenever I use quote sign for sentences - I'm quoting the Box2D documentation.</p>\r\n<p>I have also learnt a lot from these tutorials:</p>\r\n<ul>\r\n<li><a href=\"http://plasticsturgeon.com/2010/08/making-an-as3-game-in-box2d-flash-version-2-0-hello-world-box2d/2/\">http://plasticsturgeon.com/2010/08/making-an-as3-game-in-box2d-flash-version-2-0-hello-world-box2d/2/</a></li>\r\n<li><a href=\"http://chrismweb.com/2011/06/01/using-box2d-to-create-a-side-scrolling-game-part-2-adding-keyboard-input-and-an-enemy/\">http://chrismweb.com/2011/06/01/using-box2d-to-create-a-side-scrolling-game-part-2-adding-keyboard-input-and-an-enemy/</a></li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#6</a> <span class=\"comment-author\">David Hertz</span> <span class=\"comment-date\">2013-03-09 06:46</span>\r\n<div id=\"comment-body-176\" class=\"comment-body\">Please make the second part!!<br /><br />Regards from Mexico! <img src=\"http://sierakowski.eu/components/com_jcomments/images/smiles/lol.gif\" alt=\":lol:\" border=\"0\" /></div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#5</a> <span class=\"comment-author\">Hector</span> <span class=\"comment-date\">2013-02-09 13:41</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">I really enjoyed this great tutorial. Great Job! Thank you!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#4</a> <span class=\"comment-author\">wojciech</span> <span class=\"comment-date\">2012-11-15 22:05</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Thanks @iforce2d. Your's website is a really great resource of Box2D tutorials!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+3</span> </span> </span> <a class=\"comment-anchor\">#3</a> <span class=\"comment-author\">iforce2d</span> <span class=\"comment-date\">2012-11-14 21:10</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Hey, nice job! You have packed a lot of info in here!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">Armin</span> <span class=\"comment-date\">2012-04-18 11:13</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Great tut but is there any chance to post the source code on the github or something similar?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">Fuldner</span> <span class=\"comment-date\">2012-02-18 11:12</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Awesome tutorial. Thanks so much for sharing it!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 7289,
    "publishedDate": {
        "$date": "2012-02-12T00:00:00.000+0000"
    },
    "slug": "box-2-d-basics-part-1",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3d"
    }, {
        "$oid": "55ae65e269291600761cdc3a"
    }, {
        "$oid": "55ae65e269291600761cdc38"
    }],
    "title": "Box2D basics - Part 1",
    "migrated": true
} {
    "_id": {
        "$oid": "55afd2af8fb1260489f30511"
    },
    "__v": 1,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc35"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\">When building Flash apps or games there is very often a need to save some user data. It might be a player's progress in a game or some work done in an application. Usually online application data is being kept in a database and desktop apps are saving to a file on a hard drive. Flash also allows saving to shared objects, so called Flash's cookie files but there is a limit of size set by an operating system and some browsers or anti-viruses may clear them periodically effectively erasing users saved data. While for desktop apps developers choose Adobe AIR, which allows deeper integration with operating systems, not many people know that since Flash Player 10 there is also an option of saving and loading data from a file. In this quick article I will give you a code example of how this feature could be use along with JSON and ByteArrays to effectively save your data to a file.</p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/list-of-tips/110-saving-and-loading-complex-objects-from-a-file-with-flashplayer.html</em></div>\r\n<p style=\"text-align: justify;\">So I was working on an educational application for teachers and one of the requirements was that they should have an option to load and save data to a file what would allow them exchanging data files between themselves. Amount of data was rather huge as among other data it consisted of x and y coordinates representing drawings done on a special canvas. I created a class containing public properties representing these x and y values stored in an array and other information like color and thickness of a stroke. Every time a user creates a new line, a new object of that class is being created and stored in an array, let's call it main array. When pressed a save button, that main array is serialised using JSON library, this means it is represented in a form of string. I also create another string containing information about the version of the application, date when the data is being exported and title of the export that a teacher provides when clicking the save button. Next using these strings and their lengths values I'm creating and populating a byte array. Before saving I'm also compressing it to minimise a file size and finally whole content of the byte array is being saved to a file. Loading a file is a very similar operation with all the steps reversed ;). Enough talking, let's have a look to the code, all important things are commented to give you a better explanation. Bear in mind that this is not a complete code to copy and paste as I just provide here pieces illustrating the whole idea.</p>\r\n<p style=\"text-align: justify;\">This is a class that stores information about each drawing. I put it here to show you what sort of objects you could serialise and save to a file.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//note that all properties are public allowing JSON class to get access to them</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">internal</span> <span style=\"color: #9900cc; font-weight: bold;\">class</span> ActionPen</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> actionId<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a>; <span style=\"color: #009900;\">//each drawing has unique action id</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> toolType<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> <span style=\"color: #004993;\">color</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> thicness<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> points<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> ActionPen<span style=\"color: #000000;\">(</span>actionId<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a>, <span style=\"color: #004993;\">color</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>, <span style=\"color: #004993;\">thickness</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">this</span>.actionId = actionId;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">this</span>.toolType = ActionsRecorder.ATOOL_PEN;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">this</span>.<span style=\"color: #004993;\">color</span> = <span style=\"color: #004993;\">color</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">this</span>.thicness = <span style=\"color: #004993;\">thickness</span>;</span>\r\n<span style=\"vertical-align: top;\">    points = <span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">]</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> addAction<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    points.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=point%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:point.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Point</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">internal</span> <span style=\"color: #9900cc; font-weight: bold;\">class</span> <a href=\"http://www.google.com/search?q=point%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:point.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Point</span></a></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> <span style=\"color: #004993;\">x</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> <a href=\"http://www.google.com/search?q=point%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:point.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Point</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">x</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>, <span style=\"color: #004993;\">y</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span> <span style=\"color: #000000;\">{</span><span style=\"color: #0033ff; font-weight: bold;\">this</span>.<span style=\"color: #004993;\">x</span> = <span style=\"color: #004993;\">x</span>; <span style=\"color: #0033ff; font-weight: bold;\">this</span>.<span style=\"color: #004993;\">y</span> = <span style=\"color: #004993;\">y</span>;<span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Then another class calles ActionsRecorder has a property mActionsArray containing instances of the ActionPen class and methods to serialise and de-serialise this data. To keep things simple I'm not providing the classes to create or recreate the ActionPen objects with drawing data here. As for JSON, if you are going to use build methods to the FP11 (and you should as there are more opitimal than as3corelib's JSON), use JSON.parse() instead of decode and JSON.stringify() instead of encode.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//if you use fp11 you don't need to use as3core lib</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//as JSON is built in already.</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//if you are targetting for fp10 then use this import</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//and get http://code.google.com/p/as3corelib/</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">import</span> com.adobe.serialization.json.JSON;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #9900cc; font-weight: bold;\">class</span> ActionsRecorder</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//this array keeps instances of the ActionPen class</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> mActionsArray<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//using JSON to encode array of ActionPen objects</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//along with all properties</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> actionsExport<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">return</span> JSON.encode<span style=\"color: #000000;\">(</span>mActionsArray<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//again using JSON to decode string read from a file</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//and cast is as an array. This way we are rebuilding</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//also all the object it contained.</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> actionsImport<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">data</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      mActionsArray = <span style=\"color: #0033ff; font-weight: bold;\">null</span>;</span>\r\n<span style=\"vertical-align: top;\">      mActionsArray = JSON.<span style=\"color: #004993;\">decode</span><span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">data</span><span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">as</span> <a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      mRepeatIndex = <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>JSON encoded version of the mActionsArray would look like this:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">{</span><span style=\"color: #990000;\">\"thicness\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">5</span>,<span style=\"color: #990000;\">\"actionId\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">0</span>,<span style=\"color: #990000;\">\"points\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000;\">{</span><span style=\"color: #990000;\">\"y\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">112</span>,<span style=\"color: #990000;\">\"x\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">226</span><span style=\"color: #000000;\">}</span>,<span style=\"color: #000000;\">{</span><span style=\"color: #990000;\">\"y\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">113</span>,<span style=\"color: #990000;\">\"x\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">226</span><span style=\"color: #000000;\">}</span>,</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span><span style=\"color: #990000;\">\"y\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">116</span>,<span style=\"color: #990000;\">\"x\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">226</span><span style=\"color: #000000;\">}</span>,<span style=\"color: #000000;\">{</span><span style=\"color: #990000;\">\"y\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">131</span>,<span style=\"color: #990000;\">\"x\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">226</span><span style=\"color: #000000;\">}</span>,<span style=\"color: #000000;\">{</span><span style=\"color: #990000;\">\"y\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">149</span>,<span style=\"color: #990000;\">\"x\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">226</span><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">]</span>,</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #990000;\">\"toolType\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">0</span>,<span style=\"color: #990000;\">\"color\"</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">3355443</span><span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">]</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Next in the other part of the application I keep method to use export string from ActionsRecorder to save it to a file and another method to read it from a file and send it to ActionsRecorder to import it. There are two important things to note here, one is that Flash Player can't automatically save or read from a file. Methods that are creating file reference objects are required to receive the MouseEvent in order to get access to a file system. The second restriction is that you can't specify any folder where that file is to be saved, it will be defaulted to a desktop and user will need to manually select a location in a browse window. Both are caused by security reasons, just imagine what would happen if your app created an exe file and saved it in the startup folder or accessed operating system configuration files without letting the user know about it. Forcing to use MouseEvent, the user has control that there is something being saved or opened for some reason.</p>\r\n<p style=\"text-align: justify;\">So somewhere on the stage there are two buttons for import and export and here are the methods that are event handlers for them. First let's have a look on saving:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//for both saving and loading you are going to need this import:</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.net</span>.<a href=\"http://www.google.com/search?q=filefilter%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filefilter.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileFilter</span></a>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.utils</span>.<a href=\"http://www.google.com/search?q=bytearray%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bytearray.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">ByteArray</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> saveToFile<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=mouseevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:mouseevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">MouseEvent</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//here I'm getting a string which is a json encoded array of ActionPen objects</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> exportString<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = ActionsRecorder.getInstance<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.actionsExport<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//this is some additional data for my application in case in the future </span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//we release a never version with more type export data </span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> fileHeader<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = APP_NAME <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #990000;\">\" v\"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> APP_VER;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//also saving export data, which will be shown in the import window later on</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> exportDate<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = getDateString<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//here I'm creating a string for a file name</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> fileName<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"export_\"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> getDateString<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #990000;\">\".dat\"</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> ba<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=bytearray%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bytearray.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">ByteArray</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=bytearray%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bytearray.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">ByteArray</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//for each piece of separate data I'm saving first a number representing</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//length of a string using writeShort where Short is a 16-bit integer</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//and then an actual string with writeUTFBytes and passing length as an argument..</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//This way I will be able to read correct data later on when importing it.</span></span>\r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">writeShort</span><span style=\"color: #000000;\">(</span>fileHeader.<span style=\"color: #004993;\">length</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">writeUTFBytes</span><span style=\"color: #000000;\">(</span>fileHeader<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">writeShort</span><span style=\"color: #000000;\">(</span>exportDate.<span style=\"color: #004993;\">length</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">writeUTFBytes</span><span style=\"color: #000000;\">(</span>exportDate<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">writeShort</span><span style=\"color: #000000;\">(</span>exportString.<span style=\"color: #004993;\">length</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">writeUTFBytes</span><span style=\"color: #000000;\">(</span>exportString<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//once all data is in byte array it's time to compress it</span></span>\r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">compress</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span></span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//creating file reference and calling save method which opens browse dialog</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//where user can select a destination for a file.</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> f<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=filereference%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filereference.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileReference</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=filereference%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filereference.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileReference</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   f.<span style=\"color: #004993;\">save</span><span style=\"color: #000000;\">(</span>ba, fileName<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p><span style=\"line-height: 26px;\">And for loading in addition for a mouse handler method for import button we also have another one for loading data:</span></p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//additional import to filter out files in open dialog box</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.net</span>.<a href=\"http://www.google.com/search?q=filefilter%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filefilter.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileFilter</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> openFromFile<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=mouseevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:mouseevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">MouseEvent</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> f<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=filereference%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filereference.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileReference</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=filereference%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filereference.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileReference</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//when user completes selecting a file to load we call file load</span></span>\r\n<span style=\"vertical-align: top;\">   f.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">SELECT</span>, <span style=\"color: #339966; font-weight: bold;\">function</span><span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span><span style=\"color: #000000;\">{</span>f.<span style=\"color: #004993;\">load</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;<span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//when file loading is complete...</span></span>\r\n<span style=\"vertical-align: top;\">   f.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">COMPLETE</span>, onFileLoadComplete<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//creating file filter for open dialog box with description \"MyApp export files\"</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//and default extension of .dat</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> fFilter<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=filefilter%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filefilter.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileFilter</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=filefilter%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:filefilter.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">FileFilter</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\"MyApp export files\"</span>, <span style=\"color: #990000;\">\"*.dat\"</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//actual call to a browse method invoking browse window with array of file filters</span></span>\r\n<span style=\"vertical-align: top;\">   f.<span style=\"color: #004993;\">browse</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">[</span>fFilter<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> onFileLoadComplete<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//file loaded so let's parse the data</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> ba<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=bytearray%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bytearray.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">ByteArray</span></a> = e.<span style=\"color: #004993;\">target</span>.<span style=\"color: #004993;\">data</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//first we need to uncompress it</span></span>\r\n<span style=\"vertical-align: top;\">   ba.<span style=\"color: #004993;\">uncompress</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//and read in reverse order we saved them.</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//For each piece of data we first read Short which is a number representing</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//a length of a string and then an actual string (UTFBytes)</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> fileHeader<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = ba.<span style=\"color: #004993;\">readUTFBytes</span><span style=\"color: #000000;\">(</span>ba.<span style=\"color: #004993;\">readShort</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> exportDate<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = ba.<span style=\"color: #004993;\">readUTFBytes</span><span style=\"color: #000000;\">(</span>ba.<span style=\"color: #004993;\">readShort</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> exportString<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = ba.<span style=\"color: #004993;\">readUTFBytes</span><span style=\"color: #000000;\">(</span>ba.<span style=\"color: #004993;\">readShort</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//exportString is what we send back to the ActionsRecorder to </span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//recreate the ActionPen objects</span></span>\r\n<span style=\"vertical-align: top;\">   ActionsRecorder.getInstance<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>.actionsImport<span style=\"color: #000000;\">(</span>exportString<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>So that's it. Of course the final code would have some data validation to make sure that data imported is correct. It could be an additional integer in byte array with a total number of bytes. If these two values didn't match we would know that something wrong happened to the file.</p>\r\n<p>And here is a simple example how this looks in practice. First populate the array (represented by the list component) and export to a file. Next you can refresh the page and import the file to see the list populated again. Also open the saved file in a file editor to have a look at the binary content.</p>\r\n<p><object data=\"http://sierakowski.eu/examples/saveBinToFile/saveToFileWithMinimalComps.swf \" type=\"application/x-shockwave-flash\" width=\"400\" height=\"250\"><param name=\"src\" value=\"http://sierakowski.eu/examples/saveBinToFile/saveToFileWithMinimalComps.swf \" />\r\n</object></p>\r\n<p>&nbsp;</p>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">Fabian</span> <span class=\"comment-date\">2014-02-02 00:35</span>\r\n<div id=\"comment-body-197\" class=\"comment-body\">2 years ago....super tutorial. thanks for the post. I&acute;m using it now, but i encounter a problem.<br />My exportString is too long. I get an \"Error: Error #2030: End of file was encountered. at flash.utils::ByteArra y/readUTFBytes()\"<br /><br />How can i fix this?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">Junior dev</span> <span class=\"comment-date\">2012-06-17 13:16</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Awesome tutorial, thanks for sharing it.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 3140,
    "publishedDate": {
        "$date": "2012-01-19T00:00:00.000+0000"
    },
    "slug": "saving-and-loading-complex-objects-from-a-file-with-flashplayer",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3a"
    }, {
        "$oid": "55ae65e269291600761cdc38"
    }],
    "title": "Saving and loading complex objects from a file with FlashPlayer",
    "migrated": true
} {
    "_id": {
        "$oid": "55afd4b48fb1260489f30512"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc35"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\">Color By Shape is my first app targeted for tablets only. Currently there is only iOS version available but the plan is to have it on Android Martket as well (it's pretty easy with AIR, just I don't have currently access to enough test devices). In this article I want to share some of the issues and ways of handling them when building an iPad app.</p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/list-of-tips/102-building-ios-app-with-adobe-air-things-learnt-when-developing-colorbyshape-app.html</em></div>\r\n<p><span style=\"text-align: justify;\">Generally I must say I was very happy with the performance of AIR 2.7 and AIR 3.0 on iPad first generation. My previous iOS app, JumpingRobot game, which was initially created with iPhone packager and then with AIR 2.6 was rendered in the GPU mode as in the CPU mode was just too slow. I was happy to found that AIR 2.7 has significantly improved operations on vector assets. But animations of big objects like in example moving the whole background from left to right like in my app when a user goes from one menu to another would be too slow with vectors. So all those big graphic objects are converted to bitmaps with BitmapData.draw method and I'm moving them without significant impact on animation performance. I also convert buttons and text labels to bitmaps what make vector animations much smoother.</span></p>\r\n<h3>1. Loading external swfs on iOS</h3>\r\n<p style=\"text-align: justify;\">As you probably already know you can't load external swfs when building AIR apps for iOS if they contain any ActionScript code or classes. This is fine, we can leave with this. Some people are using swc files instead of swfs and add them at compile time. But for my project it was easier to build it the way that I could actually have an xml file with paths to illustrations and load them dynamically. All illustrations were produced by a graphic designer who was told that he can only use instance names on movie clips but can't add any classes or code like stop() etc. The first batch of 10 illustrations was working perfectly, but when I got another 10, application started silently crashing on my iPad. The only way to track down what the problem could be was to try remote debugging and see the error on my IDE output panel. If you want to learn how to use remote debugging feature that allows you to get traces directly from your device over WiFi read \"tip 15\" in this article: <a href=\"index.php?option=com_content&amp;view=article&amp;id=86:building-mobile-games-in-adobe-air-optimization-techniques-used-in-jumping-droid-game&amp;catid=2&amp;Itemid=10\" target=\"_blank\">Building mobile games in Adobe AIR - optimization techniques used in Jumping Droid</a>. This way I found that the error was:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">Next loading image # <span style=\"color: #000000; font-weight: bold;\">30</span> which <span style=\"color: #0033ff; font-weight: bold;\">is</span><span style=\"color: #000000; font-weight: bold;\">:</span>  illustrations<span style=\"color: #000000; font-weight: bold;\">/</span>easy<span style=\"color: #000000; font-weight: bold;\">/</span>dino.swf</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">[</span>SWF<span style=\"color: #000000;\">]</span> illustrations<span style=\"color: #000000; font-weight: bold;\">/</span>easy<span style=\"color: #000000; font-weight: bold;\">/</span>dino.swf <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">78074</span> bytes after decompression</span>\r\n<span style=\"vertical-align: top;\"><a href=\"http://www.google.com/search?q=verifyerror%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:verifyerror.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">VerifyError</span></a><span style=\"color: #000000; font-weight: bold;\">:</span> <a href=\"http://www.google.com/search?q=error%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:error.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Error</span></a> #<span style=\"color: #000000; font-weight: bold;\">1107</span><span style=\"color: #000000; font-weight: bold;\">:</span> The ABC <span style=\"color: #004993;\">data</span> <span style=\"color: #0033ff; font-weight: bold;\">is</span> corrupt, attempt to read out of bounds.</span>\r\n<span style=\"vertical-align: top;\"><a href=\"http://www.google.com/search?q=referenceerror%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:referenceerror.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">ReferenceError</span></a><span style=\"color: #000000; font-weight: bold;\">:</span> <a href=\"http://www.google.com/search?q=error%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:error.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Error</span></a> #<span style=\"color: #000000; font-weight: bold;\">1065</span><span style=\"color: #000000; font-weight: bold;\">:</span> Variable anim_5 <span style=\"color: #0033ff; font-weight: bold;\">is</span> not defined.</span>\r\n<span style=\"vertical-align: top;\"><a href=\"http://www.google.com/search?q=referenceerror%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:referenceerror.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">ReferenceError</span></a><span style=\"color: #000000; font-weight: bold;\">:</span> <a href=\"http://www.google.com/search?q=error%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:error.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Error</span></a> #<span style=\"color: #000000; font-weight: bold;\">1065</span><span style=\"color: #000000; font-weight: bold;\">:</span> Variable MainTimeline <span style=\"color: #0033ff; font-weight: bold;\">is</span> not defined.</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">You usually get this error when there is some ActionScript code on the timeline, some class linked as a main class or some library item in Flash IDE has a class assigned (like export for ActionScript). But I carefully checked the whole project file and couldn't find any of these. And I don't remember creating any \"anim_5\" variable... So I started to remove items one by one to find which one was a cause of this problem. To my surprise it turned out that in fact there was no class or code but the only thing that was different to other illustrations in this file was a 3D tween animation. So it looks like under the hood Flash uses some scripting foe handling animations with 3d properties. Maybe it is ActionScript or JSFL, the fact is that it has to be interpreted in order to recreate 3d animation. Even converting these tweens into keyframes didn't help, I had to ask my designer to do not use any 3d properties in Flash.</p>\r\n<h3>2. Landscape mode upside down</h3>\r\n<p style=\"text-align: justify;\">Other thing that I wanted in my game was to be able to rotate an iPad upside down and make game correctly handle that, as on this video:</p>\r\n<p style=\"text-align: center;\"><object data=\"http://www.youtube.com/v/91y9V0a9Ek0?version=3\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"270\"><param name=\"src\" value=\"http://www.youtube.com/v/91y9V0a9Ek0?version=3\" /><param name=\"wmode\" value=\"opaque\" />\r\n</object></p>\r\n<p style=\"text-align: justify;\">There is no simple option that you could actually tick to make that happen but there is a piece of code that does this job for you:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//add this to your init function or Event.ADDED_TO_STAGE handler:</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> startOrientation<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">orientation</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//allow only landscape orientation</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>startOrientation == StageOrientation.<span style=\"color: #004993;\">DEFAULT</span> <span style=\"color: #000000; font-weight: bold;\">||</span> </span>\r\n<span style=\"vertical-align: top;\">                startOrientation == StageOrientation.UPSIDE_DOWN<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #004993;\">stage</span>.setOrientation<span style=\"color: #000000;\">(</span>StageOrientation.ROTATED_RIGHT<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">else</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #004993;\">stage</span>.setOrientation<span style=\"color: #000000;\">(</span>startOrientation<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span>                    </span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//this may not work on Android devices, works well on iPad</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span>StageOrientationEvent.ORIENTATION_CHANGING, </span>\r\n<span style=\"vertical-align: top;\">                                        orientationChangeListener<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//then add this to your ORIENTATION_CHANGING listener to prevent </span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//default behavior and allow only landscape</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> orientationChangeListener<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span>StageOrientationEvent<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>e.afterOrientation == StageOrientation.<span style=\"color: #004993;\">DEFAULT</span> <span style=\"color: #000000; font-weight: bold;\">||</span> </span>\r\n<span style=\"vertical-align: top;\">                 e.afterOrientation == StageOrientation.UPSIDE_DOWN<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      e.<span style=\"color: #004993;\">preventDefault</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Your application descriptor xml file should have autoOrients be set to true.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>initialWindow<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>content<span style=\"color: #000000; font-weight: bold;\">&gt;</span>colorByShape.swf<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>content<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>systemChrome<span style=\"color: #000000; font-weight: bold;\">&gt;</span>standard<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>systemChrome<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>transparent<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>transparent<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>visible<span style=\"color: #000000; font-weight: bold;\">&gt;</span>true<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>visible<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>fullScreen<span style=\"color: #000000; font-weight: bold;\">&gt;</span>true<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>fullScreen<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>aspectRatio<span style=\"color: #000000; font-weight: bold;\">&gt;</span>landscape<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>aspectRatio<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>renderMode<span style=\"color: #000000; font-weight: bold;\">&gt;</span>cpu<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>renderMode<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>autoOrients<span style=\"color: #000000; font-weight: bold;\">&gt;</span>true<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>autoOrients<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>initialWindow<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Big props to Colin Holgate who advised this solution on Adobe Mobile Dev forums.</p>\r\n<p><span style=\"line-height: 26px;\">&nbsp;</span></p>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#3</a> <span class=\"comment-author\">Alice</span> <span class=\"comment-date\">2013-11-18 01:05</span>\r\n<div id=\"comment-body-194\" class=\"comment-body\">How did you reload your swfs? <br /><br />I'm making a game, and at the very end, I have a reload button that I want to be able to click to go back to the starting swf and it doesn't work.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">Whole Hat</span> <span class=\"comment-date\">2013-10-18 09:42</span>\r\n<div id=\"comment-body-192\" class=\"comment-body\">http://stackoverflow.com/questions/19445791/compile-ipa-file-for-ios-with-adobe-flash<br /><br /> <img src=\"http://sierakowski.eu/components/com_jcomments/images/smiles/sad.gif\" alt=\":sad:\" border=\"0\" /></div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">Pat</span> <span class=\"comment-date\">2012-10-25 15:49</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Great app. my 4 years old love it. Thanks for sharing these useful tips.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 29201,
    "publishedDate": {
        "$date": "2011-12-01T00:00:00.000+0000"
    },
    "slug": "building-ios-app-with-adobe-air-things-learnt-when-developing-colorbyshape-app",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3a"
    }, {
        "$oid": "55b0a7277f9371ddc46ba0f8"
    }],
    "title": "Building iOS app with Adobe AIR - things learnt when developing ColorByShape app",
    "migrated": true
} {
    "_id": {
        "$oid": "55afd6688fb1260489f30513"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc35"
    }],
    "content": {
        "brief": "<p><span style=\"line-height: 1.6em;\">Despite what most people think adn developer.apple.com website tells you, you can create certificates and provisioning profiles without Mac and keychain. This can be done on Windows with few easy steps described in this article.</span></p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/list-of-tips/119-getting-certificates-and-provisioning-profiles-for-ios-on-windows.html</em></div>\r\n<div class=\"yellowbox\">\r\n<p>Sources:</p>\r\n<p><a href=\"http://www.emanueleferonato.com/2011/09/22/creation-of-an-iphone-app-with-flash-and-without-a-mac-for-all-windows-lovers/\">http://www.emanueleferonato.com/2011/09/22/creation-of-an-iphone-app-with-flash-and-without-a-mac-for-all-windows-lovers/</a></p>\r\n<p><a href=\"http://www.adobe.com/devnet/air/articles/packaging-air-apps-ios.html\">http://www.adobe.com/devnet/air/articles/packaging-air-apps-ios.html</a></p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Steps for development and distributions are the same.</p>\r\n<p>1. Install Win32 OpenSSL Light. It requires MS Visual C++ 2008 Redistributable Package. Both download links are available here <a style=\"line-height: 2em;\" href=\"http://slproweb.com/products/Win32OpenSSL.html\">http://slproweb.com/products/Win32OpenSSL.html</a></p>\r\n<p>2. After installation open cmd and navigate to OpenSSL-Win32\\bin if this is the folder you install it to.</p>\r\n<p>First set the env variable:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">set</span> RANDFILE=.rnd then</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Then type:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">openssl</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>3. First generate the key:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">genrsa <span style=\"color: #000000; font-weight: bold;\">-</span>out thekey.key <span style=\"color: #000000; font-weight: bold;\">2048</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>4. Next generate certificate signing request, C stands for your country code:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">req <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #0033ff; font-weight: bold;\">new</span> <span style=\"color: #000000; font-weight: bold;\">-</span>key thekey.key <span style=\"color: #000000; font-weight: bold;\">-</span>out certificate.csr  <span style=\"color: #000000; font-weight: bold;\">-</span>subj <span style=\"color: #990000;\">\"/emailAddress=youraddress@domain.com, CN=firstname lastname, C=IE\"</span> <span style=\"color: #000000; font-weight: bold;\">-</span>config <span style=\"color: #990000;\">\"openssl.cfg\"</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>Note: -config \"openssl.cfg\" is necessary only if you previously got the warning you couldn&rsquo;t open the config file</p>\r\n<p>5. Log on to developer.apple.com, go to iOS Dev center, click on Certificates, Identifiers &amp; Profiles. Click on Certificates and select Deveopment or Production category depending what you want to do. Create new certificate and when asked to upload the cert signing request select the certificate.csr file you just created. Download it. For development certificate it will be ios_development.cer, for distribution ios_distribution.cer.</p>\r\n<p>6. Next go back to your openssl and generate pem file:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">x509 <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #0033ff; font-weight: bold;\">in</span> ios_distribution.cer <span style=\"color: #000000; font-weight: bold;\">-</span>inform DER <span style=\"color: #000000; font-weight: bold;\">-</span>out ios_distribution.pem <span style=\"color: #000000; font-weight: bold;\">-</span>outform PEM</span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>7. Now you will convert the pem file into p12:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">pkcs12 <span style=\"color: #000000; font-weight: bold;\">-</span>export <span style=\"color: #000000; font-weight: bold;\">-</span>inkey thekey.key <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #0033ff; font-weight: bold;\">in</span> ios_distribution.pem <span style=\"color: #000000; font-weight: bold;\">-</span>out iphone_dist.p12</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>For development obviously you will use ios_development.pem as intput and iphone_dev.p12 as output, whatever you like really.</p>\r\n<p>&nbsp;</p>\r\n<p>8. Next you need to create a new provisioning profile. Go to Provisioning Profiles, click create new, select category, iOS APP Development or App Store for production. For getting the development provisioning you will need to select a device that you added. Next select App ID and then certificate that you just created. Bear in mind that you need separate two certificates for development and distribution - but the process of creating them is the same.</p>\r\n<p>When you finish everything you are ready to 'compile' your iOS app. You will need your .mobileprovision file and .p12. Plug your iDevice, open iTunes and drag development provisioning and the generated .ipa file to the apps category in iTunes, next select that app in iDevice section and sync. For distribution you will need to use MacOS on Mac or VM to install Application Loader and upload your app to the AppStore.</p>\r\n<p>&nbsp;</p>\r\n<p>â€‹</p>",
        "extendedType": "html"
    },
    "hits": 727,
    "publishedDate": {
        "$date": "2011-11-15T00:00:00.000+0000"
    },
    "slug": "getting-certificates-and-provisioning-profiles-for-ios-on-windows",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3a"
    }, {
        "$oid": "55b0a7277f9371ddc46ba0f8"
    }],
    "title": "Getting certificates and provisioning profiles for iOS on Windows"
} {
    "_id": {
        "$oid": "55afd96c8fb1260489f30514"
    },
    "__v": 1,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc33"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\">I was asked to quickly build an algorithm to find the shortest path for a labirinth game. First thing I did was check for some quick ideas on Wikipedia and found this article: <a href=\"http://en.wikipedia.org/wiki/Pathfinding\" target=\"_blank\">http://en.wikipedia.org/wiki/Pathfinding</a>. As there was only a text description I quickly wrote a simple ActionScript 3 class returning coordinates that create the shortest path.</p>",
        "extendedHTML": "<div class=\"recycle\">http://sierakowski.eu/list-of-tips/88-simple-pathfinding-algorithm-in-actionscript-3.html</div>\r\n<p style=\"text-align: justify;\">I won't copy the whole article from Wikipedia as you can check it out yourself but let me just copy and paste the rules of the simple method that is presented there as an example. This is the most basic algorithm, I remember learning when I was a student some more complex algorithms like Dijkstra's but this one is just enough for the basic game.</p>\r\n<p class=\"greenbox\">First, create a list of coordinates, which we will use as a queue. The queue will be initialized with one coordinate, the end coordinate. Each coordinate will also have a counter variable attached (the purpose of this will soon become evident). Thus, the queue starts off as ((3,8,0)). <br />Then, go through every element in the queue, including elements added to the end over the course of the algorithm, and to each element, do the following: <br />1. Create a list of the four adjacent cells, with a counter variable of the current element's counter variable + 1 (in our example, the four cells are ((2,8,1),(3,7,1),(4,8,1),(3,9,1))) <br />2. Check all cells in each list for the following two conditions: <br /> - If the cell is a wall, remove it from the list <br /> - If there is an element in the main list with the same coordinate and an equal or lower counter, remove it from the list <br />3. Add all remaining cells in the list to the end of the main list <br />4. Go to the next item in the list</p>\r\n<p>&nbsp;</p>\r\n<p>And below is my implementation:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #9900cc; font-weight: bold;\">package</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #3f5fbf;\">/**</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">   * ...</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">   * @author wojciech[at]sierakowski.eu</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">   * http://en.wikipedia.org/wiki/Pathfinding</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">   */</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #9900cc; font-weight: bold;\">class</span> PathFinder</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #009900;\">//types of map elements</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #6699cc; font-weight: bold;\">var</span> MAP_WALL      <span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"X\"</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #6699cc; font-weight: bold;\">var</span> MAP_OPEN_SPACE  <span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"_\"</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #6699cc; font-weight: bold;\">var</span> MAP_START      <span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"S\"</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #6699cc; font-weight: bold;\">var</span> MAP_FINISH    <span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a> = <span style=\"color: #990000;\">\"0\"</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #6699cc; font-weight: bold;\">var</span> _map<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>, _queue<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> PathFinder<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #339966; font-weight: bold;\">function</span> findPath<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">map</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> i<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>, j<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      _queue = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      _map = <span style=\"color: #004993;\">map</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//first find the coordinate of finish which is a first object</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> finishObject<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=object%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:object.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Object</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> counter<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>i = <span style=\"color: #000000; font-weight: bold;\">0</span>; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span> _map.<span style=\"color: #004993;\">length</span>; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>j = <span style=\"color: #000000; font-weight: bold;\">0</span>; j <span style=\"color: #000000; font-weight: bold;\">&lt;</span> _map<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.<span style=\"color: #004993;\">length</span>; j<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_map<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>j<span style=\"color: #000000;\">]</span> == MAP_FINISH<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            finishObject = <span style=\"color: #000000;\">{</span>i<span style=\"color: #000000; font-weight: bold;\">:</span>i, j<span style=\"color: #000000; font-weight: bold;\">:</span>j, counter<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      _queue.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>finishObject<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//run recursive function to find the shortest path</span></span>\r\n<span style=\"vertical-align: top;\">      checkQueue<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">return</span> _queue;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">private</span> static <span style=\"color: #339966; font-weight: bold;\">function</span> checkQueue<span style=\"color: #000000;\">(</span>startIndex<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>, counter<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> lastQueueLength<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a> = _queue.<span style=\"color: #004993;\">length</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> i<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//check neigbours of the _queue element</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>i = startIndex; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span> lastQueueLength; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #6699cc; font-weight: bold;\">var</span> coordinate<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=object%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:object.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Object</span></a>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #009900;\">//check top</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j <span style=\"color: #000000; font-weight: bold;\">!</span>= <span style=\"color: #000000; font-weight: bold;\">0</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> _map<span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">]</span> <span style=\"color: #000000; font-weight: bold;\">!</span>= MAP_WALL<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          coordinate = <span style=\"color: #000000;\">{</span>i<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i, j<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">1</span>, counter<span style=\"color: #000000; font-weight: bold;\">:</span>counter<span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #009900;\">//if this coordinate is the start finish algorothm as </span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #009900;\">//the shortest path was just found</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_map<span style=\"color: #000000;\">[</span>coordinate.i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>coordinate.j<span style=\"color: #000000;\">]</span> == MAP_START<span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #009900;\">//if a coordinate already exists in the queue </span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #009900;\">//and has higher coordinate it won't be added</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #009900;\">//but if it has lower coordinate it will replace the one in the queue</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>canBeAddedToQueue<span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> _queue.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #009900;\">//check right</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">!</span>= _map.<span style=\"color: #004993;\">length</span> <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">1</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> </span>\r\n<span style=\"vertical-align: top;\">                        _map<span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j<span style=\"color: #000000;\">]</span> <span style=\"color: #000000; font-weight: bold;\">!</span>= MAP_WALL<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          coordinate = <span style=\"color: #000000;\">{</span>i<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">1</span>, j<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j, counter<span style=\"color: #000000; font-weight: bold;\">:</span>counter<span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_map<span style=\"color: #000000;\">[</span>coordinate.i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>coordinate.j<span style=\"color: #000000;\">]</span> == MAP_START<span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>canBeAddedToQueue<span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> _queue.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #009900;\">//check bottom</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j <span style=\"color: #000000; font-weight: bold;\">!</span>= _map<span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i<span style=\"color: #000000;\">]</span>.<span style=\"color: #004993;\">length</span> <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">1</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> </span>\r\n<span style=\"vertical-align: top;\">                           _map<span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">]</span> <span style=\"color: #000000; font-weight: bold;\">!</span>= MAP_WALL<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          coordinate = <span style=\"color: #000000;\">{</span>i<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i, j<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">1</span>, counter<span style=\"color: #000000; font-weight: bold;\">:</span>counter<span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_map<span style=\"color: #000000;\">[</span>coordinate.i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>coordinate.j<span style=\"color: #000000;\">]</span> == MAP_START<span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>canBeAddedToQueue<span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> _queue.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #009900;\">//check left</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">!</span>= <span style=\"color: #000000; font-weight: bold;\">0</span> <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> _map<span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>_queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j<span style=\"color: #000000;\">]</span> <span style=\"color: #000000; font-weight: bold;\">!</span>= MAP_WALL<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          coordinate = <span style=\"color: #000000;\">{</span>i<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">1</span>, j<span style=\"color: #000000; font-weight: bold;\">:</span> _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j, counter<span style=\"color: #000000; font-weight: bold;\">:</span>counter<span style=\"color: #000000;\">}</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_map<span style=\"color: #000000;\">[</span>coordinate.i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>coordinate.j<span style=\"color: #000000;\">]</span> == MAP_START<span style=\"color: #000000;\">)</span> <span style=\"color: #0033ff; font-weight: bold;\">return</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>canBeAddedToQueue<span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">)</span> _queue.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">      checkQueue<span style=\"color: #000000;\">(</span>lastQueueLength, counter <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #339966; font-weight: bold;\">function</span> canBeAddedToQueue<span style=\"color: #000000;\">(</span>coordinate<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=object%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:object.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Object</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span><span style=\"color: #6699cc; font-weight: bold;\">var</span> i<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a> = _queue.<span style=\"color: #004993;\">length</span> <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">1</span>; i <span style=\"color: #000000; font-weight: bold;\">&gt;</span>= <span style=\"color: #000000; font-weight: bold;\">0</span> ; i<span style=\"color: #000000; font-weight: bold;\">--</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>coordinate.i == _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">&amp;&amp;</span> coordinate.j == _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>coordinate.counter <span style=\"color: #000000; font-weight: bold;\">&gt;</span>= _queue<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.counter<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">false</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">else</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            _queue.<span style=\"color: #004993;\">splice</span><span style=\"color: #000000;\">(</span>i, <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">return</span> <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span>  </span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">And with this code you can test it. The labirinth is exactly the same as in the Wikipedia example (the result as well):</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #9900cc; font-weight: bold;\">package</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #3f5fbf;\">/**</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">   * ...</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">   * @author wojciech[at]sierakowski.eu</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #3f5fbf;\">   */</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.display</span>.<a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a>;</span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.text</span>.<a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">TextField</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #9900cc; font-weight: bold;\">class</span> Pathfinding extends <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> <span style=\"color: #004993;\">map</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #6699cc; font-weight: bold;\">var</span> MAP_ELEMENT_SIZE  <span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a> = <span style=\"color: #000000; font-weight: bold;\">20</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #6699cc; font-weight: bold;\">var</span> mapSpriteBefore<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a>, mapSpriteAfter<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> Pathfinding<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//create a map</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">0</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X X X X X X X X X X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X _ _ _ X X _ X _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">2</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X _ X _ _ X _ _ _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">3</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X S X X _ _ _ X _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">4</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X _ X _ _ X _ _ _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">5</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X _ _ _ X X _ X _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">6</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X _ X _ _ X _ X _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">7</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X _ X X _ _ _ X _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">8</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X _ _ 0 _ X _ _ _ X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">9</span><span style=\"color: #000000;\">]</span> = <span style=\"color: #990000;\">\"X X X X X X X X X X\"</span>.<span style=\"color: #004993;\">split</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\" \"</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      mapSpriteBefore = createVisualMap<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>mapSpriteBefore<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> paths<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a> = PathFinder.findPath<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">map</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      mapSpriteAfter = createVisualMap<span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">map</span>, paths<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      mapSpriteAfter.<span style=\"color: #004993;\">x</span> = MAP_ELEMENT_SIZE <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000; font-weight: bold;\">11</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>mapSpriteAfter<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">    <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> createVisualMap<span style=\"color: #000000;\">(</span>mapArray<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a>, paths<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=array%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:array.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Array</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">null</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> i<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> mapSprite<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>i = <span style=\"color: #000000; font-weight: bold;\">0</span>; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span> mapArray.<span style=\"color: #004993;\">length</span>; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span><span style=\"color: #6699cc; font-weight: bold;\">var</span> j<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=int%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:int.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">int</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span>; j <span style=\"color: #000000; font-weight: bold;\">&lt;</span> mapArray<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.<span style=\"color: #004993;\">length</span>; j<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #6699cc; font-weight: bold;\">var</span> mapElement<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #0033ff; font-weight: bold;\">switch</span> <span style=\"color: #000000;\">(</span>mapArray<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">[</span>j<span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">case</span> PathFinder.MAP_WALL<span style=\"color: #000000; font-weight: bold;\">:</span></span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">beginFill</span><span style=\"color: #000000;\">(</span>0x000000<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">drawRect</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, MAP_ELEMENT_SIZE, MAP_ELEMENT_SIZE<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">endFill</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">case</span> PathFinder.MAP_OPEN_SPACE<span style=\"color: #000000; font-weight: bold;\">:</span></span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">beginFill</span><span style=\"color: #000000;\">(</span>0xFFFFFF<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">drawRect</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, MAP_ELEMENT_SIZE, MAP_ELEMENT_SIZE<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">endFill</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">case</span> PathFinder.MAP_START<span style=\"color: #000000; font-weight: bold;\">:</span></span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">beginFill</span><span style=\"color: #000000;\">(</span>0x00FFFF<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">drawRect</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, MAP_ELEMENT_SIZE, MAP_ELEMENT_SIZE<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">endFill</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #0033ff; font-weight: bold;\">case</span> PathFinder.MAP_FINISH<span style=\"color: #000000; font-weight: bold;\">:</span></span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">beginFill</span><span style=\"color: #000000;\">(</span>0xFF0000, .5<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">drawRect</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, MAP_ELEMENT_SIZE, MAP_ELEMENT_SIZE<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              mapElement.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">endFill</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">              <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">          mapElement.<span style=\"color: #004993;\">x</span> = j <span style=\"color: #000000; font-weight: bold;\">*</span> MAP_ELEMENT_SIZE;</span>\r\n<span style=\"vertical-align: top;\">          mapElement.<span style=\"color: #004993;\">y</span> = i <span style=\"color: #000000; font-weight: bold;\">*</span> MAP_ELEMENT_SIZE;</span>\r\n<span style=\"vertical-align: top;\">          mapSprite.<span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>mapElement<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>paths <span style=\"color: #000000; font-weight: bold;\">!</span>= <span style=\"color: #0033ff; font-weight: bold;\">null</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span>i = <span style=\"color: #000000; font-weight: bold;\">0</span>; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span> paths.<span style=\"color: #004993;\">length</span>; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">          <span style=\"color: #6699cc; font-weight: bold;\">var</span> label_txt<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">TextField</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">TextField</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">          label_txt.<span style=\"color: #004993;\">text</span> = paths<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.counter;</span>\r\n<span style=\"vertical-align: top;\">          label_txt.<span style=\"color: #004993;\">x</span> = paths<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.j <span style=\"color: #000000; font-weight: bold;\">*</span> MAP_ELEMENT_SIZE;</span>\r\n<span style=\"vertical-align: top;\">          label_txt.<span style=\"color: #004993;\">y</span> = paths<span style=\"color: #000000;\">[</span>i<span style=\"color: #000000;\">]</span>.i <span style=\"color: #000000; font-weight: bold;\">*</span> MAP_ELEMENT_SIZE;</span>\r\n<span style=\"vertical-align: top;\">          mapSprite.<span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>label_txt<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">        <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">return</span> mapSprite;</span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">And now quoting the Wikipedia's article: \"Now, start at Start and go to the nearby cell with the lowest number (unchecked cells cannot be moved to).\".</p>\r\n<p><object data=\"http://sierakowski.eu/examples/pathfinding/pathfinding.swf\" type=\"application/x-shockwave-flash\" width=\"382\" height=\"175\"><param name=\"src\" value=\"http://sierakowski.eu/examples/pathfinding/pathfinding.swf\" /><param name=\"wmode\" value=\"transparent\" />\r\n</object></p>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\"><span style=\"line-height: 21px;\">No doubt there might be some more optimal way of doing this, but this one does the job alright ;) If you have any suggestion or came up with other (and better) algorithms in ActionScript and would like to share it with the community, add a comment with a link to your blog article.</span></p>\r\n<p><span style=\"line-height: 21px;\">&nbsp;</span></p>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#5</a> <span class=\"comment-author\">Hari</span> <span class=\"comment-date\">2014-05-10 06:52</span>\r\n<div id=\"comment-body-200\" class=\"comment-body\"><img src=\"http://sierakowski.eu/legacy/jcomments/smiles/normal.gif\" alt=\":-|\" border=\"0\" /> i have no errors but nothing is displayed on my screen. can you please help me how will i can compile this .as files. Am very new to AS3. Thanks in Advance!!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#4</a> <span class=\"comment-author\">ehaugw</span> <span class=\"comment-date\">2013-07-11 22:07</span>\r\n<div id=\"comment-body-194\" class=\"comment-body\">Isn't this what's called the A* algorithm?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#3</a> <span class=\"comment-author\">David J.</span> <span class=\"comment-date\">2013-05-17 18:10</span>\r\n<div id=\"comment-body-194\" class=\"comment-body\">I'm glad I finally found a pathfinding algorithm that doesn't take hours to understand. Thanks a ton for sharing this!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">Alex</span> <span class=\"comment-date\">2012-07-21 22:42</span>\r\n<div id=\"comment-body-137\" class=\"comment-body\">I know this article is almost a year old, but I love it! It's thought through correctly and is overall a fascinating approach <img src=\"http://sierakowski.eu/legacy/jcomments/smiles/lol.gif\" alt=\":lol:\" border=\"0\" /></div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">Aubrius</span> <span class=\"comment-date\">2011-12-14 22:55</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">I have used other people's algorithms and functions for path-finding before, but I never understood the purpose of the queue until I read this post. Thanks for sharing it!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 8886,
    "publishedDate": {
        "$date": "2011-08-06T23:00:00.000+0000"
    },
    "slug": "simple-pathfinding-algorithm-in-actionscript-3",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3a"
    }, {
        "$oid": "55ae65e269291600761cdc38"
    }],
    "title": "Simple pathfinding algorithm in ActionScript 3"
} {
    "_id": {
        "$oid": "55b0a5a88fb1260489f30515"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc35"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\">Yes... building my first cross-platform and multi-screen mobile game was quite a challenge. At the time when I started this project, the Adobe AIR for mobiles (2.5) was quite immature and the best source of solutions and workarounds to new problems (often bugs) was the Adobe's <a href=\"http://forums.adobe.com/community/air/development/mobile\" target=\"_blank\">Flash Community forum</a>. I'm going to share here some techniques I learnt and used in Jumping Droid game. I encourage you to try them, experiment and mix with others, to achieve better optimisation and better performance.</p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/list-of-tips/86-building-mobile-games-in-adobe-air-optimization-techniques-used-in-jumping-droid-game.html</em></div>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color: #ff0000;\">LAST UPDATE: September 2012 (TIP 17: using Vibration Native Extension)</span></p>\r\n<p class=\"info\"><a href=\"https://market.android.com/details?id=air.JumpingDroid\"><img style=\"vertical-align: middle;\" src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/jumpingDroid.png\" alt=\"jumpingDroid\" /> <strong>Play Jumping Droid from the Android Market</strong></a><br /> <br /><a href=\"http://itunes.apple.com/us/app/jumping-robot/id451002961\"><img style=\"vertical-align: middle;\" src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/jumpingRobot.png\" alt=\"jumpingRobot\" /> <strong>Play Jumping Robot from the Apple AppStore</strong></a></p>\r\n<p>&nbsp;</p>\r\n<h3>TIP 1: GPU or CPU?</h3>\r\n<p style=\"text-align: justify;\">This question should be answered before you start your app/game development. When the first version of AIR for mobile was released, many developers (including me) just took one of their web - Flash project and published it with AIR to see how it would performed. If the project had many animations, the performance was usually very poor in both CPU and GPU modes. It was bad in CPU because mobile processors couldn't handle complex mathematical calculations involved in handling vector objects and animating them (and AIR wasn't well optimised as well). It was bad in GPU because usually the code taken from Flash projects wasn't optimised to use bitmaps efficiently. But in the meantime, Adobe has done many improvements to the CPU mode, especially for iOS (AIR 2.7 is really faster than older releases) and also developers have learnt how to properly work with GPU.</p>\r\n<p style=\"text-align: justify;\">Generally, when looking for answer to question which mode is good for a game/app, you need to specify if you are going to use many static elements like buttons, flat graphics, text boxes and overall very little animation or rather there is going to be plenty of animated objects moving and interacting with each other across the screen.</p>\r\n<p style=\"text-align: justify;\">In the first scenario the CPU will do the job. The main pros of the CPU mode is that you can use all filters (drop shadow, glow etc), masks, all blending modes, which are limited when using GPU. Only in CPU mode it really makes sense to use ActionScript drawing (graphics class of Display Objects), ie to create graphs and graphical simulations. And more importantly, you just take all vectors created by a graphic designer and use them as they are without converting them to any other format. With AIR 2.7 your app will easily perform in 60 fps if there is not too much going on on the screen.</p>\r\n<p style=\"text-align: justify;\">In the second scenario it would make more sense to relieve the CPU and delegate all the graphical work to the GPU. But it is not enough to just \"switch\" to the GPU, you have to plan and develop your game to properly utilize this mode. GPU can work only with bitmaps, so you need to create / convert all your graphical objects as / to bitmaps beforehand or convert all your vector objects at run time. In the first approach, developers usually use png files (as they support transparency) and usually import them directly to the FLA's file library during development or include them in the SWC file or probably most often load them at runtime (loading when they are really needed - to conserve memory). In the second approach there are two options, you can use cacheAsBitmap and cacheAsBitmapMatrix properties of Display Object that convert their vector representation to bitmaps automatically or manually take a snapshot of Display Objects using the draw method of BitmapData and use it with bitmap objects. I'm using the second method and talk about it more in tip #2. Bu be careful, there is a catch when using the GPU mode though, converting to bitmaps at runtime is a very processor intensive process, it takes time. And forget about converting to bitmap at every new frame, it will just kill your app's performance. Developers beginning with AIR are often surprised that the frame rate drops to extremely low values when they \"cache as bitmap\" movie clips containing frames of animations. This basically means that at every new frame this movie clip has to be converted to bitmap (and sent to GPU) because it just changed (another frame of animation). In my opinion cacheAsBitmap should throw an error when used on movie clips with more frames then one!</p>\r\n<p>&nbsp;</p>\r\n<h3>TIP 2: Resize MovieClips to match device's screen size and convert them to bitmaps</h3>\r\n<p style=\"text-align: justify;\">If you want your game to correctly scale and fit on every mobile device, from smartphones to tablets, then you need to rescale all your assets like backgrounds, hero, enemies, buttons either up or down. But on the other hand you probably already know that if you want smooth animations and keep high frame rate you need to use GPU and bitmaps rather than vector representations of your graphical objects. One easy solution is to resize all objects and then use cacheAsBitmap and cacheAsBitmapMatrix properties to convert to bitmaps. But this technique doesn't produce the best quality graphics, you will notice some strange things going on on converted curves or circles... this wasn't good enough for me. Many developers actually use pre-created bitmaps, usually sprite sheets in form of PNG files. This is the fastest option from the game performance point of view as there is no conversion from vectors to bitmaps (what can take significant amount of time) but again you can't (shouldn't) rescale bitmaps as this would lower their quality. If you develop for Apple devices then you can create separate pngs for iPad, iPhone and iPhone 4 - you know all the types of resolutions already: 1024x768, 480x320, 960x640. But you don't know all resolutions of Android devices, they may slightly vary, in example Galaxy Tab has 1024x600 and other 7 inch tablets 800x480, bigger tablets 1024x768 and smartphones may have 800x480, 960x540...</p>\r\n<p style=\"text-align: justify;\">I decided to do that another way. First I rescale all sprites and movie clips according to a detected screen resolution, then convert them all to bitmapDatas and use as bitmaps. This way I have the best quality graphics, smooth animation and I can reuse the same bitmapData on many bitmap object (one bitmap in memory and many instances of it on the screen).</p>\r\n<p style=\"text-align: justify;\">In Jumping Droid you can see dynamically resized objects and also different backgrounds layout on different screen sizes (last two screenshots are extreme cases). I stick city image to the bottom and clouds at the top:</p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/jumpingDroidResize480x320.jpg\" alt=\"Jumping Droid 480 x 320\" /></p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/jumpingDroidResize720x600.jpg\" alt=\"Jumping Droid 720x 600\" /></p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/jumpingDroidResize720x320.jpg\" alt=\"Jumping Droid 720 x 320\" /></p>\r\n<p style=\"text-align: justify;\">The code snippet would look something like this:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//all graphic objects were created for 800 x 480</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//so I save this details as my base resolution</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> static const GAME_ORG_WIDTH<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a> = <span style=\"color: #000000; font-weight: bold;\">800</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> static const GAME_ORG_HEIGHT<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a> = <span style=\"color: #000000; font-weight: bold;\">480</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//later in my init function (handler for Event.ADDED)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #004993;\">init</span><span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">scaleMode</span> = <a href=\"http://www.google.com/search?q=stagescalemode%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:stagescalemode.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">StageScaleMode</span></a>.<span style=\"color: #004993;\">NO_SCALE</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">align</span> = <a href=\"http://www.google.com/search?q=stagealign%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:stagealign.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">StageAlign</span></a>.<span style=\"color: #004993;\">TOP_LEFT</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">RESIZE</span>, setUpScreen<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> setUpScreen<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">removeEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">RESIZE</span>, setUpScreen<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">stage</span>.fullScreenWidth <span style=\"color: #000000; font-weight: bold;\">&gt;</span> <span style=\"color: #004993;\">stage</span>.fullScreenHeight<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      gameStageWidth = <span style=\"color: #004993;\">stage</span>.fullScreenWidth;</span>\r\n<span style=\"vertical-align: top;\">      gameStageHeight = <span style=\"color: #004993;\">stage</span>.fullScreenHeight;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">else</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      gameStageWidth = <span style=\"color: #004993;\">stage</span>.fullScreenHeight;</span>\r\n<span style=\"vertical-align: top;\">      gameStageHeight = <span style=\"color: #004993;\">stage</span>.fullScreenWidth;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">   rescaleRatio = gameStageWidth <span style=\"color: #000000; font-weight: bold;\">/</span> GAME_ORG_WIDTH;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//I use ratio to rescale every object, ie:</span></span>\r\n<span style=\"vertical-align: top;\">   hero.<span style=\"color: #004993;\">scaleX</span> = hero.<span style=\"color: #004993;\">scaleY</span> = rescaleRatio;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">For bitmap backgrounds which fill the whole screen you will need to crop some part of it (width or height) depending one a device screen size, unless your background has some repeating pattern or you want to break proportions (no - don't do that!). My backgrounds for game levels are not cropped actually. I resize them and if there are white borders I just use bitmapData's copy pixel method to fill them. I literary take the first column of a background image pixels to fill the left white gap and last column of pixels to cover the right gap. Similarly first row for top gap and last for bottom.</p>\r\n<p style=\"text-align: justify;\">Now when all your sprites and movie clips are resized, you are ready to convert them to bitmaps. I created a simple class with public static functions that takes as a parameter a reference to a movieclip, create a sprite container so that movieclips transformations like rotation or scaling are going to be preserved (they would be lost if I worked on display objects directly, unless I would use transformation matrix but this method is just simpler) and then go frame by frame to create bitmap data snapshots of each frame and save it to a vector typed for BitmapDatas.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> static <span style=\"color: #339966; font-weight: bold;\">function</span> MovieClipToBitmapData<span style=\"color: #000000;\">(</span>mc<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=movieclip%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:movieclip.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">MovieClip</span></a>, xscale<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">1</span>, </span>\r\n<span style=\"vertical-align: top;\">                                        yscale<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span>Vector.<span style=\"color: #000000; font-weight: bold;\">&lt;</span>BitmapData<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> bitmapDataVector<span style=\"color: #000000; font-weight: bold;\">:</span>Vector.<span style=\"color: #000000; font-weight: bold;\">&lt;</span>BitmapData<span style=\"color: #000000; font-weight: bold;\">&gt;</span> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> Vector.<span style=\"color: #000000; font-weight: bold;\">&lt;</span>BitmapData<span style=\"color: #000000; font-weight: bold;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   spriteContainer.<span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>mc<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//loop through each movie clip frame, </span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//rescale it if necessary and create bitmap snapshot</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">for</span> <span style=\"color: #000000;\">(</span><span style=\"color: #6699cc; font-weight: bold;\">var</span> i<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a> = <span style=\"color: #000000; font-weight: bold;\">1</span>; i <span style=\"color: #000000; font-weight: bold;\">&lt;</span>= mc.<span style=\"color: #004993;\">totalFrames</span>; i<span style=\"color: #000000; font-weight: bold;\">++</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> spriteContainer<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      mc.<span style=\"color: #004993;\">gotoAndStop</span><span style=\"color: #000000;\">(</span>i<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      mc.<span style=\"color: #004993;\">scaleX</span> = xscale;</span>\r\n<span style=\"vertical-align: top;\">      mc.<span style=\"color: #004993;\">scaleY</span> = yscale;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #6699cc; font-weight: bold;\">var</span> bd<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=bitmapdata%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bitmapdata.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">BitmapData</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=bitmapdata%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bitmapdata.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">BitmapData</span></a><span style=\"color: #000000;\">(</span>spriteContainer.<span style=\"color: #004993;\">width</span>, </span>\r\n<span style=\"vertical-align: top;\">                                  spriteContainer.<span style=\"color: #004993;\">height</span>, <span style=\"color: #0033ff; font-weight: bold;\">true</span>, 0x00000000<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      bd.<span style=\"color: #004993;\">draw</span><span style=\"color: #000000;\">(</span>spriteContainer<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      bitmapDataVector.<span style=\"color: #004993;\">push</span><span style=\"color: #000000;\">(</span>bd<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">   spriteContainer.<span style=\"color: #004993;\">removeChild</span><span style=\"color: #000000;\">(</span>mc<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">return</span> bitmapDataVector;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Then in your game you could use it like this:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//get bitmap data snapshots of enemy movieclip frames</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> enemy1Vector<span style=\"color: #000000; font-weight: bold;\">:</span>Vector.<span style=\"color: #000000; font-weight: bold;\">&lt;</span>BitmapData<span style=\"color: #000000; font-weight: bold;\">&gt;</span> = MovieClipToBitmapData<span style=\"color: #000000;\">(</span>mc<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=movieclip%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:movieclip.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">MovieClip</span></a><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> enemy1TotalFrames<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a> = enemy1Vector.<span style=\"color: #004993;\">length</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> enemy1Index<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> enemy1Bitmap<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=bitmap%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bitmap.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Bitmap</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=bitmap%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:bitmap.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Bitmap</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//create sprite container so the enemy will respond on mouse events</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> enemy1<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">enemy1.<span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>enemy1Bitmap<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//then later in the game</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ENTER_FRAME</span>, enterFrameHandler<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> enterFrameHandler<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>enemy1Index == enemy1TotalFrames<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">      enemy1Index = <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">else</span></span>\r\n<span style=\"vertical-align: top;\">      enemy1Index<span style=\"color: #000000; font-weight: bold;\">++</span>;</span>\r\n<span style=\"vertical-align: top;\">   enemy1Bitmap.<span style=\"color: #004993;\">bitmapData</span> = enemy1Vector<span style=\"color: #000000;\">[</span>enemy1Index<span style=\"color: #000000;\">]</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"text-align: justify;\">Of course if you have more enemies/objects, then you would probably need to create a global vector of bitmapData vectors.</div>\r\n<h3><br />TIP 3: Pause game when it is moved to background (when user switches to other app or receives a call)</h3>\r\n<p style=\"text-align: justify;\">This is (or should be) a feature of every action game. If your game doesn't pause when it is moved to the background, it may be rejected at submission process to AppStores which review apps. Just imagine what would happen if Jumping Droid wasn't going into pause mode when the game loses focus as a result of incoming call or because the user pressed the hardware Home button that brings to a phone desktop. If the user managed to get to one of the top floors in the game, he/she would need to start from the ground floor again when coming back to the game as the droid guy would fall on the lowest floor in the meantime. You would also still hear sounds from the game. But more importantly, running app would heavily use CPU, what would obviously have impact on other applications performance and overall energy consumption. To remedy this situation, just listen for the Event.ACTIVATE and Event.DEACTIVATE events and create function to pause and unpause your game.</p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/jumpingDroidPaused.jpg\" alt=\"Jumping Droid paused screen.\" /></p>\r\n<p style=\"text-align: justify;\">In Jumping Droid I left the users with option to pause when pressing the hardware Menu key on Android or the Menu screen button on iOS. At the pause state, the frame rate is dropped and I unregister the main ENTER_FRAME event handler so all animation and other related processes are stopped. If the game was moved to the background and is back to the foreground, the user sees the pause screen and options menu and can either continue the game or quit.</p>\r\n<p>Sample code below:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//somewhere in my init function </span></span>\r\n<span style=\"vertical-align: top;\">NativeApplication.nativeApplication.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.ACTIVATE, </span>\r\n<span style=\"vertical-align: top;\">                                      handleActivate, <span style=\"color: #0033ff; font-weight: bold;\">false</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #0033ff; font-weight: bold;\">true</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">NativeApplication.nativeApplication.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">DEACTIVATE</span>, </span>\r\n<span style=\"vertical-align: top;\">                                      handleDeactivate, <span style=\"color: #0033ff; font-weight: bold;\">false</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #0033ff; font-weight: bold;\">true</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> handleActivate<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//This code is executed when application gets back focus / goes to foreground</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//I do nothing here and leave it up to the user to press </span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//the \"back to game\" button in pause/options menu.</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> handleDeactivate<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//This code is executed when application looses focus / goes to background</span></span>\r\n<span style=\"vertical-align: top;\">   stopGame<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>; <span style=\"color: #009900;\">//this also changes frame rate to 10</span></span>\r\n<span style=\"vertical-align: top;\">   showPauseScreen<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">   showOptionsMenu<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Note that the NativeApplication events are working only in AIR (they aren't available in standard web Flash).</p>\r\n<p>&nbsp;</p>\r\n<h3>TIP 4: Make object's frames switching independent of current frame rate</h3>\r\n<p style=\"text-align: justify;\">I set Jumping Droid frame rate to be 100 fps. Of course that kind of speed is only achievable on desktop computers at the moment :) But the game works 60 fps on iPhone 3, 56 fps on Samsung Galaxy and 30 fps on HTC Desire, so as you can see I'm fully utilising all those devices. The problem is that normally that kind of dynamic frame rate would affect objects animations, in example if game was designed to work with 30 fps but runs with 60 fps, animation would be two times faster (when saying animation I mean switching frames of these objects). We don't want our objects to animate slower on some devices and faster on others. That would look ridiculous if enemy was moving slowly but its legs would suggest that it's actually running couple times faster. My aim was to animate all objects the same way on all devices.</p>\r\n<p style=\"text-align: justify;\">Animations of running enemies were created for 30 frames per second so this is going to be my base value. The code below switches bitmap's bitmap data only after specified amount of time, which is 1/30 s in my case, rather than every at enter-frame event:</p>\r\n<p style=\"text-align: justify;\">&nbsp;</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//define original game frame rate - this is a frame rate</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//for which you created original animation</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> static const GAME_ORG_FRAME_RATE<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">30</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> frameTime<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">1000</span> <span style=\"color: #000000; font-weight: bold;\">/</span> GAME_ORG_FRAME_RATE;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> _time<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> _elapsedAnimation<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> _animate<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Boolean</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//than later in your game in enterFrame handler</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #339966; font-weight: bold;\">function</span> animationMaker<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   _time = <span style=\"color: #004993;\">getTimer</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//animate only if 1/30s elapsed since last check</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_time <span style=\"color: #000000; font-weight: bold;\">-</span> _elapsedAnimation <span style=\"color: #000000; font-weight: bold;\">&gt;</span> frameTime<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      _elapsedAnimation = _time;</span>\r\n<span style=\"vertical-align: top;\">      _animate = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">else</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      _animate = <span style=\"color: #0033ff; font-weight: bold;\">false</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//this could be a for loop to animate more than one objects/enemies...</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_animate<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>enemy1BitmapFrameCounter == enemy1Vector.<span style=\"color: #004993;\">length</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">         enemy1BitmapFrameCounter = <span style=\"color: #000000; font-weight: bold;\">0</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">else</span></span>\r\n<span style=\"vertical-align: top;\">         enemy1BitmapFrameCounter<span style=\"color: #000000; font-weight: bold;\">++</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">      enemy1Bitmap.<span style=\"color: #004993;\">bitmapData</span> = enemy1Vector<span style=\"color: #000000;\">[</span>enemy1Index<span style=\"color: #000000;\">]</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h3>TIP 5: Make object's movement independent from current frame rate using time-based application</h3>\r\n<p style=\"text-align: justify;\">Same as with objects frame switching, we don't want our hero or enemies moving faster across the screen on some devices and slower on others. So we can't just use ENTER_FRAME event to control x and y of screen objects. Instead I'm using a technique called time-based animation. Using it, it doesn't matter what frame rate game is running, objects will move the same speed as their position is calculated based on how much time has passed since the last step. First I save current time, then at a next ENTER_FRAME or TIMER_UPDATE update I check current time and calculate a difference between them. The bigger the difference is, the bigger the distance that object will make.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//240 is calculated from 8 * 30 </span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//   where 8 is number of pixels I wanted an object to move</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//   when frame rate was 30</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> static const VELOCITY_ORG_HORIZONTAL<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">240</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> _lastTimeCheck<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000; font-weight: bold;\">0</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//then later I calculate the new speed depending on a screen size</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> velH<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = VELOCITY_ORG_HORIZONTAL <span style=\"color: #000000; font-weight: bold;\">*</span> rescaleRatio;</span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\"><span style=\"line-height: 21px;\">I recalculate the velocity to be slower on small screens and faster on bigger screens using my rescaleRatio variable from the tip #2. This way the game won't be easier for owners of bigger devices.</span></p>\r\n<p>&nbsp;</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ENTER_FRAME</span>, updateObjects<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//you could also use Timer and TimerEvent</span></span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> updateObjects<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #6699cc; font-weight: bold;\">var</span> timeDifference<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a> = <span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">getTimer</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">-</span> _lastTimeCheck<span style=\"color: #000000;\">)</span> <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000; font-weight: bold;\">0.001</span>;</span>\r\n<span style=\"vertical-align: top;\">   _lastTimeCheck <span style=\"color: #000000; font-weight: bold;\">+</span>= timeDifference;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//move my all objects, this could be a for loop</span></span>\r\n<span style=\"vertical-align: top;\">   hero.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">+</span>= velH <span style=\"color: #000000; font-weight: bold;\">*</span> timeDifference;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Now you can set your game fps in Flash to be even 100. If game will be running 20 fps, animation won't be that smooth as on faster phones but objects will move at the same speed as on device performing 80 fps.</p>\r\n<p>&nbsp;</p>\r\n<h3 style=\"line-height: 26px;\">TIP 6: Dynamically reduce frame rate when high frame rate is not necessary</h3>\r\n<p style=\"text-align: justify;\">Sure, game animation looks much better when running 60 frames per second. Everything looks smooth and objects movement isn't jittery. But the drawback is the fact that the high frame rate consumes more power. There is nothing wrong if the frame rate is high at the game play. But it is not necessary when the user paused the game or moved to one of the menu screens. You can then dynamically change the frame rate to 10 or even lower - as it is sufficient for buttons animation and will save battery.</p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/jumpingDroidDynamicFrameRate.png\" alt=\"Jumping Droid dynamic frame rate\" /></p>\r\n<p style=\"line-height: 26px;\">First I save the original frame rate value. I define 10 frames per second as a constant. Using both values I dynamically switch the frame rate depending on what state the game is currently in.</p>\r\n<div class=\"rj_insertcode\" style=\"line-height: 26px;\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//define low frame rate</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">public</span> static const LOW_FRAME_RATE<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">uint</span></a> = <span style=\"color: #000000; font-weight: bold;\">10</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//somewhere in my init function:</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//remember initial frame rate</span></span>\r\n<span style=\"vertical-align: top;\">initialFrameRate = <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">frameRate</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//somewhere in the code depending on the game's current state:</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">switch</span> <span style=\"color: #000000;\">(</span>gameState<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">case</span> STATE_PAUSE<span style=\"color: #000000; font-weight: bold;\">:</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//...some other stuff</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">frameRate</span> = LOW_FRAME_RATE;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">case</span> STATE_MENU<span style=\"color: #000000; font-weight: bold;\">:</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//...some other stuff</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">frameRate</span> = LOW_FRAME_RATE;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">case</span> STATE_PLAY<span style=\"color: #000000; font-weight: bold;\">:</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//...some other stuff</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">frameRate</span> = initialFrameRate;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">break</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p style=\"line-height: 26px;\">&nbsp;</p>\r\n<p style=\"text-align: justify;\"><span style=\"line-height: 21px;\">According to the documentation, the mobile versions of AIR (2.5) and Flash Player (10.1) have built - in functionality to drop the frame rate to 4 fps and skip rendering step when application goes to the background. This applies to a Flash Player content that loses focus, ie. if user scrolled a web page and Flash content is not visible anymore. You may be thinking why to 4 fps not zero? In Flash Player, instructions are only executed at frame change and that minimal frame rate allows to keep net streams and net or socket connections if they are created.</span></p>\r\n<div><span style=\"line-height: 26px;\"><span style=\"line-height: 21px;\">&nbsp;</span></span></div>\r\n<h3>TIP 7: Don't let users wait too long, split heavy tasks into chunks</h3>\r\n<p style=\"text-align: justify;\">Bitmap caching is a very expensive process, if your game has many levels with different backgrounds and you want to cache them all to bitmapDatas as a first thing after game is loaded, then don't do that. Jumping Droid has 20 levels and it takes about 10 - 15 seconds to cache all of the backgrounds on iPhone 3. I think that 15 seconds is enough time for the user to get bored or think that your game just hanged or crashed. So it is better to split this task into parts and do them separately. I cache every next-level bitmap just after the user completes a current level. The whole game stops, the droid guy says congratulations and after a second or two the game moves to the \"next level\" screen. I think that the user think this pause is actually intentional, just to give her/him some time to rest :) but in fact I'm just caching another bitmap (if it wasn't cached already)! Caching process is so heavy that your app may even freeze at that time of doing this (multithreading would be a great cure for that). Remember to store your bitmapData in a Vector and reuse it - one bitmapData can be used on many bitmap objects.</p>\r\n<p style=\"text-align: justify;\">You should also avoid creating (instantiating) objects at game-play, as this may result in frame drops, animation may become choppy. It is better to create all objects that may be used beforehand, when generating a new level, make them invisible and don't \"plug\" them to any listeners or functions that will change their x, y, rotation, listeners or other properties, until they are enabled. Then when you need them, just turn their visibility on.</p>\r\n<p style=\"text-align: justify;\">When launching your game on iPhone you can also use Default.png splash screen to have something on the screen (like you company logo or game image) when game is loading into memory. There is no such option for Android at the moment.</p>\r\n<p style=\"text-align: justify;\">If you game is big, you could actually split it into multiple swfs, package them together and load these external assets when necessary from your main \"shell\" file. Just remember that on iOS no ActionSctipt code will be executed from any external swf. To be more precise, if you try to load a swf with AS code or even a class assigned to some DisplayObject, the loading process will fail silently... But remember, you can still load graphic assets (they can have instance names), sound clips or videos and you can use your code from the main swf (loader) to work with these assets.</p>\r\n<p>&nbsp;</p>\r\n<h3>TIP 8: Allow users to install their apps on SD card (Android only)</h3>\r\n<p style=\"text-align: justify;\">I'm surprised that Adobe still haven't added any tick box to set that in Publish settings in the Flash Professional! Even Adobe evangelists never mention how to use this very important feature. Just look at the comments of most of the AIR for Android games or apps, the users mostly complain about lack of \"Move to SD\" option. While Motorola and Samsung phones have plenty of internal memory, HTC Desire, still very popular Android 2.2 phone, has very limited space. If the users installed Adobe AIR (17 MB) and Adobe Flash (12 MB) that can't be moved to SD for obvious reasons (if they were on SD and SD was removed or device was plugged as a disk drive then these both wouldn't be available along with all apps that require them), they won't be happy to keep other apps on their internal memory if they are running out of space. But there is nothing stopping you to make your app movable to SD. Remember, if the user is struggling with \"out of space\" messages, she/he will move your app to SD rather than remove it.</p>\r\n<p style=\"text-align: justify;\">Read this article to learn more: <span style=\"line-height: 26px;\"><a href=\"list-of-tips/78-how-to-make-air-for-android-app-movable-to-sd-card.html\" target=\"_blank\">http://sierakowski.eu/list-of-tips/78-how-to-make-air-for-android-app-movable-to-sd-card.html</a>.</span></p>\r\n<p><span style=\"line-height: 26px;\">&nbsp;</span></p>\r\n<h3>TIP 9: TextFields and objects receiving mouse events are slowing down performance</h3>\r\n<p style=\"text-align: justify;\">Especially when used in GPU mode. TextFields are like vectors, it seems like they are recalculated at every frame if something overlaps them or if they overlap something else, especially animated objects. I tried to embed fonts, used native font and always their existence had some impact on performance. What I did and what other developers do is create bitmaps of each character or digit that might be used. In case of Jumping Droid, I have the current score and the high score fields, which include digits and 4 letters HI and SC. I convert sprites with text fields containing all possible values to bitmaps and then get rid of all text fields. It is a little bit of work, but as a result, performance is exactly the same as if I would add few more bitmaps, there are no vectors on the stage.</p>\r\n<p style=\"text-align: justify;\">Situation complicates when you want to have some input text fields, but just one or few fields will not totally kill your game's performance.</p>\r\n<p style=\"text-align: justify;\">I recently found that TextFields don't have that negative impact in AIR 2.7 when using CPU mode.</p>\r\n<p style=\"text-align: justify;\">If you have objects that aren't reacting on MouseEvents, you should disable them as the FlashPlayer is still bubling events through them \"thinking\" they may receive this events what obviously have impact on performance:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #004993;\">mouseEnabled</span> = <span style=\"color: #0033ff; font-weight: bold;\">false</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #004993;\">mouseChildren</span> = <span style=\"color: #0033ff; font-weight: bold;\">false</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3>TIP 10: Control your memory and use garbage collector</h3>\r\n<p style=\"text-align: justify;\">When testing your game on actual device, it is good to use some tool that shows memory usage and fps. Some people use the standard AIR debugger and trace these values, others third party solutions like Monster Debugger. Or you can just display this information on screen. I initially used MrDoobs <a href=\"https://github.com/mrdoob/Hi-ReS-Stats\" target=\"_blank\">Hi-ReS-Stats</a>but quickly adjusted (simplified) it to meet my needs. Using this performance monitor, I learned what has impact on fps, why it was dropping sometimes and realised that from time to time game kept too many objects in memory:</p>\r\n<p style=\"text-align: center;\"><img src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/performanceMonitor.jpg\" alt=\"Jumping Droid paused screen.\" /></p>\r\n<p style=\"text-align: justify;\">In my version of performance monitor, I display the minimum, current and maximum memory used and a current frame rate (if you want to check it in JumpingDroid, go to the main screen, then to the about screen and press the \"turn fps info on\" button). When testing the game I found that some objects from previous levels still occupied memory. Generally garbage collector removes all unused objects when there is some spare time between rendering frames (if game isn't too busy). If there are many calculations, like if there are many objects on the screen and you have some heavy collision detection algorithm, it should not fire up. But sometimes it does and you can see it in some frame drops. What I do is manually call garbage collector when a level is finished at the congratulations screen - there is no animation at that time, so the user won't notice any slow down.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #004993;\">flash.system</span>.<a href=\"http://www.google.com/search?q=system%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:system.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">System</span></a>.gc<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Generally the best practise is to do not create and remove the same objects at every level but rather reuse them (ie by using object pools). But if there are different objects used on each level then it is fine to \"collect garbage\" like unnecessary enemies etc.</p>\r\n<p>&nbsp;</p>\r\n<h3>TIP 11: Keep game awake</h3>\r\n<p style=\"text-align: justify;\">Or I should rather say prevent the system from dropping into an idle mode. This one is important as if you forget to make your game be constantly awake, device's screen will just dim off (turn black) when there is some inactivity time. This will happen when the user don't tap screen or hardware keys for some time. This time is obviously different depending on OS or user settings. Tilting device when using accelerometer is not counted as activity.</p>\r\n<p>To prevent screen from dimming and keyboard from being locked use the following code:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">On Android version, add the following permission to the application descriptor file:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>uses<span style=\"color: #000000; font-weight: bold;\">-</span>permission android<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #004993;\">name</span>=<span style=\"color: #990000;\">\"android.permission.DISABLE_KEYGUARD\"</span><span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>uses<span style=\"color: #000000; font-weight: bold;\">-</span>permission android<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #004993;\">name</span>=<span style=\"color: #990000;\">\"android.permission.WAKE_LOCK\"</span><span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h3>TIP 12: Save game state</h3>\r\n<p style=\"text-align: justify;\">Imagine user's frustration if just after winning some battle or getting almost to the end of a level, an incoming call quit the game. This is no brainer - game state has to be saved. You can use the DEACTIVATE event from the tip #3 to call function saving game settings and progress. But it is also a good practice to save them also when something important happens like beating some difficult monster or just do auto save every minute as there might be some extraordinary situation when phone hangs or resets without event notifying running apps (and you won't receive DEACTIVATE event).</p>\r\n<p style=\"text-align: justify;\">There are few good ways of saving your state and you can chose one depending on how much data you want to save. You can use old good Shared Object aka flash cookies, you can save to a file (AIR can do that), you can use built-in into AIR SQLLite or even send data to a remote server.</p>\r\n<p style=\"text-align: justify;\">In Jumping Droid I decided to only save the high score. This is very low amount of data so Shared Objects seemed to be the best choice:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> _so<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sharedobject%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sharedobject.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">SharedObject</span></a>;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//in your init function</span></span>\r\n<span style=\"vertical-align: top;\">_so = <a href=\"http://www.google.com/search?q=sharedobject%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sharedobject.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">SharedObject</span></a>.<span style=\"color: #004993;\">getLocal</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\"JumpingAndroid/scores\"</span>, <span style=\"color: #990000;\">\"/\"</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_so.<span style=\"color: #004993;\">data</span>.highScore == <span style=\"color: #0033ff; font-weight: bold;\">undefined</span><span style=\"color: #000000;\">)</span> _lastHighScore = _so.<span style=\"color: #004993;\">data</span>.highScore;</span>\r\n \r\n<span style=\"vertical-align: top;\"><span style=\"color: #009900;\">//and later on game over:</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>_highScore <span style=\"color: #000000; font-weight: bold;\">&gt;</span> _lastHighScore<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">  _so.<span style=\"color: #004993;\">data</span>.highScore = _lastHighScore = _highScore;</span>\r\n<span style=\"vertical-align: top;\">  _so.<span style=\"color: #004993;\">flush</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">On Android version add this permission to the application descriptor file:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>uses<span style=\"color: #000000; font-weight: bold;\">-</span>permission android<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #004993;\">name</span>=<span style=\"color: #990000;\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span><span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h3>TIP 13: Terminate or quit when exiting?</h3>\r\n<p style=\"text-align: justify;\">On iOS you can't make application quit programmaitically. Only the user may do that by pressing the hardware Home button what would result in suspending or quitting the application.</p>\r\n<p style=\"text-align: justify;\">On Android if the user presses hardware Home or Back button it will bring her/him to the Android home screen and application will be suspended. Then when the user comes back to the app (if the device wasn't restarted or app wasn't killed from programs like Advanced Task Killer or Android settings panel) it continues from where it was quit.</p>\r\n<p style=\"text-align: justify;\">So on both systems you can either quit your game or suspend it (by default they are suspended).</p>\r\n<p style=\"text-align: justify;\">To quit on iOS, add UIApplicationExitsOnSuspend to the iPhone InfoAddition section of you application descriptor file:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>iPhone<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>InfoAdditions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000; font-weight: bold;\">&lt;!</span><span style=\"color: #000000;\">[</span>CDATA<span style=\"color: #000000;\">[</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;</span>UIApplicationExitsOnSuspend<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;&lt;</span>string<span style=\"color: #000000; font-weight: bold;\">&gt;</span>YES<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>string<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>InfoAdditions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;/</span>iPhone<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">To quit on Android, use exit() method of nativeApplication property of NativeApplication class in your game code:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">NativeApplication.nativeApplication.exit<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">You should add this code to your DEACTIVATE event handler from tip #1 and you can also create a quit button and add this code to a Click handler.</p>\r\n<h3>TIP 14: Use subversioning to save yourself hassle</h3>\r\n<p style=\"text-align: justify;\">I can't even remember how many times something didn't work in the game the way I wanted or the performance wasn't good enough and I had to come back to a version from two weeks before. Not to mention that something corrupted in the FLA file and I had to revert back to last stable version. Really I can't imagine working on bigger projects without Subversioning. Since Flash CS5 you can save uncompressed FLA files which are just folders with xml files containing information of each library object and settings. So now I'm not only subversion ActionScript files but also FLAs. There are many tutorials on internet explaining how to use Git or SVN so if you haven't use them yet - ow is the best time to start :) (I'm thinking of making some quick tutorial on using SVN with Flash soon).</p>\r\n<h3>TIP15: Use Remote Debugging over WiFi to see traces from your app running on a device</h3>\r\n<p style=\"text-align: justify;\">Making your app sending traces remotely to your computer is very easy and will help you finding any problems that couldn't be detected when testing on your computer. There are three things that are involved to accompilish this:</p>\r\n<p>1. You need to publish your swf including the debug code from Flash IDE<br /> In Flash CS5 and CS5.5 go to Publish Settings, Flash tab and check Permit Debugging in Advanced section.</p>\r\n<p>2. You need to use adt tool with -target ipa-debug<br /> You can also predefine IP address of your debugging computer instead of typing it manually at application launch on a device: adt -package -target ipa-debug -connect 192.168.1.4</p>\r\n<p>3. Your device and computer must be in the same wifi network and you computer's firewall should allow TCP traffic on port 7935. To start debugging session in Flash IDE select Debug -&gt; \"Begin Remote Debug Session\" -&gt; ActionScript 3.0</p>\r\n<p style=\"text-align: justify;\">Rember to start debugging in Flash IDE before launching your app on a device, otherwise you will be asked to provide IP of the computer even if you provided -connect parameter to adt. If everything is done right you should see traces from your app running from you phone or tablet in the Flash output panel as if it was running on your computer!</p>\r\n<p>&nbsp;</p>\r\n<h3 style=\"line-height: 26px;\">TIP16: Test how much CPU your app is using on actual devices</h3>\r\n<p style=\"text-align: justify;\">I don't know how to do that on iOS but it is very easy on Android with android-sdk. All you need to do is plug your Android device to a computer in Debug mode. You do that on your phone or tablet by going to Settings -&gt; Applications -&gt; Development and selecting \"USB debugging\". Then on your computer open command prompt (cmd), go to you Android SDK folder, platform-tools folder and run this command:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">adb shell <span style=\"color: #004993;\">top</span> <span style=\"color: #000000; font-weight: bold;\">-</span>m <span style=\"color: #000000; font-weight: bold;\">5</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">The -m 5 you define that you are going to see first top 5 processes sorted by CPU usage. When running this command you should see a list of processes refreshed every coumple of seconds:</p>\r\n<p><img src=\"http://sierakowski.eu/examples/jumpingDroidOptimization/cpuandroid.jpg\" alt=\"cpu android\" /></p>\r\n<p>&nbsp;</p>\r\n<h3 style=\"line-height: 26px;\">TIP17: Use Native Extensions to get extra functionality not built into AIR</h3>\r\n<p style=\"text-align: justify;\">There is plenty of documentation on how to use Native Extensions in Flash Builder or in the latest version of Flash Professional CS6. I normally use Flash Builder but I developed Jumping Droid in Flash Professional CS5.5 so I will share here how I added the vibration support to the game.</p>\r\n<p>1. Download Vibration extension from the Native Extensions catalogue on Adobe website: <a href=\"http://www.adobe.com/devnet/air/native-extensions-for-air/extensions/vibration.html\">http://www.adobe.com/devnet/air/native-extensions-for-air/extensions/vibration.html</a></p>\r\n<p>2. Unzip archive and get the swc and ane files from the ReadyToUseExtenstion folder.</p>\r\n<p>3. In Flash IDE, open ActionScript settings and in Library path add a new SWC file by browsing to VibrationActionScriptLibrary.swc. After that keeping the swc selected click on the \"i\" icon what opens the \"Library Path Item Options\". Make sure the \"Link Type\" is set to External.</p>\r\n<p>4. Now in your code first import the Vibration class:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">import</span> com.adobe.nativeExtensions.Vibration;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>5. And then add the code to check if device allows Vibration and run it:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #6699cc; font-weight: bold;\">var</span> vibe<span style=\"color: #000000; font-weight: bold;\">:</span>Vibrator;</span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #0033ff; font-weight: bold;\">if</span><span style=\"color: #000000;\">(</span>Vibration.isSupported<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">     vibe = <span style=\"color: #0033ff; font-weight: bold;\">new</span> Vibration<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">     vibe.vibrate<span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">500</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>6. When you compile your swf you should get an error message that extension isn't supported on this platform which is fine.</p>\r\n<p>7. In your application descriptor add the extension as below:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>extensions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>extensionID<span style=\"color: #000000; font-weight: bold;\">&gt;</span>com.adobe.Vibration<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>extensionID<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;/</span>extensions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>8. And then also request permission for vibration:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;!</span><span style=\"color: #000000;\">[</span>CDATA<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">&lt;</span>manifest<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>uses<span style=\"color: #000000; font-weight: bold;\">-</span>permission android<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #004993;\">name</span>=<span style=\"color: #990000;\">\"android.permission.VIBRATE\"</span><span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;/</span>manifest<span style=\"color: #000000; font-weight: bold;\">&gt;</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>9. Now create the \"extensions\" folder in the same place where you keep your swf, descriptor and icons and place the com.adobe.extensions.Vibration.ane file in there.</p>\r\n<p>10. Add below to your batch script that you use to publish your AIR app with ADT. This will include the ane file as a native extension.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">-</span>extdir extensions</span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h3>FINAL TIP: Share your experience with others on forums! Only this way we can learn from each other and improve our apps.</h3>\r\n<p style=\"text-align: justify;\">If you have different experience with any of the things in this article, please share it with us through the comments!</p>\r\n<p>â€‹</p>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#38</a> <span class=\"comment-author\">Sun</span> <span class=\"comment-date\">2014-03-17 06:00</span>\r\n<div id=\"comment-body-199\" class=\"comment-body\">I have a question about the tip#2.<br />So why did you convert everything(imag es?) from movieclip to bitmap?<br />what about sprite? do you convert sprite types to bitmap as well? <br /><br />Thanks in advance!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#37</a> <span class=\"comment-author\">Wade</span> <span class=\"comment-date\">2013-12-02 22:28</span>\r\n<div id=\"comment-body-195\" class=\"comment-body\">I had thought about the tip for using ACTIVATE and DEACTIVATE for knowing when my app was interrupted by a phone call, but there is 1 flaw in relying on those two events. If the user is using a headset to talk and switches back to the app in the middle of the call, you could be attempting to resume audio playback on top of the phone call audio. I have been doing endless searches of a way to pause audio in my Audiobook Player app I am making(since AIR mutes all audio during an incoming phone call and while on a call) and it looks like I will have to just make an ANE using native Android Java code to detect phone call states. I also tried checking the SoundMixer.soundTransform.volume during an ongoing phone call to see if it changed to \"0\" and hoped that was how AIR was \"muting\" audio, but that was not the case.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#36</a> <span class=\"comment-author\">xiaoMa</span> <span class=\"comment-date\">2013-11-14 07:15</span>\r\n<div id=\"comment-body-193\" class=\"comment-body\"><span class=\"quote\">Quoting Marcos:</span>\r\n<blockquote>Hi... Im working in an AIR project for Android. I did step by step everything you say in this post but I still cannot make the phone vibrate. I have an error when I try to debug directly to device:<br />\"An implementation for native extension 'com.adobe.Vibration' required by the application was not found for the target platform'<br /><br />I dont know exactly what it means... can you help me??<br /><br />(Sorry about my english)...<br /><br />Regards...</blockquote>\r\n<br />ANE path is wrong</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#35</a> <span class=\"comment-author\">Germ&aacute;n</span> <span class=\"comment-date\">2013-07-03 16:23</span>\r\n<div id=\"comment-body-185\" class=\"comment-body\">Thanks!<br /><br />In case of using a set of images for popular resolutions and then scale them.<br /><br />Do you know if the usual practice is to embed all of these sets, even if just only one of them is used? Is there an efficient way to do it? <br /><br />Regards<br /><br /><span class=\"quote\">Quoting sigman:</span>\r\n<blockquote>Hi German,<br /><br />Yes, every asset is vector. Android animation is actually a vector movie clip and in AS code I go through each frame, resize it and take bitmap snapshots of resized frames.<br /><br />Good luck.<br /><br /><span class=\"quote\">Quoting Germ&aacute;n:</span>\r\n<blockquote>Hi,<br /><br />Great article, just one question. I didn't quite understood if you use vectors even for your animations (i.e. little droid in game), resized them dynamically and the converted them to bitmap. Or if these animations were already sprite sheets in bitmap format and you scale them dinamically loosing some quality? Thanks</blockquote>\r\n</blockquote>\r\n</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#34</a> <span class=\"comment-author\">sigman</span> <span class=\"comment-date\">2013-07-01 19:30</span>\r\n<div id=\"comment-body-184\" class=\"comment-body\">Hi German,<br /><br />Yes, every asset is vector. Android animation is actually a vector movie clip and in AS code I go through each frame, resize it and take bitmap snapshots of resized frames.<br /><br />Good luck.<br /><br /><span class=\"quote\">Quoting Germ&aacute;n:</span>\r\n<blockquote>Hi,<br /><br />Great article, just one question. I didn't quite understood if you use vectors even for your animations (i.e. little droid in game), resized them dynamically and the converted them to bitmap. Or if these animations were already sprite sheets in bitmap format and you scale them dinamically loosing some quality? Thanks</blockquote>\r\n</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#33</a> <span class=\"comment-author\">Germ&aacute;n</span> <span class=\"comment-date\">2013-07-01 17:11</span>\r\n<div id=\"comment-body-183\" class=\"comment-body\">Hi,<br /><br />Great article, just one question. I didn't quite understood if you use vectors even for your animations (i.e. little droid in game), resized them dynamically and the converted them to bitmap. Or if these animations were already sprite sheets in bitmap format and you scale them dinamically loosing some quality? Thanks</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#32</a> <span class=\"comment-author\">YopSolo</span> <span class=\"comment-date\">2013-04-22 12:13</span>\r\n<div id=\"comment-body-179\" class=\"comment-body\">great tip collection !</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#31</a> <span class=\"comment-author\">Horacio</span> <span class=\"comment-date\">2013-02-19 00:31</span>\r\n<div id=\"comment-body-174\" class=\"comment-body\">I just learned the hard way most of this making my first android app, didn&acute;t take me too long but things that I didn&acute;t know will make me do it more easy, great article!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+2</span> </span> </span> <a class=\"comment-anchor\">#30</a> <span class=\"comment-author\">Marcos</span> <span class=\"comment-date\">2013-02-12 00:18</span>\r\n<div id=\"comment-body-173\" class=\"comment-body\">Hi... Im working in an AIR project for Android. I did step by step everything you say in this post but I still cannot make the phone vibrate. I have an error when I try to debug directly to device:<br />\"An implementation for native extension 'com.adobe.Vibration' required by the application was not found for the target platform'<br /><br />I dont know exactly what it means... can you help me??<br /><br />(Sorry about my english)...<br /><br />Regards...</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#29</a> <span class=\"comment-author\">Sean P Smith</span> <span class=\"comment-date\">2013-01-24 22:38</span>\r\n<div id=\"comment-body-169\" class=\"comment-body\">Just FYI for anyone trying to get the vibration working, and Sierakowski, there is an error in the code, when you init the var vibe you type it as vibrator and then create a new instance of Vibration(). It should just be var vibe:Vibration... that was the least of my troubles getting that to work. Anyone trying to use ADT for the first time, make sure to put all your paths (full paths to your files) in quotes... whew!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#28</a> <span class=\"comment-author\">Rotem</span> <span class=\"comment-date\">2013-01-15 09:12</span>\r\n<div id=\"comment-body-164\" class=\"comment-body\">Interesting post.<br />About tip #2 (well.. and the final one) - we created library which does exactly that. It allow converting vector images into bitmaps. To keep better GPU performances, it pack the bitmaps into big atlas bitmap which contact multiple images. After generating the bitmaps they can be stored so the next time the app is loaded no converting is needed.<br />Last - It also keep the object tree hierarchy.<br />http://www.xtdstudios.com/dmt.html</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#27</a> <span class=\"comment-author\">Sean Smith</span> <span class=\"comment-date\">2012-09-14 20:12</span>\r\n<div id=\"comment-body-142\" class=\"comment-body\">Thank you sooooo #%&amp;$@ing much for posting this. for taking the time to write all that out and help us out with the code. I'm interested in the gamestate switch function you created, did you write a game state checker function or something or just a global variable that changes when it gets paused or something? I'm having trouble wrapping my mind around creating a timed framerate and game state function... thanks again, you are too smart!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#26</a> <span class=\"comment-author\">Craij</span> <span class=\"comment-date\">2012-07-09 17:03</span>\r\n<div id=\"comment-body-136\" class=\"comment-body\">Excellent tips. Great guide for in-coming AIR game developers. Personally, I am following atleast 3 of these tips! <img src=\"http://sierakowski.eu/legacy/jcomments/smiles/laugh.gif\" alt=\":D\" border=\"0\" /> Thanks for doing this.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#25</a> <span class=\"comment-author\">susrut</span> <span class=\"comment-date\">2012-06-14 05:40</span>\r\n<div id=\"comment-body-131\" class=\"comment-body\">Awesome stuff. Thanks for sharing. You rock!!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#24</a> <span class=\"comment-author\">albin</span> <span class=\"comment-date\">2012-06-03 13:40</span>\r\n<div id=\"comment-body-130\" class=\"comment-body\">UIApplicationEx itsOnSuspendYES <br /><br />now should be changed to <br /><br /> UIApplicationEx itsOnSuspend</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#23</a> <span class=\"comment-author\">Steve</span> <span class=\"comment-date\">2012-05-29 22:04</span>\r\n<div id=\"comment-body-129\" class=\"comment-body\">I notice on a HTC one, the standard phone toolbar is still there when the game loads up. It displays notifications, the 3G status, the time and so on?<br />Is it possible to remove this as it it taking up screen real estate.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#22</a> <span class=\"comment-author\">Curtis</span> <span class=\"comment-date\">2012-03-15 05:11</span>\r\n<div id=\"comment-body-125\" class=\"comment-body\">Every paragraph was an \"ah-ha\" for me. Extremely clear, well-written piece with super-excellent code samples. Thanks for all the work you put into this.<br /><br />I had no idea Air could save data to local files on devices.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#21</a> <span class=\"comment-author\">sigman</span> <span class=\"comment-date\">2012-03-06 20:38</span>\r\n<div id=\"comment-body-123\" class=\"comment-body\">@Andrius, You can build to methods: pause and unpause. In pause, that \"un-hooks\" the methods that drives a game (unhooking could be some boolean or just removeEventList ener), I memorise current getTimer() to the gamePauseTime variable. Then in unpause method I use it to calculate proper time: _time = getTimer() - gamePauseTime.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#20</a> <span class=\"comment-author\">Andrius</span> <span class=\"comment-date\">2012-03-05 20:47</span>\r\n<div id=\"comment-body-122\" class=\"comment-body\">Hey, thanks allot for this article it is amazing, I learnt allot from it. But I have one question about tip number 5. How can I pause the game, that means pause every moving objects, and then return to it where I left using getTimer() function? getTimer() function doesn't have an ability to be paused, so how did you managed to pause jumping robot game?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#19</a> <span class=\"comment-author\">Fabio</span> <span class=\"comment-date\">2012-02-21 10:22</span>\r\n<div id=\"comment-body-121\" class=\"comment-body\">Great article! <br />Thank you</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#18</a> <span class=\"comment-author\">wojciech</span> <span class=\"comment-date\">2012-02-15 22:40</span>\r\n<div id=\"comment-body-120\" class=\"comment-body\">@Fernando, from my experience saved SO stays when you are upgrading your app. Maybe you are uninstalling and installing again rather than upgrading?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#17</a> <span class=\"comment-author\">Fernando</span> <span class=\"comment-date\">2012-02-13 23:48</span>\r\n<div id=\"comment-body-118\" class=\"comment-body\">Hi, congratz for the nice article. Very informative. I'am trying to save an highscore with sharedobject, but when i update de app in the device, the data stored in the SO goes away. Do you know how to avoid this? Btw I didnt test this deploying in the market, but i think that the behaviour will be the same.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#16</a> <span class=\"comment-author\">Qusai87</span> <span class=\"comment-date\">2011-12-22 12:12</span>\r\n<div id=\"comment-body-111\" class=\"comment-body\">Thaaaaaaanks Man , it's really amazing article , it worths every word on it <img src=\"http://sierakowski.eu/legacy/jcomments/smiles/smile.gif\" alt=\":-)\" border=\"0\" /></div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#15</a> <span class=\"comment-author\">landon</span> <span class=\"comment-date\">2011-08-18 03:46</span>\r\n<div id=\"comment-body-89\" class=\"comment-body\">great post. very informative</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#14</a> <span class=\"comment-author\">Michael</span> <span class=\"comment-date\">2011-08-04 07:58</span>\r\n<div id=\"comment-body-84\" class=\"comment-body\">Thanks a lot for sharing. I am learning new things each day about optimizing Air content for mobile, your tips are a good help. Do you have any tips regarding when to use CPU/GPU? I thought GPU mode was best most of the time, but my current app (with some fading boxes) improved a lot after switching to GPU mode!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#13</a> <span class=\"comment-author\">woj</span> <span class=\"comment-date\">2011-07-10 19:00</span>\r\n<div id=\"comment-body-80\" class=\"comment-body\"><span class=\"quote\">Quoting Booliam:</span>\r\n<blockquote>(...)<br />So my tip is: If you can split required CPU-heavy work into several parts try to do only a bit of it each frame. In theory the user won't notice that the loading happens in the background. You can also use this to make a \"loading\" screen that doesn't freeze the app.</blockquote>\r\n<br />Interesting idea. The only difficult thing would be to make sure that the tasks invoked at this while loop will not extend it too much. But yes, this is what I'm doing in my current projects as well - splitting list of tasks into parts and invoke them at different frames. As you said this will ensure that app/game will not freeze for long time</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#12</a> <span class=\"comment-author\">woj</span> <span class=\"comment-date\">2011-07-10 18:50</span>\r\n<div id=\"comment-body-79\" class=\"comment-body\"><span class=\"quote\">Quoting smorrow:</span>\r\n<blockquote>Nice Article - very helpful...<br />In tip 3 : I think you meant<br />\"if (enemy1Index == enemy1TotalFrames)\"<br />instead of <br />\"if (enemy1Index == enemy1Index )\"<br />Thanks for your help!<br />:)</blockquote>\r\n<br />Thanks, now it's fixed :)</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#11</a> <span class=\"comment-author\">Alexandre Colella</span> <span class=\"comment-date\">2011-07-02 22:05</span>\r\n<div id=\"comment-body-76\" class=\"comment-body\">Man! Thanks a lot!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#10</a> <span class=\"comment-author\">Booliam</span> <span class=\"comment-date\">2011-06-16 01:55</span>\r\n<div id=\"comment-body-75\" class=\"comment-body\">What I wanted to say was in regards of your tip #6. In my tournament app there may be a lot of data to load on start so I solved that by putting a while loop inside a function that's called each frame. The while loop is allowed to continue looping as long as not X milliseconds has passed, where X is the expected amount of milliseconds between each frame. At each loop one tournament round is loaded.<br /><br />So my tip is: If you can split required CPU-heavy work into several parts try to do only a bit of it each frame. In theory the user won't notice that the loading happens in the background. You can also use this to make a \"loading\" screen that doesn't freeze the app.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#9</a> <span class=\"comment-author\">Booliam</span> <span class=\"comment-date\">2011-06-16 01:53</span>\r\n<div id=\"comment-body-74\" class=\"comment-body\">Interesting read, I've just started making a few apps for Android using AIR and has discovered the importance of optimizing.<br /><br />The first app was a game I made (just to test) called \"Tefris\" and at the time of development I didn't have a phone to run it on! Of course it had full 30 fps on the desktop but when I got a phone I discovered its true sometimes horrible low fps. The game has much physics calculations but I believe the rendering caused a lot of the framedrop. A valuable lesson, I still haven't done any optimization to it yet since I wanted to move on to new projects but I will eventually.<br /><br />The second (and latest app) is a tool called \"Magic Tournament Wizard\". I built it to only load what's needed in order to make it faster, and it saves its state at every change so if a call arrives it can just quit itself. It can still be optimized a lot better though, but I'm getting the hang of it.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#8</a> <span class=\"comment-author\">smorrow</span> <span class=\"comment-date\">2011-06-15 00:38</span>\r\n<div id=\"comment-body-73\" class=\"comment-body\">Nice Article - very helpful...<br />In tip 3 : I think you meant<br />\"if (enemy1Index == enemy1TotalFrames)\"<br />instead of <br />\"if (enemy1Index == enemy1Index )\"<br />Thanks for your help!<br />:)</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#7</a> <span class=\"comment-author\">Robert Winberry</span> <span class=\"comment-date\">2011-06-10 15:34</span>\r\n<div id=\"comment-body-72\" class=\"comment-body\">Great blog..thanks for sharing all the info and speaking of info, would you happen to know how to access the hard keys on a smartphone (droid x) via AS3 Flash CS5..thanks</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#6</a> <span class=\"comment-author\">Scott Southworth</span> <span class=\"comment-date\">2011-06-09 16:13</span>\r\n<div id=\"comment-body-71\" class=\"comment-body\">Hi, great articles thanks! One question:<br />When I try ripping movieclips into bitmap sprite sheets -- the AIR quality LOW setting seems to be making them look quite crappy... How did you manage to maintain quality images with antialiasing and scaling carried over to the bitmaps?<br /><br />Thanks!<br />Scott</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#5</a> <span class=\"comment-author\">woj</span> <span class=\"comment-date\">2011-06-08 10:14</span>\r\n<div id=\"comment-body-70\" class=\"comment-body\">@sebastian, thanks for comment. I haven't finished this article yet so you can expect more to come :) Just to quickly answer some of your questions. Of course the GPU mode is the only one to use at the moment if you want good performance and many animated objects on screen. I used standard hitTestPoint detection what didn't have big impact on the game performance. Tip 3 covers what I did to scale graphics. Game was too simple to use any framework like Flixel so I haven't used any. I packaged game with iPhone packager and AIR 2.5 initially and then with AIR 2.6 and haven't seen significant performance differences / improvements to be honest.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#4</a> <span class=\"comment-author\">Sebastian U</span> <span class=\"comment-date\">2011-06-06 15:35</span>\r\n<div id=\"comment-body-69\" class=\"comment-body\">Hi, Congrats for your game!, regarding this post I think the tittle is confusing though, I'd love to read about your performance optimizations techniques but this tips aren't it, I mean you don't talk about how did you do to get your app running at 60 fps to begin with, did you use GPU/CPU?, object pooling?, avoid collision functions and such?, scaled graphics? some game framework like flixel or your own functions? limit sprites on screen? packager used? rendering technique?.<br />If you could share this kind of info it would be really useful, thank you!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#3</a> <span class=\"comment-author\">Tadeu</span> <span class=\"comment-date\">2011-06-02 15:28</span>\r\n<div id=\"comment-body-68\" class=\"comment-body\">Very good article ! thanks !</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">Natalie</span> <span class=\"comment-date\">2011-06-01 20:50</span>\r\n<div id=\"comment-body-66\" class=\"comment-body\">these tips are time savers! Thanks for sharing and I love your game.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-good\">+1</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">Joachim</span> <span class=\"comment-date\">2011-05-29 14:39</span>\r\n<div id=\"comment-body-65\" class=\"comment-body\">Great tips. Now waiting for others!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 42912,
    "publishedDate": {
        "$date": "2011-05-22T23:00:00.000+0000"
    },
    "slug": "building-mobile-games-in-adobe-air-techniques-used-in-jumping-droid",
    "state": "published",
    "tags": [{
        "$oid": "55b0a7277f9371ddc46ba0f8"
    }, {
        "$oid": "55ae65e269291600761cdc3a"
    }],
    "title": "Building mobile games in Adobe AIR - techniques used in Jumping Droid"
} {
    "_id": {
        "$oid": "55b0aafe8fb1260489f30516"
    },
    "__v": 1,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc33"
    }],
    "content": {
        "brief": "<p style=\"text-align: justify;\">Nearly half year after I published a quick tutorial on how to set everything up to build AIR apps for Android, I find it pretty much outdated... At that time Flash developers could export their projects for Android using AIR 2.5 and for iOS using PFI (Packager for iPhone) which had functionalities matching AIR 2.0. On March 2011 Adobe have released AIR 2.6, which brings plenty of new features to Android but more importantly it brings them to iOS as well. In this article I will go through steps to create and publish your first simple app for both devices - Android and iPhone using Flash Professional CS5 and AIR 2.6.</p>",
        "extendedHTML": "<div class=\"recycle\">Article imported from <em>http://sierakowski.eu/list-of-tips/82-starting-with-air-for-android-and-ios-building-one-app-for-both-platforms.html</em></div>\r\n<p style=\"text-align: justify;\">By the way, if you are curious why only now Adobe have allowed developers to use the same features for iOS as for Android and what's new in AIR 2.6, follow these links:<span style=\"line-height: 26px;\"><a href=\"http://www.adobe.com/devnet/air/articles/ios_features_in_air26.html\" target=\"_blank\">http://www.adobe.com/devnet/air/articles/ios_features_in_air26.html</a> and</span> <a href=\"http://www.adobe.com/devnet/air/articles/whats-new-in-air-26.html\" target=\"_blank\">http://www.adobe.com/devnet/air/articles/whats-new-in-air-26.html</a></p>\r\n<h3><br />Before we start</h3>\r\n<p style=\"text-align: justify;\">First I want to also explain why I'm going to use command line tool that comes with AIR called ADT (AIR Developer Tool) to publish apps rather than UI which is available in the Flash Professional CS5 IDE. When installing \"fresh\" Flash CS5, there is only option to create AIR apps (for desktops) or iPhone apps through PFI. But later Adobe provided the \"AIR for Android\" extension that could be downloaded here <a href=\"http://labs.adobe.com/technologies/flashpro_extensionforair/\">http://labs.adobe.com/technologies/flashpro_extensionforair/</a> that added the UI to set up projects parameters necessary to publish and to use some of the features in your apps. This window is very similar to \"iPhone OS Settings\" which is built in already to Flash. [<em>UPDATE: AIR for Android Beta extension is no longer available on Adobe Labs website, but you can still find it when googling for \"flashpro_extensionforair_p2_112210.zxp\" file. This is because Adobe has included it in the Flash Professional CS5.5 which is a paid update if you already have CS5 </em><em><img title=\"Frown\" src=\"http://sierakowski.eu/legacy/tiny_mce/emotions/smiley-frown.gif\" alt=\"Frown\" border=\"0\" /></em> ]. Below is the screenshot of the AIR for Android Settings window that appears if the extension is installed.</p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/AIRforAndroidSettings.jpg\" alt=\"AIR for Android settings\" /></p>\r\n<p style=\"text-align: justify;\">Alhought it is really handy to use it because you don't have to use any command line, just few clicks and application is running on your device, but the problem is that when using it you are publishing with AIR 2.5 and you can't publish with AIR 2.6. [<em>UPDATE: to publish with AIR 2.6 from Flash Professional you need to get the CS5.5 upgrade.</em>]. Adobe usually first releases the new version of ADT (new version of AIR) and then after weeks or months an update to Flash IDE to add it to GUI.</p>\r\n<p style=\"text-align: justify;\">Also there are plenty of options missing there that you could do when manually modifying your application descriptor file or ADT commands, just as quick examples it could be an option to move your app to SD card on Android, publishing with different download URI if you want to publish your Android app on Amazon AppStore, enabling iPhone users to actually close your app rather than pause when pushing the home button and more...</p>\r\n<p style=\"text-align: justify;\">Very important thing to bear in mind is that an app published with AIR 2.6 won't work on every device!</p>\r\n<p class=\"redbox\"><strong>Apps published with AIR 2.6 work on:</strong><br />- Android OS in version 2.2 or later, <br />- IOS 4 or later (including iPod Touch 3rd gen and later, iPhone 3gs and later, iPad1 and 2). <br />If you want your app to be working on older versions of iPhone or iPod, you need to use the old Packager for iPhone tool.</p>\r\n<h3><br />Creating AIR project that works on both platforms</h3>\r\n<p style=\"text-align: justify;\">We are going to create a simple app that will check device resolution, create a rectangle that will fill the screen fully horizontally and 60% vertically, display a text field showing which device type app is running on and detected resolution and create a ball that will be controlled by accelerometer. This app is not intended to do any useful things but it is good as an example :)</p>\r\n<p class=\"globe\">TestApp source files: <a href=\"http://sierakowski.eu/examples/AIR_Android_iOS/testApp.zip\" target=\"_blank\">http://sierakowski.eu/examples/AIR_Android_iOS/testApp.zip</a></p>\r\n<p style=\"text-align: justify;\">In order to create app for mobile devices, you need to create a new AIR project (or if you have AIR for Android you can use it - it doesn't really matter as we won't use AIR settings in Flash). Choose \"New Document\", select \"Adobe AIR 2\" and save it as the testApp.fla. I'm going to save it to my d:\\projects\\testapp folder. Within a testapp folder I also created publishing folder where the swf will be published. To set your publishing folder for swf files, go to File -&gt; \"Publish Settings\" and in Formats tab type \"./publishing/testApp.swf\" in the File text box for Flash (.swf) field. Next you need to specify project dimensions, I will set 400x400 pixels, it doesn't actually matter as we will adjust it dynamically anyway. The last thing is to create a Document Class called TestApp. At this stage your properties panel should look like on the screenshot below.</p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/testAppProperties.jpg\" alt=\"Project properties for testApp\" /></p>\r\n<p style=\"text-align: justify;\">Now add the code below to your Document Class - TestApp.as file:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #9900cc; font-weight: bold;\">package</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.display</span>.<a href=\"http://www.google.com/search?q=stagealign%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:stagealign.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">StageAlign</span></a>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.display</span>.<a href=\"http://www.google.com/search?q=stagescalemode%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:stagescalemode.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">StageScaleMode</span></a>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.display</span>.<a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.text</span>.<a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">TextField</span></a>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.events</span>.<a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>;   </span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.system</span>.<a href=\"http://www.google.com/search?q=capabilities%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:capabilities.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Capabilities</span></a>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> flash.sensors.Accelerometer;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.events</span>.AccelerometerEvent;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> <span style=\"color: #004993;\">flash.events</span>.<a href=\"http://www.google.com/search?q=mouseevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:mouseevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">MouseEvent</span></a>;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> flash.desktop.NativeApplication;</span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">import</span> flash.desktop.SystemIdleMode;</span>\r\n \r\n<span style=\"vertical-align: top;\">   <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #9900cc; font-weight: bold;\">class</span> TestApp extends <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> bcg<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> ball<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> info_txt<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">TextField</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> <span style=\"color: #004993;\">info</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">String</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> <span style=\"color: #004993;\">stageWidth</span>, <span style=\"color: #004993;\">stageHeight</span>, heightOffset, accX, accY<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Number</span></a>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #6699cc; font-weight: bold;\">var</span> acc<span style=\"color: #000000; font-weight: bold;\">:</span>Accelerometer;</span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">public</span> <span style=\"color: #339966; font-weight: bold;\">function</span> TestApp<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span> </span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//before we can work with stage object, we need to make sure</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//that it has been added to the display list</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ADDED</span>, <span style=\"color: #004993;\">init</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//prevent screen dimming</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//Persmissions xml file has to have android.permission.WAKE_LOCK </span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//android.permission.DISABLE_KEYGUARD enabled!</span></span>\r\n<span style=\"vertical-align: top;\">         NativeApplication.nativeApplication.systemIdleMode = </span>\r\n<span style=\"vertical-align: top;\">                                               SystemIdleMode.KEEP_AWAKE;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #004993;\">init</span><span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">removeEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ADDED</span>, <span style=\"color: #004993;\">init</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//stage has no scale, we will lay it out properly</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">scaleMode</span> = <a href=\"http://www.google.com/search?q=stagescalemode%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:stagescalemode.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">StageScaleMode</span></a>.<span style=\"color: #004993;\">NO_SCALE</span>;</span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">align</span> = <a href=\"http://www.google.com/search?q=stagealign%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:stagealign.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">StageAlign</span></a>.<span style=\"color: #004993;\">TOP_LEFT</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//as soon as the stage is resized (or app initialised) </span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//we will create our graphics objects</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">RESIZE</span>, <span style=\"color: #004993;\">resize</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> <span style=\"color: #004993;\">resize</span><span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//we don't need to lister for resize event anymore </span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//as the stage orientation is fixed and will not change</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">stage</span>.<span style=\"color: #004993;\">removeEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">RESIZE</span>, <span style=\"color: #004993;\">resize</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//get the fullscreen size of the stage. </span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//It will cover the status bar of Android and iOS</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//On iOS it returns width smaller than height on landscape mode(a bug?)</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #009900;\">//so we need to find a larger value and make it width</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">stageWidth</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">max</span><span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">stage</span>.fullScreenWidth, <span style=\"color: #004993;\">stage</span>.fullScreenHeight<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">stageHeight</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Math</span></a>.<span style=\"color: #004993;\">min</span><span style=\"color: #000000;\">(</span><span style=\"color: #004993;\">stage</span>.fullScreenWidth, <span style=\"color: #004993;\">stage</span>.fullScreenHeight<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         heightOffset = <span style=\"color: #004993;\">stageHeight</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .2;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//creating bcg image with full stage width and height 60% of stage height</span></span>\r\n<span style=\"vertical-align: top;\">         bcg = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         bcg.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">beginFill</span><span style=\"color: #000000;\">(</span>0xcdd6df<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         bcg.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">drawRoundRect</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, heightOffset, </span>\r\n<span style=\"vertical-align: top;\">                             <span style=\"color: #004993;\">stageWidth</span>, <span style=\"color: #004993;\">stageHeight</span> <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">2</span> <span style=\"color: #000000; font-weight: bold;\">*</span> heightOffset, <span style=\"color: #000000; font-weight: bold;\">50</span>, <span style=\"color: #000000; font-weight: bold;\">50</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         bcg.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">endFill</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//creating ball image</span></span>\r\n<span style=\"vertical-align: top;\">         ball = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Sprite</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">beginFill</span><span style=\"color: #000000;\">(</span>0xFF0000<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">drawCircle</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">0</span>, <span style=\"color: #000000; font-weight: bold;\">0</span>, heightOffset <span style=\"color: #000000; font-weight: bold;\">*</span> .5<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">graphics</span>.<span style=\"color: #004993;\">endFill</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">cacheAsBitmap</span> = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">x</span> = <span style=\"color: #004993;\">stageWidth</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5;</span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">y</span> = <span style=\"color: #004993;\">stageHeight</span> <span style=\"color: #000000; font-weight: bold;\">-</span> <span style=\"color: #000000; font-weight: bold;\">2</span> <span style=\"color: #000000; font-weight: bold;\">*</span> heightOffset;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//creating text field with some system info</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">info</span> = <span style=\"color: #990000;\">\"Detected resolution: \"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #004993;\">stageWidth</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #990000;\">\"x\"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <span style=\"color: #004993;\">stageHeight</span>;</span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">info</span> <span style=\"color: #000000; font-weight: bold;\">+</span>= <span style=\"color: #990000;\">\"\\nDevice type: \"</span> <span style=\"color: #000000; font-weight: bold;\">+</span> <a href=\"http://www.google.com/search?q=capabilities%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:capabilities.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Capabilities</span></a>.<span style=\"color: #004993;\">manufacturer</span>;</span>\r\n<span style=\"vertical-align: top;\">         info_txt = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">TextField</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         info_txt.<span style=\"color: #004993;\">width</span> = <span style=\"color: #000000; font-weight: bold;\">200</span>;</span>\r\n<span style=\"vertical-align: top;\">         info_txt.<span style=\"color: #004993;\">text</span> = <span style=\"color: #004993;\">info</span>;</span>\r\n<span style=\"vertical-align: top;\">         info_txt.<span style=\"color: #004993;\">x</span> = <span style=\"color: #004993;\">stageWidth</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5 <span style=\"color: #000000; font-weight: bold;\">-</span> info_txt.<span style=\"color: #004993;\">width</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5;</span>\r\n<span style=\"vertical-align: top;\">         info_txt.<span style=\"color: #004993;\">y</span> = <span style=\"color: #004993;\">stageHeight</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5 <span style=\"color: #000000; font-weight: bold;\">-</span> info_txt.<span style=\"color: #004993;\">height</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//converting vectors to bitmap and adding everything on stage</span></span>\r\n<span style=\"vertical-align: top;\">         bcg.<span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>info_txt<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         bcg.<span style=\"color: #004993;\">cacheAsBitmap</span> = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>bcg<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #004993;\">addChild</span><span style=\"color: #000000;\">(</span>ball<span style=\"color: #000000;\">)</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//if accelerometer is available then activate it to control the ball</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>Accelerometer.isSupported<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            acc = <span style=\"color: #0033ff; font-weight: bold;\">new</span> Accelerometer<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            acc.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span>AccelerometerEvent.UPDATE, accUpdate<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">            <span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a>.<span style=\"color: #004993;\">ENTER_FRAME</span>, updateBall<span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #009900;\">//if running on everything else than iOS activae exit by touching the ball</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=capabilities%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:capabilities.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Capabilities</span></a>.<span style=\"color: #004993;\">manufacturer</span>.<span style=\"color: #004993;\">indexOf</span><span style=\"color: #000000;\">(</span><span style=\"color: #990000;\">\"iOS\"</span><span style=\"color: #000000;\">)</span> == <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">            ball.<span style=\"color: #004993;\">addEventListener</span><span style=\"color: #000000;\">(</span><a href=\"http://www.google.com/search?q=mouseevent%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:mouseevent.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">MouseEvent</span></a>.<span style=\"color: #004993;\">MOUSE_DOWN</span>, </span>\r\n<span style=\"vertical-align: top;\">                      <span style=\"color: #339966; font-weight: bold;\">function</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span><span style=\"color: #000000;\">{</span>NativeApplication.nativeApplication.exit<span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>;<span style=\"color: #000000;\">}</span><span style=\"color: #000000;\">)</span>;</span>\r\n<span style=\"vertical-align: top;\">         <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//handler for accelerometer</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> accUpdate<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span>AccelerometerEvent<span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">         accX = e.accelerationX;</span>\r\n<span style=\"vertical-align: top;\">         accY = e.accelerationY;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n \r\n<span style=\"vertical-align: top;\">      <span style=\"color: #009900;\">//handler to move the ball</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #0033ff; font-weight: bold;\">private</span> <span style=\"color: #339966; font-weight: bold;\">function</span> updateBall<span style=\"color: #000000;\">(</span>e<span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Event</span></a><span style=\"color: #000000;\">)</span><span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #0033ff; font-weight: bold;\">void</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">{</span></span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">-</span>= accX <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000; font-weight: bold;\">30</span>;</span>\r\n<span style=\"vertical-align: top;\">         ball.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">+</span>= accY <span style=\"color: #000000; font-weight: bold;\">*</span> <span style=\"color: #000000; font-weight: bold;\">30</span>;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>ball.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span> <span style=\"color: #004993;\">stageWidth</span> <span style=\"color: #000000; font-weight: bold;\">-</span> ball.<span style=\"color: #004993;\">width</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">            ball.<span style=\"color: #004993;\">x</span> = <span style=\"color: #004993;\">stageWidth</span> <span style=\"color: #000000; font-weight: bold;\">-</span> ball.<span style=\"color: #004993;\">width</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>ball.<span style=\"color: #004993;\">x</span> <span style=\"color: #000000; font-weight: bold;\">&lt;</span> ball.<span style=\"color: #004993;\">width</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">            ball.<span style=\"color: #004993;\">x</span> = ball.<span style=\"color: #004993;\">width</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>ball.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">&gt;</span>  <span style=\"color: #004993;\">stageHeight</span> <span style=\"color: #000000; font-weight: bold;\">-</span> ball.<span style=\"color: #004993;\">height</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">            ball.<span style=\"color: #004993;\">y</span> = <span style=\"color: #004993;\">stageHeight</span> <span style=\"color: #000000; font-weight: bold;\">-</span> ball.<span style=\"color: #004993;\">height</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5;</span>\r\n \r\n<span style=\"vertical-align: top;\">         <span style=\"color: #0033ff; font-weight: bold;\">if</span> <span style=\"color: #000000;\">(</span>ball.<span style=\"color: #004993;\">y</span> <span style=\"color: #000000; font-weight: bold;\">&lt;</span> ball.<span style=\"color: #004993;\">height</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">            ball.<span style=\"color: #004993;\">y</span> = ball.<span style=\"color: #004993;\">height</span> <span style=\"color: #000000; font-weight: bold;\">*</span> .5;</span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\">   <span style=\"color: #000000;\">}</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">The code above targets both Android and iOS platforms and it disables functionalities that aren't available at runtime. In example, unlike on Android, it is not possible to quit application on iPhone from the application code, the users can do that by pressing the hardware Home button. So our app's code checks what the hardware platform is and if it is not iOS then it adds exit functionality (by touching the ball). If you wanted to use Android Menu or Back keys you would also need to do that in the Android part of your code. Another thing is that we don't want a device to dim the screen when our application is running. To do that we use NativeApplication.systemIdleMode. But in order to use this feature, we need to add (or rather request for) relevant permissions to the Android app descriptor file and we will do that in another step of this tutorial. Application also uses an accelerometer, but before initialising it, we check if its actually available on a device.</p>\r\n<p style=\"text-align: justify;\">To improve performance we are going to use GPU mode and we don't use any vectors but convert them to bitmaps. If we used vectors, which are actually mathematical calculations, the CPU would need to recalculate them every time we move them or if there was any object that overlapped them and moved. If we use bitmaps, this job is done by the GPU and the CPU can concentrate on executing the code and application logic rather than rendering the graphics. So just after creating our sprites, we set cacheAsBitmap property to true which caches these vector sprites as bitmaps. If we also wanted to scale or rotate our objects, we would need to additionally use another property cacheAsBitmapMatrix, otherwise bitmap would need to be recalculated and cached again what would decrease the performance.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #004993;\">matrix</span><span style=\"color: #000000; font-weight: bold;\">:</span><a href=\"http://www.google.com/search?q=matrix%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:matrix.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Matrix</span></a> = <span style=\"color: #0033ff; font-weight: bold;\">new</span> <a href=\"http://www.google.com/search?q=matrix%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:matrix.html&amp;filter=0&amp;num=100&amp;btnI=lucky\"><span style=\"color: #004993;\">Matrix</span></a><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">)</span>; <span style=\"color: #009900;\">// creates an identity matrix </span></span>\r\n<span style=\"vertical-align: top;\">mySprite.cacheAsBitmapMatrix = <span style=\"color: #004993;\">matrix</span>; </span>\r\n<span style=\"vertical-align: top;\">mySprite.<span style=\"color: #004993;\">cacheAsBitmap</span> = <span style=\"color: #0033ff; font-weight: bold;\">true</span>;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Also bear in mind that this method works only on Sprites or MovieClips that don't have any animations. If a MovieClip has frames to play, bitmap will need to be updated for every frame what again kills the performance. In my other projects I actually convert all vectors and movieclips to bitmaps using BitmapData.draw method frame by frame but this is a subject for another article about optimisation that I'm currently working on :) Important thing to note is that when using the GPU mode, any filters or blendmodes will not be displayed.</p>\r\n<p>To learn more about ActionScript APIs specific for mobile development visit: <span style=\"line-height: 26px;\"><a href=\"http://help.adobe.com/en_US/as3/iphone/WS789ea67d3e73a8b24b55b57a124b32b5b57-7ffe.html\" target=\"_blank\">http://help.adobe.com/en_US/as3/iphone/WS789ea67d3e73a8b24b55b57a124b32b5b57-7ffe.html</a>.</span></p>\r\n<p style=\"text-align: justify;\">Now if you test this project on your computer you will notice that stage size is as you set 400x400 pixels but assets are too big and you can only see a small percent of the actual size. This is because they are dynamically resized to match a full size of a device screen. When you deploy it on your device, it will look correctly. You can use stageWidth and stageHeight when testing on your computer or just make the window fullscreen.</p>\r\n<p style=\"text-align: justify;\">So now once you have your application ready as the swf file has been produced to the d:\\project\\testApp\\publishing folder, the next step is to create application descriptor files, one for Android and one for iOS. They are required by AIR ADT to create and package your apps.</p>\r\n<h3><br />Creating application descriptor files and graphics files for Android and iOS</h3>\r\n<p style=\"text-align: justify;\">You wouldn't have to manually create descriptor files if you used GUI available in Flash Professional but creating it once this way and reusing it later enables you to better understand your application and you can also add some features that are not available from the Flash GUI. The \"application descriptor\" file is a container with settings and information necessary to publish your application the way that will make it compatible with the device's operating system. The convention is that the descriptor file name is constructed by adding \"-app\" prefix to your app name (ie. yourAppName-app.xml). So in our case it would be TestApp-app.xml.</p>\r\n<p style=\"text-align: justify;\">If you look at the descriptor file for Android and iOS you may realize that we could actually create the same descriptor for both platforms. The difference really is that iOS version requires different icon sizes than Android, besides they have different sections that are platform specific but having them both in the same file won't break anything, the ADT will skip the parts that are not relevant for a chosen platform.</p>\r\n<p>Below is the content of the file, which we name testAppAndroid-app.xml:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;?</span>xml <span style=\"color: #004993;\">version</span>=<span style=\"color: #990000;\">\"1.0\"</span> encoding=<span style=\"color: #990000;\">\"UTF-8\"</span> standalone=<span style=\"color: #990000;\">\"no\"</span> <span style=\"color: #000000; font-weight: bold;\">?&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>application xmlns=<span style=\"color: #990000;\">\"http://ns.adobe.com/air/application/2.6\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>id<span style=\"color: #000000; font-weight: bold;\">&gt;</span>eu.sierakowski.TestApp<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>id<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>versionNumber<span style=\"color: #000000; font-weight: bold;\">&gt;</span>1.0.0<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>versionNumber<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>versionLabel<span style=\"color: #000000; font-weight: bold;\">&gt;</span>1.0.0<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>versionLabel<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>filename<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testApp<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>filename<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>description<span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>name<span style=\"color: #000000; font-weight: bold;\">&gt;</span>Test Application<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>name<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>copyright<span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>initialWindow<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>content<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testApp.swf<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>content<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>systemChrome<span style=\"color: #000000; font-weight: bold;\">&gt;</span>standard<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>systemChrome<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>transparent<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>transparent<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>visible<span style=\"color: #000000; font-weight: bold;\">&gt;</span>true<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>visible<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>fullScreen<span style=\"color: #000000; font-weight: bold;\">&gt;</span>true<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>fullScreen<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>aspectRatio<span style=\"color: #000000; font-weight: bold;\">&gt;</span>landscape<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>aspectRatio<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>renderMode<span style=\"color: #000000; font-weight: bold;\">&gt;</span>gpu<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>renderMode<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>autoOrients<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>autoOrients<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>initialWindow<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>icon<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image36x36<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon36.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image36x36<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image48x48<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon48.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image48x48<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image72x72<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon72.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image72x72<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>icon<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>customUpdateUI<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>customUpdateUI<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>allowBrowserInvocation<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>allowBrowserInvocation<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>android<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>manifestAdditions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000; font-weight: bold;\">&lt;!</span><span style=\"color: #000000;\">[</span>CDATA<span style=\"color: #000000;\">[</span><span style=\"color: #000000; font-weight: bold;\">&lt;</span>manifest android<span style=\"color: #000000; font-weight: bold;\">:</span>installLocation=<span style=\"color: #990000;\">\"auto\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>uses<span style=\"color: #000000; font-weight: bold;\">-</span>permission android<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #004993;\">name</span>=<span style=\"color: #990000;\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span><span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>uses<span style=\"color: #000000; font-weight: bold;\">-</span>permission android<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #004993;\">name</span>=<span style=\"color: #990000;\">\"android.permission.DISABLE_KEYGUARD\"</span><span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>uses<span style=\"color: #000000; font-weight: bold;\">-</span>permission android<span style=\"color: #000000; font-weight: bold;\">:</span><span style=\"color: #004993;\">name</span>=<span style=\"color: #990000;\">\"android.permission.WAKE_LOCK\"</span><span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;/</span>manifest<span style=\"color: #000000; font-weight: bold;\">&gt;</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>manifestAdditions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>android<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;/</span>application<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">What is important in this file is the application namespace which is in the first \"application\" tag. This means our descriptor is targeted to use AIR 2.6. If you specified AIR 2.5 instead, application would be published as AIR 2.5 (even if publishing with ADT from AIR 2.6) so some optimisation improvements or new features would not be available / included in your app (only important bug-fixes and security changes would be included). If a new version of AIR will be available you should modify your descriptor file to target it.</p>\r\n<p style=\"text-align: justify;\">If you want to learn more what each tag does, check this link: <a href=\"http://help.adobe.com/en_US/air/build/WSfffb011ac560372f2fea1812938a6e463-8000.html\" target=\"_blank\">http://help.adobe.com/en_US/air/build/WSfffb011ac560372f2fea1812938a6e463-8000.html</a>.</p>\r\n<p style=\"text-align: justify;\">I'm going to go through only few important tags for our app. The VersionNumber tag defines your application version and it is a number that could be a sequence of up to 3 numbers separated by periods. It is important to pay attention when changing the version number every time you release a new version of your app as only this way the users will be able to upgrade their current version to a new one. This number is recognised when publishing your app to app stores. The VersionLabel tag is a string representation which is not recognised by appstores - it is just to present it to the users in installation dialogs and is not required, if not present the VersionNumber will be used in its place.</p>\r\n<p style=\"text-align: justify;\">We want our app to be fullscreen, have landscape aspect ratio and we don't want it to auto-rotate. These settings are in specified in the initialWindow tag. Also as a render mode we select the GPU to use hardware acceleration for our bitmaps.</p>\r\n<p style=\"text-align: justify;\">In the icons section we provide three types of icons required by Android which are 36x36, 48x48, 72x72. The common practice is to create high quality icon first and then scale remaining down. If you don't provide any icon, the default one will be used. It is not enough to specify icons only here in the descriptor file, you will also need to pass them to the ADT command to wrap them to the application package.</p>\r\n<p style=\"text-align: justify;\">Android section is the group of settings specific to the Android platform only. android:installLocation=\"auto\" makes your app movable to SD card (<a href=\"list-of-tips/78-how-to-make-air-for-android-app-movable-to-sd-card.html\" target=\"_blank\">http://sierakowski.eu/list-of-tips/78-how-to-make-air-for-android-app-movable-to-sd-card.html</a>). Currently there is no way to include this option from the Flash IDE.</p>\r\n<p style=\"text-align: justify;\">Very important part of every descriptor file is request for uses-permissions. Every user at the beginning of the installation process is asked to accept the risk of enabling these permission for an app. Rember to use only these permissions that are absolutely necessary for your app to work. In case of our application it is not necessary to ask for WRITE_EXTERNAL_STORAGE as we won't write any data from our app so we should actually remove it (I left it as an example). But we do need DISABLE_KEYGUARD and WAKE_LOCK to disable screen dimming and auto - keyboard locking to make our app permanently present to the user.</p>\r\n<p style=\"text-align: justify;\">Below is the descriptor file that we are going to use when publishing for iOS. You can see that there are almost no differences really, only different icons (29, 48, 57, 72 and 512) and iPhone section. In the iPhone section there is the infoAdditions section, where you can pass keys to request some functionality or behaviours in iOS. <span style=\"border-collapse: collapse; font-family: monospace; white-space: pre; line-height: normal;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;</span>UIApplicationExitsOnSuspend<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;&lt;</span>true<span style=\"color: #000000; font-weight: bold;\">/&gt; </span></span>will cause that your app will be closed rather than \"paused\" when pressing the Home button. f you wanted your app to be targeted for iPhone 4 and or for iPad, you will need to request higher resolution and this is also done from the descriptor file settings.</p>\r\n<p style=\"text-align: justify;\">The <span style=\"border-collapse: collapse; font-family: monospace; white-space: pre; line-height: normal;\">UIDeviceFa</span><span style=\"border-collapse: collapse; font-family: monospace; white-space: pre; line-height: normal;\">mily </span>tag specifies a target device, 1 is fot iPod and iPhone, 2 for iPad. You can have &lt;string&gt;1&lt;/string&gt;&lt;string&gt;2&lt;/string&gt; to have your app working on both type of devices.</p>\r\n<p style=\"text-align: justify;\">Add <span style=\"border-collapse: collapse; font-family: monospace; white-space: pre; line-height: normal;\">&lt;requestedDisplayResolution&gt;high&lt;/requestedDisplayResolution&gt; </span>tag after &lt;/infoAdditions&gt; if you want your app to use high resolution Retina displays (iPhone 4).</p>\r\n<p style=\"text-align: justify;\">To learn more about iOS and Android specific settings follow this link: <a style=\"color: #473213; text-decoration: none; padding: 2px;\" href=\"http://help.adobe.com/en_US/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-7ffe.html\" target=\"_blank\">http://help.adobe.com/en_US/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-7ffe.html</a>.</p>\r\n<p style=\"text-align: justify;\">Let's name the Apple descriptor file testAppIOS-app.xml.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;?</span>xml <span style=\"color: #004993;\">version</span>=<span style=\"color: #990000;\">\"1.0\"</span> encoding=<span style=\"color: #990000;\">\"UTF-8\"</span> standalone=<span style=\"color: #990000;\">\"no\"</span> <span style=\"color: #000000; font-weight: bold;\">?&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;</span>application xmlns=<span style=\"color: #990000;\">\"http://ns.adobe.com/air/application/2.6\"</span><span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>id<span style=\"color: #000000; font-weight: bold;\">&gt;</span>eu.sierakowski.TestApp<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>id<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>versionNumber<span style=\"color: #000000; font-weight: bold;\">&gt;</span>1.0.0<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>versionNumber<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>filename<span style=\"color: #000000; font-weight: bold;\">&gt;</span>TestApp<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>filename<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>description<span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>name<span style=\"color: #000000; font-weight: bold;\">&gt;</span>TestApp<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>name<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>copyright<span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>initialWindow<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>content<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testApp.swf<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>content<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>systemChrome<span style=\"color: #000000; font-weight: bold;\">&gt;</span>standard<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>systemChrome<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>transparent<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>transparent<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>visible<span style=\"color: #000000; font-weight: bold;\">&gt;</span>true<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>visible<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>fullScreen<span style=\"color: #000000; font-weight: bold;\">&gt;</span>true<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>fullScreen<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>aspectRatio<span style=\"color: #000000; font-weight: bold;\">&gt;</span>landscape<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>aspectRatio<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>renderMode<span style=\"color: #000000; font-weight: bold;\">&gt;</span>gpu<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>renderMode<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>autoOrients<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>autoOrients<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>initialWindow<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>icon<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image29x29<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon29.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image29x29<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image48x48<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon48.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image48x48<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image57x57<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon57.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image57x57<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image72x72<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon72.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image72x72<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>image512x512<span style=\"color: #000000; font-weight: bold;\">&gt;</span>testAppIcon512.png<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>image512x512<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>icon<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>customUpdateUI<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>customUpdateUI<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>allowBrowserInvocation<span style=\"color: #000000; font-weight: bold;\">&gt;</span>false<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>allowBrowserInvocation<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n \r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;</span>iPhone<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>InfoAdditions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">      <span style=\"color: #000000; font-weight: bold;\">&lt;!</span><span style=\"color: #000000;\">[</span>CDATA<span style=\"color: #000000;\">[</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;</span>UIDeviceFamily<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;&lt;</span>array<span style=\"color: #000000; font-weight: bold;\">&gt;&lt;</span>string<span style=\"color: #000000; font-weight: bold;\">&gt;</span><span style=\"color: #000000; font-weight: bold;\">1</span><span style=\"color: #000000; font-weight: bold;\">&lt;/</span>string<span style=\"color: #000000; font-weight: bold;\">&gt;&lt;/</span>array<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;</span>UIApplicationExitsOnSuspend<span style=\"color: #000000; font-weight: bold;\">&lt;/</span>key<span style=\"color: #000000; font-weight: bold;\">&gt;&lt;</span>true<span style=\"color: #000000; font-weight: bold;\">/&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000;\">]</span><span style=\"color: #000000;\">]</span><span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">    <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>InfoAdditions<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\">  <span style=\"color: #000000; font-weight: bold;\">&lt;/</span>iPhone<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">&lt;/</span>application<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Providing you have the swf file, both descriptor files and you have already created all variations of testApp icons, everything in the same folder which is d:\\projects\\testapp\\publishing, you are still not done yet :)</p>\r\n<p style=\"text-align: justify;\">You are missing the Default.png file - the splash screen for iOS. This file is shown as the first thing when launching your application and will disappear when it is loaded and ready to use. If you don't provide this file, the user will see only a white screen. At the moment there is no splash screen option for Android. There are different splash screen sizes for different version of iDevices. In example iPad will be looking for Default-Landscape.png and Default-Portrait.png files <a href=\"http://blogs.adobe.com/cantrell/archives/2010/11/how-to-build-an-air-application-for-both-the-iphone-and-ipad.html\" target=\"_blank\">http://blogs.adobe.com/cantrell/archives/2010/11/how-to-build-an-air-application-for-both-the-iphone-and-ipad.html</a>, iPhone 4 Default @ 2x.png. To learn more see \"iOS launch images\" section of <a href=\"http://help.adobe.com/en_US/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-7ffe.html\" target=\"_blank\">http://help.adobe.com/en_US/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-7ffe.html</a> and <span style=\"line-height: 26px;\"><a href=\"http://developer.apple.com/library/ios/#qa/qa1588/_index.html\">http://developer.apple.com/library/ios/#qa/qa1588/_index.html</a></span>.</p>\r\n<h3><br />Certificates and provisioning profile for iOS</h3>\r\n<p style=\"text-align: justify;\">You are also still missing the certificate file and provisioning profile required when publishing the iOS version.</p>\r\n<p style=\"text-align: justify;\">If you don't have your p12 certificate already you can easily create one from the Flash IDE. Click on Edit button for your Adobe AIR settings in the Properties panel, then select Signature tab and Create button to create and save your certificate (as on the screnshoot below). Now you are done for Android.</p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/creatingCertificate.jpg\" alt=\"Creating a certificate\" /></p>\r\n<p style=\"text-align: justify;\">Unfortunately it is not that simple for iOS. Beside certificate you need to get the provisioning profile from developer.apple.com by signing in to became Apple iOS developer and paying $99. If you want to publish your app just for testing you will need to get UID of your iDevice and provide it when creating your provisioning. It is quite complicated at first. To learn more about the whole process watch Lee Brimelow's video tutorial: <a href=\"http://www.gotoandlearn.com/play.php?id=133\" target=\"_blank\">http://www.gotoandlearn.com/play.php?id=133</a>.</p>\r\n<p style=\"text-align: justify;\">Ok, once you received your provisioning profile file, you have all of the required prerequisites to publish your app for Android and iOS. Now it is time to download the AIR 2.6 files and build the ADT commands.</p>\r\n<h3><br />Publishing with AIR 2.6 ADT</h3>\r\n<p style=\"text-align: justify;\">First you need to download the latest AIR SDK version from Adobe. At the time of writing this article it is the version 2.6. Adobe is working hard on the version 2.7 that is told to significantly improve performance on iOS but the release date is not known yet.</p>\r\n<p>You can download the AIR sdk from here: <a href=\"http://www.adobe.com/products/air/sdk/\">http://www.adobe.com/products/air/sdk/</a></p>\r\n<p style=\"text-align: justify;\">Once it is downloaded, unzip it let say to d:\\AIR folder.</p>\r\n<p style=\"text-align: justify;\">Using command line may not be that handy as using Flash GUI. There are some tools from the Flash community written in AIR or Java that have graphical interfaces making the whole process easier. You can also create a batch (.bat) file that you could then reuse just by changing some parameters for different projects.</p>\r\n<p style=\"text-align: justify;\">Publishing for Android and iOS is slightly different as you can see below.</p>\r\n<p style=\"text-align: justify;\">First let's create publishForAndroid.bat file and save it in your d:\\projects\\testapp\\publishing folder (Copy and paste it as one line, I divided it to make it easier to read).</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #004993;\">d</span><span style=\"color: #000000; font-weight: bold;\">:</span>\\air\\bin\\adt.bat <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #9900cc; font-weight: bold;\">package</span> <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #004993;\">target</span> apk <span style=\"color: #000000; font-weight: bold;\">-</span>storetype pkcs12 </span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">-</span>keystore your_own_certificate.p12 testApp.apk testAppAndroid<span style=\"color: #000000; font-weight: bold;\">-</span>app.xml </span>\r\n<span style=\"vertical-align: top;\">testApp.swf testAppIcon36.png testAppIcon48.png testAppIcon72.png</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">Now create publishForIOS.bat file, save it in the same folder as before.</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #004993;\">d</span><span style=\"color: #000000; font-weight: bold;\">:</span>\\air\\bin\\adt <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #9900cc; font-weight: bold;\">package</span> <span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #004993;\">target</span> ipa<span style=\"color: #000000; font-weight: bold;\">-</span>ad<span style=\"color: #000000; font-weight: bold;\">-</span>hoc <span style=\"color: #000000; font-weight: bold;\">-</span>storetype pkcs12 </span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">-</span>keystore your_own_certificate.p12 </span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">-</span>provisioning<span style=\"color: #000000; font-weight: bold;\">-</span>profile your_ownProvision.mobileprovision</span>\r\n<span style=\"vertical-align: top;\">testApp.ipa testAppiOS<span style=\"color: #000000; font-weight: bold;\">-</span>app.xml testApp.swf </span>\r\n<span style=\"vertical-align: top;\">testAppIcon29.png testAppIcon48.png testAppIcon57.png</span>\r\n<span style=\"vertical-align: top;\">testAppIcon72.png testAppIcon512.png Default.png</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">I suggest to do not run these batch files directly but execute them from the command prompt console (cmd). This will allow you to see if there are any errors during the publishing (and the error messages are very helpful), batch files run directly would close immediately. Note that when publishing, you will be asked to provide your certificate password, the same one that you specified when creating your p12 key.</p>\r\n<p style=\"text-align: justify;\">Executing publishForAndroid.bat will produce testApp.apk and publishForIOS will produce testApp.ipa.</p>\r\n<p style=\"text-align: justify;\">As you can see both commands are very similar, the difference is the -target parameter which is \"apk\" for Android and \"ipa\" for iOS. You could provide different target options that would allow you to package release for debugging, testing with emulator (Android only - learn more: <a href=\"http://flashandroid.mikalesblog.com/?p=21\" target=\"_blank\">http://flashandroid.mikalesblog.com/?p=21</a>&gt;), or for distribution on app store. When testing a debug version you can actually receive trace outputs from your device which is pretty cool. To learn more follow this link: <a href=\"http://help.adobe.com/en_US/air/build/WS901d38e593cd1bac1e63e3d128cdca935b-8000.html\" target=\"_blank\">http://help.adobe.com/en_US/air/build/WS901d38e593cd1bac1e63e3d128cdca935b-8000.html</a>.</p>\r\n<p style=\"text-align: justify;\">For iOS we also need to provide provisioning file, different icons and Default.png and its variations for iPad and/or iPhone 4 (remember about capital D in the file name). If your app (this applies to all platforms) loads other swf files, xml files or image files, they have to be included in the package by providing these file names to ADT. When speaking about loading swf files, iOS version won't execute any code in external swf files, but you probably know about that already?</p>\r\n<p style=\"text-align: justify;\">You probably noticed that publishing for iOS take much more time. The reason is that the publishing for iOS process is completely different. The ActionScript code is converted to a native code using Ahead of Time compilation and the AIR itself is actually included in the package. To learn more visit this link: <a href=\"http://www.adobe.com/devnet/logged_in/abansod_iphone.html\" target=\"_blank\">http://www.adobe.com/devnet/logged_in/abansod_iphone.html</a>or this: <a href=\"http://www.mikechambers.com/blog/files/presentations/fitc_amsterdam_2010/flash_iphone_fitc_2010.pdf\" target=\"_blank\">http://www.mikechambers.com/blog/files/presentations/fitc_amsterdam_2010/flash_iphone_fitc_2010.pdf</a>. This is the reason why ipa files are much bigger when comparing to Android apk files that only contain your app code and assets.</p>\r\n<p style=\"text-align: justify;\">If you are just trying to test your app on iDevice and you don't want to wait so long, you can use interpreter mode:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">-</span><span style=\"color: #004993;\">target</span> ipa<span style=\"color: #000000; font-weight: bold;\">-</span>test<span style=\"color: #000000; font-weight: bold;\">-</span>interpreter</span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"text-align: justify;\">This actually doesn't convert ActionScript byte code but works like AIR on Android, which is that the bytecode is interpreted at runtime. But be carefull, as the performance of interpreter mode and converted code might be different. Also with interpreter you can load external swfs with the code, which is not possible with converted code that you are going to publish to the AppStore.</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">The Android AIR apps force the users to install AIR runtime on their device (the users are asked to do that when trying to run an app and the AIR is not installed yet). [UPDATE (August 2011): Now with AIR 3.0 you can embed the AIR runtimes into the package, learn more: <span style=\"line-height: 26px;\"><a href=\"http://www.leebrimelow.com/?p=2954\">http://www.leebrimelow.com/?p=2954</a>]</span></p>\r\n<p>After executing both batch files you should see the apk and ipa files in your published folder.</p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/folders.jpg\" alt=\"Files structure\" /></p>\r\n<h3><br />Testing on Android devices</h3>\r\n<p style=\"text-align: justify;\">To test our app on Android, just plug your device as a disk drive, copy the apk file to your phone and disconnect it or change connection mode to \"charge only\" to get back access to the SD card. Then launch a file browser (I'm using Astro file manager), browse to the apk file and execute it. This will install the testApp and you should see the new icon in your Applications listing. Now you are ready for testing :)</p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/android.jpg\" alt=\"Android screens\" /></p>\r\n<p>&nbsp;</p>\r\n<p><strong>[Update March 2012]</strong></p>\r\n<p style=\"text-align: justify;\">Another way to quickly install an app on Android device is to use adb - a part of Andriod SDK. Using this method, you don't need to copy any apk files.</p>\r\n<p style=\"text-align: justify;\">So first go to settings on your Android 4.x device and in Developer options enable USB debugging. On Android 2.x go to Settings, Applications, Development and select USB Debugging.</p>\r\n<p style=\"text-align: justify;\">You don't have to download Android SDK as the adb is also included in the AIR sdk in lib\\android\\bin folder.</p>\r\n<p style=\"text-align: justify;\">So once you have your device connected, all you do is type this command:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">adb install <span style=\"color: #000000; font-weight: bold;\">&lt;</span>path to your apk file<span style=\"color: #000000; font-weight: bold;\">&gt;</span></span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">And after you type it, you should see something like this:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<div class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">*</span> daemon not <span style=\"color: #004993;\">running</span>. starting it now on port <span style=\"color: #000000; font-weight: bold;\">5037</span> <span style=\"color: #000000; font-weight: bold;\">*</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">*</span> daemon started successfully <span style=\"color: #000000; font-weight: bold;\">*</span></span>\r\n<span style=\"vertical-align: top;\"><span style=\"color: #000000; font-weight: bold;\">2784</span> KB<span style=\"color: #000000; font-weight: bold;\">/</span>s <span style=\"color: #000000;\">(</span><span style=\"color: #000000; font-weight: bold;\">9796983</span> bytes <span style=\"color: #0033ff; font-weight: bold;\">in</span> 3.436s<span style=\"color: #000000;\">)</span></span>\r\n<span style=\"vertical-align: top;\">        pkg<span style=\"color: #000000; font-weight: bold;\">:</span> <span style=\"color: #000000; font-weight: bold;\">/</span><span style=\"color: #004993;\">data</span><span style=\"color: #000000; font-weight: bold;\">/</span>local<span style=\"color: #000000; font-weight: bold;\">/</span>tmp<span style=\"color: #000000; font-weight: bold;\">/</span>jumpingDroid.apk</span>\r\n<span style=\"vertical-align: top;\">Success</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>To print a list of attached devices use:</p>\r\n<div class=\"rj_insertcode\">\r\n<div class=\"rj_insertcode_actionscript3\">\r\n<table class=\"actionscript3\" style=\"border-collapse: collapse; width: 100%; border: 1px solid #054b6e; background: #f8f8f8;\">\r\n<tbody>\r\n<tr class=\"li1\">\r\n<td style=\"width: 1px; background: #f0f0f0; vertical-align: top; color: #676f73; border-right: 1px dotted #dddddd; font-size: 12px; text-align: right;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">1\r\n</pre>\r\n</td>\r\n<td style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\">\r\n<pre style=\"margin: 0; background: none; vertical-align: top; padding: 0px 4px; font-size: 12px;\"><span style=\"vertical-align: top;\">adb devices</span></pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\">If you want to use adb install on a Kindle Fire device, follow this tutorial: <a href=\"http://www.jayceooi.com/2011/12/13/how-to-install-kindle-fire-adb-usb-driver/\">http://www.jayceooi.com/2011/12/13/how-to-install-kindle-fire-adb-usb-driver/</a></p>\r\n<p>&nbsp;</p>\r\n<h3>Testing on iOS devices</h3>\r\n<p style=\"text-align: justify;\">To publish to iPhone/iPod/iPad you need to use iTunes. The very first step after you plug your iOS device is to drag and drop your provisioning file to iTunes. You won't be able to successfully deploy your app without this step. Next just drag and drop the ipa file to your Library Apps section, then sync your device and the testApp icon will appear on the screen.</p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/itunes1.jpg\" alt=\"iTunes apps\" /></p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/itunes2.jpg\" alt=\"iTunes syncing\" /></p>\r\n<p style=\"text-align: justify;\">Remember that if you want to sync a newer version of your app, you need to remove the old one from your device first. Everybody knows how do that :) if not: press an app icon for a bit longer to see the small cross button that removes selected app (as on the screenshot below).</p>\r\n<p><img src=\"http://sierakowski.eu/examples/AIR_Android_iOS/iPod.jpg\" alt=\"iPod screens\" /></p>\r\n<p style=\"text-align: justify;\"><span style=\"line-height: 26px;\">Youtube video below shows the testApp on HTC Desire (800 x 480 pixels) and iPod Touch (480 x 320 pixels).</span></p>\r\n<p><object style=\"width: 500px; height: 305px;\" data=\"http://www.youtube.com/v/jV8AD1nKjBk?version=3\" type=\"application/x-shockwave-flash\" width=\"100\" height=\"100\"><param name=\"allowfullscreen\" value=\"true\" /><param name=\"allowscriptaccess\" value=\"always\" /><param name=\"src\" value=\"http://www.youtube.com/v/jV8AD1nKjBk?version=3\" />\r\n</object></p>\r\n<p><span style=\"line-height: 26px;\">&nbsp;</span></p>\r\n<h3>Submitting to Markets and AppStores</h3>\r\n<p style=\"text-align: justify;\">Now when you spent tens of hours testing your app and you are 100% sure it works as expected then you are ready to share it with the world. Publishing to the Android Market is very easy process. You will need to prepare screenshots, icons, description and pay $25 registration fee. The whole process is very simple and your app will be there within minutes. Here is the link to the Android Market: <a href=\"https://market.android.com/publish\" target=\"_blank\">https://market.android.com/publish</a>.</p>\r\n<p style=\"text-align: justify;\">The Amazon Apstore for Android is free now as they just launched it. They actually review your app first, this usually takes a week. Note that you need to change download URL parameter when publishing your AIR app. Learn more here: <a href=\"http://blogs.adobe.com/cantrell/archives/2011/03/air-2-6-applications-and-the-amazon-appstore-for-android.html\" target=\"_blank\">http://blogs.adobe.com/cantrell/archives/2011/03/air-2-6-applications-and-the-amazon-appstore-for-android.html</a>. The Amazon Appstore link is here: <a href=\"https://developer.amazon.com/help/faq.html\" target=\"_blank\">https://developer.amazon.com/help/faq.html</a></p>\r\n<p style=\"text-align: justify;\">When it comes to publishing to the Apple Appstore, things are slightly more difficult. You need to actually use different provisioning profile when publishing with ADT. AppStore also has the approval process. To learn more read Adobe article: <a href=\"http://www.adobe.com/devnet/flash/articles/app_store_guide.html\" target=\"_blank\">http://www.adobe.com/devnet/flash/articles/app_store_guide.html</a></p>\r\n<h3><br />Conclusion</h3>\r\n<p style=\"text-align: justify;\">This quick but long :) tutorial only scratches the surface of developing mobile AIR apps. So far you have learnt how to create basic configuration files, publish and test simple app on Android and iOS device. The next very important subject to cover is optimisation for mobiles. When I started testing my first apps I was very disappointed seeing them running only 5 frames per second on iPhone. But when learning and testing different optimisation techniques and just experimenting I was able to reach 60 frames per second. My latest project at the time of writing this article is a game called JumpingDroid and I spent more time optimising it than building the actual game logic. You can play it for free from Android Market and Amazon AppStore. The same game is also running very well on iOS devices: <a href=\"blog/23-blog/80-jumping-droid-runs-60-frames-per-second-on-ipod-touch-with-air-26.html\" target=\"_blank\">http://sierakowski.eu/blog/23-blog/80-jumping-droid-runs-60-frames-per-second-on-ipod-touch-with-air-26.html</a>. I have learnt a lot when building it and I'm currently writing another article about some optimisation tips for mobile AIR apps.</p>\r\n<p style=\"text-align: justify;\">AIR for mobile is a new technology and there aren't many (any?) books and materials yet that would cover everything. There are plenty of very good documentation and blog post provided by Adobe, links to some of them can be found below in the Links section. Also another very good source of solutions for common problems is the official Adobe forum: <a href=\"http://forums.adobe.com/community/air/development/android\">http://forums.adobe.com/community/air/development/android</a>. There are plenty of community members that are more active then Adobe employees (ie Colin <img title=\"Wink\" src=\"http://sierakowski.eu/legacy/tiny_mce/emotions/smiley-wink.gif\" alt=\"Wink\" border=\"0\" />) and I promise you won't be waiting long for an answer (unless your question has been answered 100 times already and you didn't search for answer before posting).</p>\r\n<p style=\"text-align: justify;\">I think the AIR is really great technology, Adobe is spending a lot of effort to put more and more functionalities and to further optimise it. I hope you won't find it very hard to learn and I wish you good luck with your apps and don't forget to share your links to the markets and appstores!</p>\r\n<p>And if you find anything that could be corrected in this article, please also let me know!</p>\r\n<h3><br />What next? - learn optmisation techniques!</h3>\r\n<p style=\"text-align: justify;\">If you came to this point then you are ready to move on and create you first game or app. If you want to learn some of the optimisation tips and techniques that I used when developing Jumping Droid game, read this article: <span style=\"line-height: 26px;\"><a href=\"list-of-tips/86-building-mobile-games-in-adobe-air-optimization-techniques-used-in-jumping-droid-game.html\" target=\"_blank\">http://sierakowski.eu/list-of-tips/86-building-mobile-games-in-adobe-air-optimization-techniques-used-in-jumping-droid-game.html</a></span></p>\r\n<h3><br />Links</h3>\r\n<p>Links used in this article:</p>\r\n<ul>\r\n<li>The latest AIR SDK: <span style=\"line-height: 26px;\"><a href=\"http://www.adobe.com/products/air/sdk/\" target=\"_blank\">http://www.adobe.com/products/air/sdk/</a></span></li>\r\n<li><span style=\"line-height: 21px;\">What's new in Adobe AIR 2.6: <a href=\"http://www.adobe.com/devnet/air/articles/whats-new-in-air-26.html\" target=\"_blank\">http://www.adobe.com/devnet/air/articles/whats-new-in-air-26.html<br /></a></span><a href=\"http://www.adobe.com/devnet/air/articles/ios_features_in_air26.html\" target=\"_blank\">http://www.adobe.com/devnet/air/articles/ios_features_in_air26.html</a></li>\r\n<li><span style=\"line-height: 21px;\">AIR application descriptor elements: <span style=\"line-height: 26px;\"><a href=\"http://help.adobe.com/en_US/air/build/WSfffb011ac560372f2fea1812938a6e463-8000.html\" target=\"_blank\">http://help.adobe.com/en_US/air/build/WSfffb011ac560372f2fea1812938a6e463-8000.html</a></span></span></li>\r\n<li><span style=\"line-height: 21px;\">ActionScript API's specific for mobile apps: </span><a href=\"http://help.adobe.com/en_US/as3/iphone/WS789ea67d3e73a8b24b55b57a124b32b5b57-7ffe.html\">http://help.adobe.com/en_US/as3/iphone/WS789ea67d3e73a8b24b55b57a124b32b5b57-7ffe.html</a></li>\r\n<li><span style=\"line-height: 21px;\">Setting mobile application properties: <span style=\"line-height: 26px;\"><a href=\"http://help.adobe.com/en_US/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-7ffe.html\" target=\"_blank\">http://help.adobe.com/en_US/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-7ffe.html</a></span></span></li>\r\n<li><span style=\"line-height: 21px;\"><span style=\"line-height: 26px;\">Building apps for iPhone and iPad: </span><span style=\"line-height: 26px;\"><a href=\"http://blogs.adobe.com/cantrell/archives/2010/11/how-to-build-an-air-application-for-both-the-iphone-and-ipad.html\" target=\"_parent\">http://blogs.adobe.com/cantrell/archives/2010/11/how-to-build-an-air-application-for-both-the-iphone-and-ipad.html</a></span></span></li>\r\n<li><span style=\"line-height: 21px;\"><span style=\"line-height: 26px;\">Apple developer, provisioning profile, certificates video tutorial: </span><span style=\"line-height: 26px;\"><a href=\"http://www.gotoandlearn.com/play.php?id=133\" target=\"_blank\">http://www.gotoandlearn.com/play.php?id=133</a></span></span></li>\r\n<li><span style=\"line-height: 21px;\"><span style=\"line-height: 26px;\">Testing AIR apps with Android emulator: </span><span style=\"line-height: 26px;\"><a href=\"http://flashandroid.mikalesblog.com/?p=21\" target=\"_blank\">http://flashandroid.mikalesblog.com/?p=21</a></span></span></li>\r\n<li><span style=\"line-height: 21px;\"><span style=\"line-height: 26px;\">ADT package commands: </span><span style=\"line-height: 26px;\"><a href=\"http://help.adobe.com/en_US/air/build/WS901d38e593cd1bac1e63e3d128cdca935b-8000.html\">http://help.adobe.com/en_US/air/build/WS901d38e593cd1bac1e63e3d128cdca935b-8000.html</a></span></span></li>\r\n<li><span style=\"line-height: 21px;\">More about AOT compilation: <span style=\"line-height: 26px;\"><a href=\"http://www.mikechambers.com/blog/files/presentations/fitc_amsterdam_2010/flash_iphone_fitc_2010.pdf\" target=\"_blank\">http://www.mikechambers.com/blog/files/presentations/fitc_amsterdam_2010/flash_iphone_fitc_2010.pdf</a> and </span></span><a href=\"http://www.adobe.com/devnet/logged_in/abansod_iphone.html\">http://www.adobe.com/devnet/logged_in/abansod_iphone.html</a></li>\r\n<li><span style=\"line-height: 21px;\">Guide for Apple App Store submissions: <span style=\"line-height: 26px;\"><a href=\"http://www.adobe.com/devnet/flash/articles/app_store_guide.html\" target=\"_blank\">http://www.adobe.com/devnet/flash/articles/app_store_guide.html</a></span></span></li>\r\n</ul>\r\n<p>â€‹</p>\r\n<div id=\"jc\">\r\n<div id=\"comments\">\r\n<h4>Comments imported from the original article @sierakowski.eu</h4>\r\n<div id=\"comments-list\" class=\"comments-list\">\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#16</a> <span class=\"comment-author\">stpapadakis</span> <span class=\"comment-date\">2013-07-30 07:00</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Hello. I tried followed your instructions but my flash app stil doesnt' run in full screen mode. Do you have any suggestions?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#15</a> <span class=\"comment-author\">stpapadakis</span> <span class=\"comment-date\">2013-07-30 06:54</span>\r\n<div id=\"comment-body-189\" class=\"comment-body\">Hello! I followed your intstructions but i still can make my app play in full screen mode. I used your .as file in my flash file but still nothing happened.<br />Any suggestions?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#14</a> <span class=\"comment-author\">EricR</span> <span class=\"comment-date\">2012-11-30 14:42</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">I am just beginning my journey of making portable games using Flash. This is an amazingly easy tutorial. Thank you for posting stuff like this!!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#13</a> <span class=\"comment-author\">jossu</span> <span class=\"comment-date\">2012-10-13 21:49</span>\r\n<div id=\"comment-body-150\" class=\"comment-body\">Iam using Flash cs6 and i have a \"base\" movieclip on stage. Still i cant scale it according to different resolutions. could anybody help ? <br />stageWidth = Math.max(stage.fullScreenWidth , stage.fullScreenHeigh t);<br />stageHeight = Math.min(stage.fullScreenWidth , stage.fullScreenHeigh t);<br />heightOffset = stageHeight * .2;<br /><br />base.width = stageWidth; <br />base.height = stageHeight;</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#12</a> <span class=\"comment-author\">Sean Smith</span> <span class=\"comment-date\">2012-09-14 14:25</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Holy Crap! You are a very smart man and I have learned so much from you on this and the game optimization post, that my head wants to float off my body and explode! THANK YOU!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#11</a> <span class=\"comment-author\">kris</span> <span class=\"comment-date\">2012-05-08 16:03</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">great tutorial! thanks for tanking your time and sharing!!!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#10</a> <span class=\"comment-author\">Vinicius Oliveira</span> <span class=\"comment-date\">2012-01-27 11:05</span>\r\n<div id=\"comment-body-117\" class=\"comment-body\"><img src=\"http://sierakowski.eu/components/com_jcomments/images/smiles/lol.gif\" alt=\":lol:\" border=\"0\" /> <br />HOW I do WAKE_LOCK in IOS developing, to screen not dim ?</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#9</a> <span class=\"comment-author\">daniel</span> <span class=\"comment-date\">2012-01-23 12:10</span>\r\n<div id=\"comment-body-116\" class=\"comment-body\">I'm a bit puzzled with this statement:<br /><br />\"If your app (this applies to all platforms) loads other swf files, xml files or image files, they have to be included in the package by providing these file names to ADT. When speaking about loading swf files, iOS version won't execute any code in external swf files, but you probably know about that already?\"<br /><br />I know the limitation of iOS that make it impossible to load an swf file (with code inside) from another sandbox domain (internet) into a running Main (local), but is this true for packed-with-ipa asset-type-swf files as well? <br /><br />I need to come up with a strategy for an application - and i would love to walk the modular way by loading class definitions into a core. Is that a no-go on iOS, or packing my modules with the ipa would work?<br /><br />Thank You.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#8</a> <span class=\"comment-author\">skyser</span> <span class=\"comment-date\">2012-01-11 15:42</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Yes, thank you for this. I was wrestling with basic issues like accessing the fullscreen and getting actual stage resolution. This tut helped me where the Adobe developer connection FAILED!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#7</a> <span class=\"comment-author\">Felix</span> <span class=\"comment-date\">2011-09-08 20:47</span>\r\n<div id=\"comment-body-93\" class=\"comment-body\">Great clear steps.<br /><br />But I get a strange error:\"Compilation failed...\"<br /><br />When I publish with flash cs5.5 it works great on iPhone but without including any icons. When i include the incons in flash GUI and publish, iTunes reports synch error: Unknown Error:0xE800000 4C\". So i tried this solution with ADT but still get stuck...<br /><br />Can anyone help? i neet to know what the Compilation failed referes to to be able to narrow the scope of the problem.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#6</a> <span class=\"comment-author\">Bill Deakin</span> <span class=\"comment-date\">2011-09-07 16:00</span>\r\n<div id=\"comment-body-92\" class=\"comment-body\">Hi<br /><br />Very useful tutorial, one of the most comprehensive I've read and I've read a lot of these over the past couple of weeks!<br /><br />I've followed most of this and have a test app installed and working but I can't get the \"Full Screen\" option to work!<br /><br />I set the fullScreen node to full exactly like in your example descriptor file above, but ass soon as the loading screen vanishes the toolbar appears.<br /> <br />So am I doing something wrong, or is this a bug in the adt? Did you manage to hide the toolbar OK?<br /> <br />Cheers<br /><br />Billy</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#5</a> <span class=\"comment-author\">Tadeu</span> <span class=\"comment-date\">2011-06-02 15:18</span>\r\n<div id=\"comment-body-67\" class=\"comment-body\">Awsome ! really awsome tutorial!<br />Thanks Sierakowski</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#4</a> <span class=\"comment-author\">woj</span> <span class=\"comment-date\">2011-05-27 08:19</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">@Bjorn Thanks! Difference in size is due to the fact that the AIR itself is packed into the ipa files along with your code and assets. On Android users need to install AIR runtime as a separate app so the actual apk files contain only your code, nothing else and therefore are smaller.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#3</a> <span class=\"comment-author\">Bjorn</span> <span class=\"comment-date\">2011-05-27 07:37</span>\r\n<div id=\"comment-body-63\" class=\"comment-body\">Nice tutorial.<br />I do have a question. Do you know why a ipa file becomes more then 3MB even if my swf is less then 90Kb? When I add my file to the app store it even runs up to 6/7MB. I do use optimisation techniques.<br />It's hard to find any information about this. Ths same project for Android needs less conversion and runs a lot beter.</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#2</a> <span class=\"comment-author\">Czadu</span> <span class=\"comment-date\">2011-05-23 20:33</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Great resource, thanks for sharing this!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"comment-item-190\" class=\"even\">\r\n<div class=\"rbox\">\r\n<div class=\"rbox_tr\">\r\n<div class=\"rbox_tl\">\r\n<div class=\"rbox_t\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<div class=\"rbox_m\">\r\n<div class=\"comment-box usertype-guest\"><span class=\"comments-vote\"> <span id=\"comment-vote-holder-189\"> <a class=\"vote-good\" title=\"Good comment!\">+</a><a class=\"vote-poor\" title=\"Poor comment!\">-</a> <span class=\"vote-none\">0</span> </span> </span> <a class=\"comment-anchor\">#1</a> <span class=\"comment-author\">J</span> <span class=\"comment-date\">2011-05-18 00:28</span>\r\n<div id=\"comment-body-190\" class=\"comment-body\">Awesome tutorial!</div>\r\n<span class=\"comments-buttons\"> <a>Quote</a> </span></div>\r\n<div class=\"clear\">&nbsp;</div>\r\n</div>\r\n<div class=\"rbox_br\">\r\n<div class=\"rbox_bl\">\r\n<div class=\"rbox_b\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "extendedType": "html"
    },
    "hits": 48946,
    "publishedDate": {
        "$date": "2011-05-10T23:00:00.000+0000"
    },
    "slug": "starting-with-air-for-android-and-ios-building-one-app-for-both-platforms",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3a"
    }, {
        "$oid": "55b0a7277f9371ddc46ba0f8"
    }],
    "title": "Starting with AIR for Android and iOS - building one app for both platforms"
} {
    "_id": {
        "$oid": "55b1e87fdcaa979a97c5ecea"
    },
    "__v": 1,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc34"
    }],
    "content": {
        "brief": "<p>Markdown has been made a markup language of&nbsp;choice by many different platforms including the one I use often: Github, Atlassian Jira, Stack Exchange. The language was designed to be readable as-is, without looking like it's been marked up with tags or formatting instructions (unlike HTML).&nbsp;Since its initial development in 2004 by <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\">John Gruber</a>&rsquo;s&nbsp;there have been number of efforts attempting to standarise it. John's own Perl script converting Markdown into HTML has been used as the initial definition for Markdown but since it has number of ambiguous definitions causing&nbsp;issues, many different standards of the language emerged. The differences are mainly around more advanced features thought and the base is rather common and this is what I'm going to concentrate on here. Also there is an inititiative called CommonMark (<a href=\"http://commonmark.org\" target=\"_blank\">commonmark.org</a>) describing itself as a strongly specified, highly compatible implementation of Markdown, with many popular individuals involved that standarises the language.</p>",
        "extendedMarkdown": {
            "html": "<h3 id=\"1-headings\">1. Headings</h3>\n<p>There are two different ways of creating headings, with # symbol where number of instances corresponds to <h> type (1-6) or with underlines:</p>\n<h1 id=\"h1\">H1</h1>\n<pre><code># H1\n&lt;h1 id=&quot;h1&quot;&gt;H1&lt;/h1&gt;\n</code></pre><h2 id=\"h2\">H2</h2>\n<pre><code>## H2\n&lt;h2 id=&quot;h2&quot;&gt;H2&lt;/h2&gt;\n</code></pre><h6 id=\"h6\">H6</h6>\n<pre><code>###### H6\n&lt;h6 id=&quot;h6&quot;&gt;H6&lt;/h6&gt;\n</code></pre><h1 id=\"h1\">H1</h1>\n<pre><code>H1\n======\n&lt;h1 id=&quot;h1&quot;&gt;H1&lt;/h1&gt;\n</code></pre><h2 id=\"h2\">H2</h2>\n<pre><code>H2\n------\n&lt;h2 id=&quot;h2&quot;&gt;H2&lt;/h2&gt;\n</code></pre><hr>\n<h3 id=\"2-text-attributes\">2. Text Attributes</h3>\n<p>Paragraphs are just lines.</p>\n<pre><code>Paragraphs are just lines.\n&lt;p&gt;Paragraphs are just lines.&lt;/p&gt;\n</code></pre><p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<pre><code>Emphasis, aka italics, with *asterisks* or _underscores_.\n&lt;p&gt;Emphasis, aka italics, with &lt;em&gt;asterisks&lt;/em&gt; or &lt;em&gt;underscores&lt;/em&gt;.\n</code></pre><p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<pre><code>Strong emphasis, aka bold, with **asterisks** or __underscores__.\nStrong emphasis, aka bold, with &lt;strong&gt;asterisks&lt;/strong&gt; or &lt;strong&gt;underscores&lt;/strong&gt;.\n</code></pre><p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<pre><code>Combined emphasis with **asterisks and _underscores_**.\nCombined emphasis with &lt;strong&gt;asterisks and &lt;em&gt;underscores&lt;/em&gt;&lt;/strong&gt;.\n</code></pre><p>Italics mixed with underscore one_two_three_four vs one_two<em>three</em>four.</p>\n<pre><code>Italics mixed with underscore one_two_three_four vs one_two*three*four.\nItalics mixed with underscore one_two_three_four vs one_two&lt;em&gt;three&lt;/em&gt;four.\n</code></pre><p>Strikethrough uses two tildes. <del>Mistaken text.</del></p>\n<pre><code>Strikethrough uses two tildes. ~~Mistaken text.~~\nStrikethrough uses two tildes. &lt;del&gt;Mistaken text.&lt;/del&gt;\n</code></pre><p>Monospace uses backticks. <code>monospace</code> example.</p>\n<pre><code>Monospace uses backticks. `monospace` example.\nMonospace uses backticks. &lt;code&gt;monospace&lt;/code&gt; example.\n</code></pre><hr>\n<h3 id=\"3-quotes\">3. Quotes</h3>\n<blockquote>\n<p>Always remember that you are absolutely unique. Just like everyone else.</p>\n</blockquote>\n<pre><code>&gt; Always remember that you are absolutely unique. Just like everyone else.\n\n&lt;blockquote&gt;\n   &lt;p&gt;Always remember that you are absolutely unique. Just like everyone else.&lt;/p&gt;\n&lt;/blockquote&gt;\n</code></pre><hr>\n<h3 id=\"4-horizontal-lines\">4. Horizontal lines</h3>\n<p>Three or more hyphens, asterisks or underscores</p>\n<hr>\n<pre><code>---\n***\n___\n&lt;hr&gt;\n</code></pre><hr>\n<h3 id=\"5-links\">5. Links</h3>\n<p>This is a link example inside of a paragraph <a href=\"https://sigman.pl\">Visit sigman.pl now!</a>.</p>\n<pre><code>This is a link example inside of a paragraph [Visit sigman.pl now!](https://sigman.pl).\nThis is a link example inside of a paragraph &lt;a href=&quot;https://sigman.pl&quot;&gt;Visit sigman.pl now!&lt;/a&gt;.\n</code></pre><p>or just in the text like that <a href=\"http://sigman.pl\">http://sigman.pl</a>.</p>\n<pre><code>or just in the text like that &lt;http://sigman.pl&gt;.\nor just in the text like that &lt;a href=&quot;http://sigman.pl&quot;&gt;http://sigman.pl&lt;/a&gt;.\n</code></pre><p>To create anchor links place an anchor <code>&lt;a name=&quot;lesson1&quot;&gt;&lt;/a&gt;</code> where you want to link to and refer to it on the same page by <code>[lesson one](#lesson1)</code>. Markdown headers are also anchors: <code>## lesson1</code></p>\n<hr>\n<h3 id=\"6-images\">6. Images</h3>\n<p><img src=\"http://blog.sigman.pl/images/sigman.pl.png\" alt=\"sigman logo alt\" title=\"Sigman Logo Title\"></p>\n<pre><code>![sigman logo alt](http://blog.sigman.pl/images/sigman.pl.png &quot;Sigman Logo Title&quot;)\n&lt;img src=&quot;http://blog.sigman.pl/images/sigman.pl.png&quot; alt=&quot;sigman logo alt&quot; title=&quot;Sigman Logo Title&quot;&gt;\n</code></pre><hr>\n<h3 id=\"7-lists\">7. Lists</h3>\n<p>Unordered list:</p>\n<ul>\n<li>one</li>\n<li>two</li>\n<li>three</li>\n</ul>\n<pre><code>* one\n* two\n* three\n\n&lt;ul&gt;\n&lt;li&gt;one&lt;/li&gt;\n&lt;li&gt;two&lt;/li&gt;\n&lt;li&gt;three&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>Ordered list:</p>\n<ol>\n<li>one</li>\n<li>two</li>\n<li>three</li>\n</ol>\n<pre><code>1. one\n2. two\n3. three\n\n&lt;ol&gt;\n&lt;li&gt;one&lt;/li&gt;\n&lt;li&gt;two&lt;/li&gt;\n&lt;li&gt;three&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre><p>Mixed:</p>\n<ol>\n<li>one</li>\n<li>two<ul>\n<li>item1</li>\n<li>item2</li>\n</ul>\n</li>\n<li>three</li>\n</ol>\n<pre><code>1. one\n2. two\n  * item1\n  * item2\n3. three\n\n&lt;ol&gt;\n  &lt;li&gt;one&lt;/li&gt;\n  &lt;li&gt;two\n    &lt;ul&gt;\n      &lt;li&gt;item1&lt;/li&gt;\n      &lt;li&gt;item2&lt;/li&gt;\n   &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;three&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre><hr>\n<h3 id=\"8-tables\">8. Tables</h3>\n<p>Colons under the head row can be used to text-align columns.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<pre><code>| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th style=&quot;text-align:left&quot;&gt;Left-Aligned&lt;/th&gt;\n      &lt;th style=&quot;text-align:center&quot;&gt;Center Aligned&lt;/th&gt;\n      &lt;th style=&quot;text-align:right&quot;&gt;Right Aligned&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td style=&quot;text-align:left&quot;&gt;col 3 is&lt;/td&gt;\n      &lt;td style=&quot;text-align:center&quot;&gt;some wordy text&lt;/td&gt;\n      &lt;td style=&quot;text-align:right&quot;&gt;$1600&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td style=&quot;text-align:left&quot;&gt;col 2 is&lt;/td&gt;\n      &lt;td style=&quot;text-align:center&quot;&gt;centered&lt;/td&gt;\n      &lt;td style=&quot;text-align:right&quot;&gt;$12&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td style=&quot;text-align:left&quot;&gt;zebra stripes&lt;/td&gt;\n      &lt;td style=&quot;text-align:center&quot;&gt;are neat&lt;/td&gt;\n      &lt;td style=&quot;text-align:right&quot;&gt;$1&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre><hr>\n<h3 id=\"9-code-syntax\">9. Code syntax</h3>\n<p>Use single backticks for inline code (previous monospace example) or three backticks as the first and last line around the code. Optionally specify the language name.</p>\n<pre><code class=\"lang-javascript\">alert(&#39;hello world&#39;);\n</code></pre>\n<pre><code>`` `javascript\nalert(&#39;hello world&#39;);\n`` `\n\n\n&lt;pre&gt;alert(&#39;hello world&#39;);&lt;/pre&gt;\n</code></pre><hr>\n<h3 id=\"10-escaping\">10. Escaping</h3>\n<p>To escape special character, like in example if you want to have a list with a dash as a first character:\n<code>* - (dash): regular file</code>\nYou would get an unexpected result:</p>\n<ul>\n<li><ul>\n<li>(dash): regular file</li>\n</ul>\n</li>\n</ul>\n<p>By escaping with backslash:\n<code>* \\- (dash): regular file</code>\nWe can avoid this:</p>\n<ul>\n<li>- (dash): regular file</li>\n</ul>\n<h3 id=\"read-more-\">Read more:</h3>\n<ul>\n<li>Markdown cheatsheet: <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a></li>\n<li>Github Markdown: <a href=\"https://guides.github.com/features/mastering-markdown/\">https://guides.github.com/features/mastering-markdown/</a></li>\n</ul>\n",
            "md": "### 1. Headings\r\n\r\nThere are two different ways of creating headings, with # symbol where number of instances corresponds to <h> type (1-6) or with underlines:\r\n\r\n# H1\r\n```\r\n# H1\r\n<h1 id=\"h1\">H1</h1>\r\n```\r\n\r\n## H2\r\n```\r\n## H2\r\n<h2 id=\"h2\">H2</h2>\r\n```\r\n\r\n###### H6\r\n```\r\n###### H6\r\n<h6 id=\"h6\">H6</h6>\r\n```\r\n\r\nH1\r\n======\r\n```\r\nH1\r\n======\r\n<h1 id=\"h1\">H1</h1>\r\n```\r\n\r\nH2\r\n------\r\n```\r\nH2\r\n------\r\n<h2 id=\"h2\">H2</h2>\r\n```\r\n\r\n---\r\n### 2. Text Attributes\r\n\r\nParagraphs are just lines.\r\n```\r\nParagraphs are just lines.\r\n<p>Paragraphs are just lines.</p>\r\n```\r\n\r\nEmphasis, aka italics, with *asterisks* or _underscores_.\r\n```\r\nEmphasis, aka italics, with *asterisks* or _underscores_.\r\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.\r\n```\r\n\r\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\r\n```\r\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\r\nStrong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.\r\n```\r\n\r\nCombined emphasis with **asterisks and _underscores_**.\r\n```\r\nCombined emphasis with **asterisks and _underscores_**.\r\nCombined emphasis with <strong>asterisks and <em>underscores</em></strong>.\r\n```\r\n\r\nItalics mixed with underscore one_two_three_four vs one_two*three*four.\r\n```\r\nItalics mixed with underscore one_two_three_four vs one_two*three*four.\r\nItalics mixed with underscore one_two_three_four vs one_two<em>three</em>four.\r\n```\r\n\r\nStrikethrough uses two tildes. ~~Mistaken text.~~\r\n```\r\nStrikethrough uses two tildes. ~~Mistaken text.~~\r\nStrikethrough uses two tildes. <del>Mistaken text.</del>\r\n```\r\n\r\nMonospace uses backticks. `monospace` example.\r\n```\r\nMonospace uses backticks. `monospace` example.\r\nMonospace uses backticks. <code>monospace</code> example.\r\n```\r\n\r\n---\r\n### 3. Quotes\r\n\r\n> Always remember that you are absolutely unique. Just like everyone else.\r\n\r\n```\r\n> Always remember that you are absolutely unique. Just like everyone else.\r\n\r\n<blockquote>\r\n   <p>Always remember that you are absolutely unique. Just like everyone else.</p>\r\n</blockquote>\r\n```\r\n\r\n---\r\n### 4. Horizontal lines\r\n\r\nThree or more hyphens, asterisks or underscores\r\n\r\n---\r\n\r\n```\r\n---\r\n***\r\n___\r\n<hr>\r\n```\r\n\r\n---\r\n### 5. Links\r\n\r\nThis is a link example inside of a paragraph [Visit sigman.pl now!](https://sigman.pl).\r\n```\r\nThis is a link example inside of a paragraph [Visit sigman.pl now!](https://sigman.pl).\r\nThis is a link example inside of a paragraph <a href=\"https://sigman.pl\">Visit sigman.pl now!</a>.\r\n```\r\n\r\nor just in the text like that <http://sigman.pl>.\r\n```\r\nor just in the text like that <http://sigman.pl>.\r\nor just in the text like that <a href=\"http://sigman.pl\">http://sigman.pl</a>.\r\n```\r\n\r\nTo create anchor links place an anchor `<a name=\"lesson1\"></a>` where you want to link to and refer to it on the same page by `[lesson one](#lesson1)`. Markdown headers are also anchors: `## lesson1`\r\n\r\n\r\n---\r\n### 6. Images\r\n\r\n![sigman logo alt](http://blog.sigman.pl/images/sigman.pl.png \"Sigman Logo Title\")\r\n```\r\n![sigman logo alt](http://blog.sigman.pl/images/sigman.pl.png \"Sigman Logo Title\")\r\n<img src=\"http://blog.sigman.pl/images/sigman.pl.png\" alt=\"sigman logo alt\" title=\"Sigman Logo Title\">\r\n```\r\n\r\n---\r\n### 7. Lists\r\n\r\nUnordered list:\r\n* one\r\n* two\r\n* three\r\n\r\n```\r\n* one\r\n* two\r\n* three\r\n\r\n<ul>\r\n<li>one</li>\r\n<li>two</li>\r\n<li>three</li>\r\n</ul>\r\n```\r\n\r\nOrdered list:\r\n1. one\r\n2. two\r\n3. three\r\n\r\n```\r\n1. one\r\n2. two\r\n3. three\r\n\r\n<ol>\r\n<li>one</li>\r\n<li>two</li>\r\n<li>three</li>\r\n</ol>\r\n```\r\n\r\n\r\nMixed:\r\n1. one\r\n2. two\r\n  * item1\r\n  * item2\r\n3. three\r\n\r\n```\r\n1. one\r\n2. two\r\n  * item1\r\n  * item2\r\n3. three\r\n\r\n<ol>\r\n  <li>one</li>\r\n  <li>two\r\n    <ul>\r\n      <li>item1</li>\r\n      <li>item2</li>\r\n   </ul>\r\n  </li>\r\n  <li>three</li>\r\n</ol>\r\n```\r\n\r\n---\r\n### 8. Tables\r\n\r\nColons under the head row can be used to text-align columns.\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n```\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th style=\"text-align:left\">Left-Aligned</th>\r\n      <th style=\"text-align:center\">Center Aligned</th>\r\n      <th style=\"text-align:right\">Right Aligned</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td style=\"text-align:left\">col 3 is</td>\r\n      <td style=\"text-align:center\">some wordy text</td>\r\n      <td style=\"text-align:right\">$1600</td>\r\n    </tr>\r\n    <tr>\r\n      <td style=\"text-align:left\">col 2 is</td>\r\n      <td style=\"text-align:center\">centered</td>\r\n      <td style=\"text-align:right\">$12</td>\r\n    </tr>\r\n    <tr>\r\n      <td style=\"text-align:left\">zebra stripes</td>\r\n      <td style=\"text-align:center\">are neat</td>\r\n      <td style=\"text-align:right\">$1</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\n---\r\n### 9. Code syntax\r\nUse single backticks for inline code (previous monospace example) or three backticks as the first and last line around the code. Optionally specify the language name.\r\n\r\n```javascript\r\nalert('hello world');\r\n```\r\n\r\n```\r\n`` `javascript\r\nalert('hello world');\r\n`` `\r\n\r\n\r\n<pre>alert('hello world');</pre>\r\n```\r\n\r\n---\r\n### 10. Escaping\r\n\r\nTo escape special character, like in example if you want to have a list with a dash as a first character:\r\n`* - (dash): regular file`\r\nYou would get an unexpected result:\r\n* - (dash): regular file\r\n\r\nBy escaping with backslash:\r\n`* \\- (dash): regular file`\r\nWe can avoid this:\r\n* \\- (dash): regular file\r\n\r\n### Read more:\r\n\r\n* Markdown cheatsheet: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\r\n* Github Markdown: https://guides.github.com/features/mastering-markdown/"
        },
        "extendedType": "markdown"
    },
    "hits": 1488,
    "publishedDate": {
        "$date": "2013-07-23T23:00:00.000+0000"
    },
    "slug": "markdown-basics",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc38"
    }],
    "title": "Markdown basics"
} {
    "_id": {
        "$oid": "55b248c4529fa36fa1cc3fa8"
    },
    "__v": 1,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc34"
    }],
    "content": {
        "brief": "<p>A list of mandatory to know Unix commands that I use often with the list of most common parameters.&nbsp;</p>",
        "extendedMarkdown": {
            "html": "<p>[(!) Article updated on 21/11/2011.]</p>\n<h3 id=\"1-intro\">1. Intro</h3>\n<p>The prompt usually ends with the dollar sign ($), in example <code>username@hostname:path$</code>.</p>\n<p>If you want to use multiple parameters, add them one by one, in example instead of running <code>ls -l -a -h</code>, run <code>ls -lah</code>.</p>\n<p>Single letter parameters are passed after single dash, word parameters are passed after two dashed, in example ls <code>-r</code> or `ls --reverse&#39;</p>\n<h3 id=\"2-operations-on-files-and-directories\">2. Operations on files and directories</h3>\n<hr>\n<h4 id=\"2-1-using-wildcards-shell-globbing-\">2.1 Using wildcards (shell globbing)</h4>\n<p>Globing is the ability of the shell to match patterns to file and directory names. When glob is found as parameter to any command, the shell &quot;expands&quot; it and returns the filenames that match the pattern. If no files match glob, the shell returns the pattern itself to the command where the glob is used. Globbing is done before executing the command. The two most popular glob characters are <code>*</code> that matches any number or characters and <code>?</code> that matches one arbitrary character. To not use globbing, the pattern needs to be wrapped in single quotes. The best way to practice globs is by using the echo command, that is used to print its arguments as standard output:</p>\n<pre><code class=\"lang-bash\">$ echo *\nafpovertcp.cfg aliases aliases.db apache2 asl asl.conf\n\n$ echo *ap\nopenldap\n\n$ echo ap*\napache2\n\n$ echo *ap*\napache2 com.apple.screensharing.agent.launchd openldap\n\n$ echo *ap?che*\napache2\n\n$ echo &#39;*ap?che*&#39;\n*ap?che*\n</code></pre>\n<hr>\n<h4 id=\"2-2-ls\">2.2 ls</h4>\n<p>Lists directory contests, by default in the current directory.</p>\n<p>Running without params:</p>\n<pre><code class=\"lang-bash\">$ ls\napi            argumentsProcessor.js    config.js        entities        maps\n</code></pre>\n<p>Usually I want to know the detailed description so I use the following additional parameters:</p>\n<ul>\n<li>-l for long description</li>\n<li>-a for displaying also hidden files (beginning with dot)</li>\n<li>-h for displaying file sized in human readable format (shortened)</li>\n</ul>\n<pre><code class=\"lang-bash\">$ ls -lah\ntotal 128\ndrwxr-xr-x  17 wojsierak  staff   578B  9 Jul 12:05 .\ndrwxr-xr-x  13 wojsierak  staff   442B 29 Jun 11:44 ..\n-rw-r--r--@  1 wojsierak  staff   6.0K 27 May 20:32 .DS_Store\ndrwxr-xr-x  14 wojsierak  staff   476B 29 Jun 11:44 api\n-rw-r--r--   1 wojsierak  staff   3.1K  6 Feb 16:03 argumentsMapper.js\n-rw-r--r--   1 wojsierak  staff   4.1K 21 Nov  2011 argumentsProcessor.js\n</code></pre>\n<p>Running ls in another directory:</p>\n<pre><code class=\"lang-bash\">$ ls -lah /etc\n</code></pre>\n<p>Other useful parameters:</p>\n<ul>\n<li>-d: list only directories </li>\n<li>-I, --ignore: lists files not matching pattern, in example `ls --ignore=&#39;a*&#39; would exclude files starting from letter &#39;a&#39;.</li>\n<li>-R, --recursive: prints also content of subdirectories.</li>\n</ul>\n<p>Sorting options:</p>\n<ul>\n<li>-r, --reverse: sorts files in the reverse order.</li>\n<li>-S, --sort=size</li>\n<li>-t, --sort=time: sorts by last modification time</li>\n<li>-u, --time=access: sorts by last access time</li>\n<li>-X, --sort=extension: sorts by extension names</li>\n</ul>\n<p>Columns explanation:</p>\n<pre><code>1:            2: 3:       4:    5:      6:           7:\ndrwxr-xr-x    14 wsierak  staff 476B    29 Jun 11:44 api\n\n?UUUGGGOOO    00  UUUUUU GGGGGG ####    ^-- date stamp and file name\n^ ^  ^  ^      ^      ^      ^    ^\n| |  |  |      |      |      |    \\--- File Size\n| |  |  |      |      |      \\-------- Group Name (for example, Users, Administrators, etc)\n| |  |  |      |      \\--------------- Owner\n| |  |  |      \\---------------------- Links count \n| \\--\\--\\----------------------------- Read, Write and Special access modes for [U]ser, [G]roup, and [O]thers (everyone else)\n\\------------------------------------- File type flag\n</code></pre><p><strong>Type and access:</strong></p>\n<p>There are four parts that make this column.</p>\n<pre><code>| File |     Permissions      |\n| Type | User | Group | Other |\n-------------------------------\n   d     rwx     r-x     r-x\n</code></pre><p>File type:</p>\n<ul>\n<li>- (dash): regular file</li>\n<li>d: directories</li>\n<li>l: symlink (symbolic link)\nLess common:</li>\n<li>p: pipe</li>\n<li>s: socket</li>\n</ul>\n<p>The permission sets are as follows:</p>\n<ul>\n<li>user: the user who owns the file</li>\n<li>group: the group a file belongs to, any user in that group takes advantage of these permissions</li>\n<li>other: everyone else in the system</li>\n</ul>\n<p>Permissions types:</p>\n<ul>\n<li>r: read contents of file or read the contents of directory (view files and sub-directories in that directory) </li>\n<li>w: write to a file or writ to the directory (create files and sub-directories in that directory)</li>\n<li>x: execute programs or scripts for the files or enter into the directory</li>\n<li>-: no permission</li>\n</ul>\n<p>Examples:</p>\n<ul>\n<li><code>-r-x------</code> means that the file can be only read and executed but not written to only by an owner</li>\n<li><code>drwxr-xr-x</code> means the file is directory, can be read, written to and content can be accessed by the owner and can be read and accessed by users in a group and other users in the system</li>\n</ul>\n<hr>\n<h4 id=\"2-3-creating-files\">2.3 Creating files</h4>\n<p>There are many ways to create a new file directly from the command line without using any text editor. </p>\n<hr>\n<h5 id=\"2-3-1-touch\">2.3.1 Touch</h5>\n<p>The simplest way is by using the <code>touch</code> command that is used to update the modification time stamp, however when the file doesn&#39;t exist, it will create an empty one.</p>\n<pre><code class=\"lang-bash\">$ touch read.me\n</code></pre>\n<hr>\n<h4 id=\"2-3-2-standard-output-from-another-command\">2.3.2 Standard output from another command</h4>\n<p>Standard input and output are also called streams. Processes read and write commands from them. To send output of any command to a file instead of terminal use the redirection in one of the two following forms:</p>\n<p>Below will create a new file or overwrite an existing file</p>\n<pre><code class=\"lang-bash\">$ echo &#39;hello world&#39; &gt; read.me\n</code></pre>\n<p>Below will create a new file or append to an existing file</p>\n<pre><code class=\"lang-bash\">$ echo &#39;hello world&#39; &gt;&gt; read.me\n</code></pre>\n<hr>\n<h4 id=\"2-4-reading-files\">2.4 Reading files</h4>\n<p>There are many ways of reading the contents of a file without editor.</p>\n<hr>\n<h5 id=\"2-4-1-cat\">2.4.1 Cat</h5>\n<p>Cat  simply prints contents of one or more file.</p>\n<pre><code class=\"lang-bash\">$ cat read.me lisez.moi\n</code></pre>\n<hr>\n<h5 id=\"2-4-2-less\">2.4.2 Less</h5>\n<p>Less command is used to page through large files. It is also used by the <code>info</code> command that is used for reading manuals. By pressing the <code>space bar</code> to move forward and the <code>b</code> key to move backward the user can conveniently control pagination instead of reading just a portion of a text while the rest would be already gone. To quit press the &#39;q&#39; button. To search for a word type <code>/searchword</code> for searching forward and <code>?searchword</code> for searching backward.</p>\n<pre><code class=\"lang-bash\">$ less read.me\n</code></pre>\n<p>Less can also read input from piped stream:</p>\n<pre><code class=\"lang-bash\">$ ls -lah | less\n</code></pre>\n<hr>\n<h5 id=\"2-4-3-head-and-tail\">2.4.3 Head and Tail</h5>\n<p>Both commands show n number of lines from a file or input stream, as the name suggests, the head command shows the first n lines and the tail n last lines. Default num of lines is 10, change num by using the -n parameter.</p>\n<pre><code class=\"lang-bash\">head -n3 /etc/passwd\n##\n# User Database\n# \n\ntail /etc/passwd\n# ... will print the last 10 lines from the file.\n</code></pre>\n<hr>\n<h4 id=\"2-5-copying-moving-renaming-removing-files\">2.5 Copying, Moving, Renaming, Removing files</h4>\n<p>With all of the commands listed here, the file names or folder paths can be used as well as globs explained earlier.</p>\n<hr>\n<h5 id=\"2-5-1-copy-files-or-folders\">2.5.1 Copy files or folders</h5>\n<p>Copying file into another (cloning) with &#39;cp&#39; command:</p>\n<pre><code class=\"lang-bash\">$ cp read.me readme.txt\n</code></pre>\n<p>Copying to another folder:</p>\n<pre><code class=\"lang-bash\">$ cp file1...filen foldernameorpath\n</code></pre>\n<hr>\n<h5 id=\"2-5-2-move-files-or-directories\">2.5.2 Move files or directories</h5>\n<p>Renaming files with &#39;mv&#39; command:</p>\n<pre><code class=\"lang-bash\">$ mv read.me readme.txt\n</code></pre>\n<p>Moving files or directories to another places:</p>\n<pre><code class=\"lang-bash\">$ cp file1...filen foldernameorpath\n</code></pre>\n<hr>\n<h5 id=\"2-5-3-remove-files-or-directories\">2.5.3 Remove files or directories</h5>\n<p>Removing files with the &#39;rm&#39; command:</p>\n<pre><code class=\"lang-bash\">$ rm read.me\n</code></pre>\n<p>Removing directories with its contents that could be other directories and files is done with two parameters: <code>r</code> for recursive and <code>f</code> for forcing:</p>\n<pre><code class=\"lang-bash\">$ rm -rf myfolder\n</code></pre>\n<hr>\n<h4 id=\"2-6-navigating-directories\">2.6 Navigating directories</h4>\n<hr>\n<h5 id=\"2-6-1-print-current-working-directory\">2.6.1 Print current working directory</h5>\n<p>Use &#39;print working directory&#39; command:</p>\n<pre><code class=\"lang-bash\">$ pwd\n/Users/wojciechsierakowski/Documents\n</code></pre>\n<p>Use <code>-p</code> parameter to show the true full path with symbolic links. /*</p>\n<hr>\n<h5 id=\"2-6-2-change-current-working-directory\">2.6.2 Change current working directory</h5>\n<p>Unix directory hierarchy starts at the root directory marked as <code>/</code>. There are two type of paths describing location of files or folders:</p>\n<ul>\n<li>absolute - starting with slash: /etc/tmp</li>\n<li>relative from the current position in the hierarchy - without the slash: applications/program</li>\n</ul>\n<p>The single dot <code>.</code> refers to the current directory, if you are in the home/applications folders, then single dot refers to that folder. Most commands refer to the current folder anyway so this is not used very often.\nThe double dot <code>..</code> refers to the parent folder.</p>\n<p>Changing current directory to the root folder:</p>\n<pre><code class=\"lang-bash\">$ cd /\n</code></pre>\n<p>Changing current directory to the applications directory placed in the users&#39; home directory (<code>~</code> is a shortcut for home dir):</p>\n<pre><code class=\"lang-bash\">$ cd ~/home\n</code></pre>\n<hr>\n<h5 id=\"2-6-3-create-directory\">2.6.3 Create directory</h5>\n<pre><code class=\"lang-bash\">$ mkdir mydirectory\n</code></pre>\n<h5 id=\"2-6-4-remove-directory\">2.6.4 Remove directory</h5>\n<p>In most cases <code>rmdir</code> command is useless as if the directory contains files or subdirectories it will print the following error:</p>\n<pre><code class=\"lang-bash\">$ rmdir mydirectory\nrmdir: mydirectory: Directory not empty\n</code></pre>\n<p>Instead use the <code>rm</code> command with <code>-r</code> recursive parameters as described earlier.</p>\n<hr>\n<h4 id=\"2-7-more-advanced-file-commands\">2.7 More advanced file commands</h4>\n<hr>\n<h5 id=\"2-7-1-search-for-lines-in-files-containing-search-text\">2.7.1 Search for lines in files containing search text</h5>\n<p>The <code>grep</code> command prints the lines from file or files or input stream matching an expression. </p>\n<p>Printing lines containing word &#39;sigma&#39; in the dictionary file /usr/share/dict/words:</p>\n<pre><code class=\"lang-bash\">$ grep sigma /usr/share/dict/words\nsigma\nsigmaspire\nsigmate\nsigmatic\n</code></pre>\n<p>Printing lines containing word &#39;http&#39; in the /etc/apache2 .conf files:</p>\n<pre><code class=\"lang-bash\">$ grep server /etc/*.conf\n/etc/dnsextd.conf:// you could choose to allow anyone with a DNS key on your server to\n/etc/dnsextd.conf://    nameserver            address 127.0.0.1 port 5030;\n/etc/resolv.conf:nameserver 37.8.214.2\n</code></pre>\n<p>The results contain the files containing the searched keywords as well as the lines themselves.</p>\n<p>Most commonly used parameters are:</p>\n<ul>\n<li>/- v that inverts the search to display lines not matching</li>\n<li>/- i for case-insensitive matches</li>\n</ul>\n<p>Grep used with the <code>-E</code> options enables the powerful regular expressions search</p>\n<hr>\n<h5 id=\"2-7-2-getting-file-format-details\">2.7.2 Getting file format details</h5>\n<pre><code class=\"lang-bash\">$ file IMAG2674.jpeg \nIMAG2674.jpeg: JPEG image data, EXIF standard\n\n$ file NBp3Stories.xlsx \nNBp3Stories.xlsx: Zip archive data, at least v2.0 to extract\n</code></pre>\n<hr>\n<h5 id=\"2-7-3-file-difference\">2.7.3 File difference</h5>\n<p>The <code>find</code> commands shows differences between two files. </p>\n<p>For the following two files:</p>\n<pre><code class=\"lang-bash\">$ cat readme1.txt\nthis \nis \na sample\ntxt\nfile for showing differences\n\n$ cat readme2.txt\nthis is \nthe sample\ntext\nfile for showing differences\nin files\n</code></pre>\n<p>It will print the following output:</p>\n<pre><code class=\"lang-bash\">$ diff readme1.txt readme2.txt \n1,4c1,3\n&lt; this \n&lt; is \n&lt; a sample\n&lt; txt\n---\n&gt; this is \n&gt; the sample\n&gt; text\n5a5\n&gt; in files\n</code></pre>\n<p>Notice the differences are only included.</p>\n<p>Using the <code>-u</code> parameter prints the output in another format:</p>\n<pre><code class=\"lang-bash\">$ diff -u readme1.txt readme2.txt \n--- readme1.txt    2015-07-27 18:10:18.000000000 +0100\n+++ readme2.txt    2015-07-27 18:10:48.000000000 +0100\n@@ -1,5 +1,5 @@\n-this \n-is \n-a sample\n-txt\n+this is \n+the sample\n+text\n file for showing differences\n+in files\n</code></pre>\n<hr>\n<h5 id=\"2-7-4-finding-files-\">2.7.4 Finding files (*)</h5>\n<p>When using find&#39;s own pattern matching feature, wrap the search term in single quotes to prevent the shell from using its own globbing.</p>\n<pre><code class=\"lang-bash\">$ find dir -name file -print\n</code></pre>\n<p>An alternative to <code>find</code> is <code>locate</code> command, that uses the index that the operating system maintains and updates periodically. It is much faster than <code>find</code> but the results may not contain the files added recently.</p>\n<hr>\n<h5 id=\"2-7-5-sorting-lines\">2.7.5 Sorting lines</h5>\n<p>Sorting in numerical order with <code>-n</code>, reversing <code>-r</code>.</p>\n<hr>\n<h5 id=\"2-7-6-changing-file-permissions\">2.7.6 Changing file permissions</h5>\n<p>There are two main ways to change permission of a file with the <code>chmod</code> command.</p>\n<p>The first method is to add or remove specific permissions to specific group:</p>\n<ul>\n<li>u for owner</li>\n<li>g for group</li>\n<li>o for others </li>\n</ul>\n<pre><code class=\"lang-bash\"># Adding read permissions to the group\n$ chmod g+r file\n# Removing write permissions from the world/others\n$ chmod o-w file\n</code></pre>\n<p>Probably the more popular way to change permission is the absolute change by using numbers representing bits.\nFirst number represents user, second group, third others.\nDecimal representation represents 3 bits for read, write, execute: 4-2-1.</p>\n<p>If the owner should have execute access and no read or write only the last bit is turned on so the decimal value for 001 is 1. If write access should be enabled, only the first bit should be turned on 010 what gives 2 in decimal. For read, write and execute all bits should be enabled 111 what gives 7.</p>\n<pre><code class=\"lang-bash\"># Read, write, execute access for owner, read and write for group and read for others:\n$ chmod 764 filename\n\n# Read, write for owner, no rights for others\n$ chmod 400 filename\n</code></pre>\n<p>The shell default permissions are specified with the <code>umask</code> command, 022 means that all users will be able to see files and directories created by the user.</p>\n<pre><code class=\"lang-bash\">$ umask\n0022\n</code></pre>\n<hr>\n<h5 id=\"2-7-7-creating-symbolic-links\">2.7.7 Creating symbolic links</h5>\n<p>To create a file that points to another file like the shortcuts from M$ Windows use <code>ln</code> command with the <code>-s</code> parameter.</p>\n<pre><code class=\"lang-bash\">$ ln -s ~/projects/programs/ myprograms\n\n$ ls -lah\nlrwxr-xr-x   1 wsierakowski  staff    61B 28 Jul 11:21 myprograms -&gt; /Users/wsierakowski/projects/programs\n\n$ cat myprograms\ncat: myprograms: Is a directory\n</code></pre>\n<p>Notice that when trying to see the content of the symbolic link, the user is actually moved to the destination, in this case a directory. To view where the link points to use <code>ls -l</code>. If the symlink file is copied to another location, the path will become inaccurate and the link will not be pointing correctly to the target anymore.</p>\n<p>Use <code>ln</code> without the <code>-s</code> parameter to create hard links. (TBC)</p>\n<hr>\n<h3 id=\"3-other-basics\">3. Other basics</h3>\n<hr>\n<h4 id=\"3-1-getting-help\">3.1 Getting help</h4>\n<p>The most popular way for getting help is to use the manual pages <code>man</code> command.</p>\n<pre><code class=\"lang-bash\"># Finding documentation for the less command\n$ man less\n\n# Finding all documentation pages containing the keyword\n$ man -k less\nPPI::Token::End(3pm)     - Completely useless content after the _|_END_|_ tag\nless(1)                  - opposite of more\nless(3pm)                - perl pragma to request less of something\n</code></pre>\n<p>Right after the manual page name, there is a section number listed in the brackets. Also many books or internet sources refer to a section of man when talking about particular manual pages. The less command we use in terminal appear to be in the section one (1) in the results above. Here is the list of all manual sections:</p>\n<table>\n<thead>\n<tr>\n<th>Section</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>General commands</td>\n</tr>\n<tr>\n<td>2</td>\n<td>System calls</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Library functions, covering in particular the C standard library</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Special files (usually devices, those found in /dev) and drivers</td>\n</tr>\n<tr>\n<td>5</td>\n<td>File formats and conventions</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Games and screensavers</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Miscellanea</td>\n</tr>\n<tr>\n<td>8</td>\n<td>System administration commands and daemons</td>\n</tr>\n</tbody>\n</table>\n<p>Searching for help in a particular section:</p>\n<pre><code class=\"lang-bash\">$ man 1 less\n\n$ man 5 passwd\n</code></pre>\n<p>Alternative to the <code>man</code> command is the <code>info</code> command from the GNU project.</p>\n<hr>\n<h4 id=\"3-2-shell-and-environment-variables\">3.2 Shell and Environment variables</h4>\n<p>Variables are used to store string data to use them in scripts or to control the way how shell or some commands behave.</p>\n<p>Assigning to shell variable is done with the equal sign (no spaces around the sign), the variable can be accessed by using the dollar sign:</p>\n<pre><code class=\"lang-bash\">$ MYVAR=hello # define shell variable $MYVAR\n$ echo $MYVAR\nhello\n</code></pre>\n<p>In addition to shell variables, there are also environment variables. The main difference between them two is that an environment variable is a globally available, in a program and its child programs. A shell variable is only available in the current shell. To make a shell variable available as an environment variable, use <code>export VARNAME</code> (without dollar $).</p>\n<p>To list all environment variables, use <code>env</code> and to list all shell variables, use <code>set</code>.</p>\n<pre><code class=\"lang-bash\">$ MYVAR=hello # define shell variable $MYVAR\n$ echo $MYVAR\nhello\n$ env | grep MYVAR # note: no output\n$ export MYVAR # turn $MYVAR into an environment variable\n$ env | grep MYVAR\nMYVAR=hello\n</code></pre>\n<p>Another way to define an environment variable:</p>\n<pre><code class=\"lang-bash\">$ export MYVAR=hello\n$ echo $MYVAR\nhello\n$ env | grep MYVAR\nMYVAR=hello\n</code></pre>\n<p>Shell variable PS1 is used to define how the shell prompt looks like:</p>\n<pre><code class=\"lang-bash\">$ set | grep PS1\nPS1=&#39;\\h:\\W \\u\\$ &#39;\n</code></pre>\n<p>Environment variable LESS is used by the <code>less</code> command to set the default options. Man pages for commands contain section ENVIRONMENT VARIABLES describing what are the env variables that can be used for that purpose.</p>\n<p>Some of the <code>shell variables</code> evaluate to data that may come useful:</p>\n<ul>\n<li>$$ gives current shell process PID</li>\n</ul>\n<hr>\n<h4 id=\"3-3-command-path\">3.3 Command path</h4>\n<p>There is a special environment variable dedicated to keep a list of system directories that the shell use when trying for locate commands. When the user runs any program from the terminal, the shell will check the <code>PATH</code> variable first and only if the command is not found in the locations listed there, it will search for the command in the current working directory.</p>\n<pre><code class=\"lang-bash\">$ echo $PATH\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin\n\n$ env | grep PATH\nPATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin\n</code></pre>\n<p>If the shell locates the command in one of the locations, it will not search others.</p>\n<p>To add a new directory to the existing <code>PATH</code> variable, append it to the beginning if you want that location to be searched first or to the end if you want that location to be searched last by using the colon sign. The changes aren&#39;t permanent since opening new shell will use the default <code>PATH</code> variable.</p>\n<pre><code class=\"lang-bash\"># add mypath to the beginning\n$ PATH=mypath:$PATH\n\n# add mypath to the end\n$ PATH=$PATH:mypath\n</code></pre>\n<hr>\n<h4 id=\"3-4-redirecting-and-piping-input-and-output\">3.4 Redirecting and piping input and output</h4>\n<p>To send the output of any command to a file instead of terminal use the single or double redirections <code>&gt;</code>, <code>&gt;&gt;</code>. Single overwrites a file if it already exists and double appends to it.</p>\n<pre><code class=\"lang-bash\">$ ls &gt; lsoutput.txt\n$ ls &gt;&gt; lsoutput.txt\n</code></pre>\n<p>To send output from one command to another use the pipe character <code>|</code>. </p>\n<pre><code class=\"lang-bash\">$ grep https /etc/* | wc\n</code></pre>\n<p>To redirect also standard error in addition to standard output use the <code>2&gt;</code> redirection where 2 is the streamID of the standard error, and 1 is streamID of the standard out.</p>\n<pre><code class=\"lang-bash\">$ ls nonexistantpath &gt; stdout.txt\nls: nonexistantpath: No such file or directory\n\n$ ls nonexistantpath &gt; stdout.txt 2&gt; stderr.txt\n</code></pre>\n<p>In the first case the error was printed as stderr was printed to the terminal, in the second case the same error message got printed to the stderr.txt file.</p>\n<p>Saving both outputs to the same file:</p>\n<pre><code class=\"lang-bash\">$ ls nonexistantpath &gt; out.txt 2&gt;&amp;1\n</code></pre>\n<p>To redirect the input use the <code>&lt;</code> operator. It is not common to use input redirection as most of the commands accept path to a file as one of the arguments.</p>\n<pre><code class=\"lang-bash\"># both do the same\n\n$ cat &lt; /etc/passwd\n\n$ cat /etc/passwd\n</code></pre>\n<hr>\n<h4 id=\"3-5-controlling-processes\">3.5 Controlling processes</h4>\n<hr>\n<h5 id=\"3-5-1-listing-processes\">3.5.1 Listing processes</h5>\n<p>To get a list of running processes with their details such as:</p>\n<ul>\n<li>process IDs (PID) </li>\n<li>terminal device they are running in (TTY)</li>\n<li>process status (STAT)</li>\n<li>amount of CPU time a process used (TIME)</li>\n<li>command</li>\n</ul>\n<p>use the <code>ps</code> command:</p>\n<pre><code class=\"lang-bash\">  PID TTY           TIME CMD\n  507 ttys003    0:00.12 -bash\n28893 ttys005    0:00.04 -bash\n38675 ttys005    0:00.40 mongo\n</code></pre>\n<p>Often used parameters:</p>\n<ul>\n<li><code>x</code> to show all running processes for the user calling the command</li>\n<li><code>ax</code> to show all running process for all users</li>\n<li><code>u</code> to include more detailed information</li>\n<li><code>w</code> to show full names for commands</li>\n</ul>\n<p>Most often the <code>ps</code> command is used with <code>aux</code> parameter and it&#39;s output is redirected to <code>grep</code> to find a particular process by name: </p>\n<pre><code class=\"lang-bash\">$ ps aux | grep apache\n</code></pre>\n<hr>\n<h5 id=\"3-5-2-terminating-and-killing-processes\">3.5.2 Terminating and killing processes</h5>\n<p>Using the <code>kill</code> command, the user can send a signal to the process with certain <code>PID</code>. There are many type of signals:</p>\n<ul>\n<li>TERM used by default by the <code>kill</code> command to terminate a process</li>\n<li>STOP to freeze</li>\n<li>CONT to resume STOPped process</li>\n<li>KILL (9) to kill a process</li>\n</ul>\n<pre><code class=\"lang-bash\">$ kill pid\n\n# same as above:\n$ kill -TERM pid\n\n# immediately kill:\n$ kill -9 pid\n# or:\n$ kill -KILL pid\n</code></pre>\n<p>Both numbers and names of signals are accepted.</p>\n<p>The KILL (9) signal should be used with caution as it is the only signal that immediately stops the process and removes it from the memory without giving time to remove temporary files or do other maintenance job. Processes usually wait for signals and in case of receiving TERM in example, they perform some ending task before closing.</p>\n<p>Using CTRL+C while a process is running in the terminal is equivalent to sending INT signal.</p>\n<hr>\n<h5 id=\"3-5-3-running-processes-in-background\">3.5.3 Running processes in background</h5>\n<p>To detach process from the shell to get back control over it we can put a process in the background by using ampersand. This is usually done for the processes that will take significant amount of time to complete their work like compressing a file. The process will also continue to run after logging out or closing the terminal window. To avoid random stdout text from the processes run in background, redirect their output to a file.</p>\n<pre><code class=\"lang-bash\">$ tar cvf arch.tar myfiles &amp;\n[1] 50845\n</code></pre>\n<p>The shell returns PID of the process and returns the prompt.</p>\n<p>Use <code>fg</code> to bring the process back.</p>\n",
            "md": "[(!) Article updated on 21/11/2011.]\r\n\r\n### 1. Intro\r\nThe prompt usually ends with the dollar sign ($), in example `username@hostname:path$`.\r\n\r\nIf you want to use multiple parameters, add them one by one, in example instead of running `ls -l -a -h`, run `ls -lah`.\r\n\r\nSingle letter parameters are passed after single dash, word parameters are passed after two dashed, in example ls `-r` or `ls --reverse'\r\n\r\n### 2. Operations on files and directories\r\n---\r\n#### 2.1 Using wildcards (shell globbing)\r\nGlobing is the ability of the shell to match patterns to file and directory names. When glob is found as parameter to any command, the shell \"expands\" it and returns the filenames that match the pattern. If no files match glob, the shell returns the pattern itself to the command where the glob is used. Globbing is done before executing the command. The two most popular glob characters are `*` that matches any number or characters and `?` that matches one arbitrary character. To not use globbing, the pattern needs to be wrapped in single quotes. The best way to practice globs is by using the echo command, that is used to print its arguments as standard output:\r\n```bash\r\n$ echo *\r\nafpovertcp.cfg aliases aliases.db apache2 asl asl.conf\r\n\r\n$ echo *ap\r\nopenldap\r\n\r\n$ echo ap*\r\napache2\r\n\r\n$ echo *ap*\r\napache2 com.apple.screensharing.agent.launchd openldap\r\n\r\n$ echo *ap?che*\r\napache2\r\n\r\n$ echo '*ap?che*'\r\n*ap?che*\r\n```\r\n\r\n---\r\n#### 2.2 ls\r\n\r\nLists directory contests, by default in the current directory.\r\n\r\nRunning without params:\r\n```bash\r\n$ ls\r\napi\t\t\targumentsProcessor.js\tconfig.js\t\tentities\t\tmaps\t\t\t\r\n```\r\n\r\nUsually I want to know the detailed description so I use the following additional parameters:\r\n* -l for long description\r\n* -a for displaying also hidden files (beginning with dot)\r\n* -h for displaying file sized in human readable format (shortened)\r\n\r\n```bash\r\n$ ls -lah\r\ntotal 128\r\ndrwxr-xr-x  17 wojsierak  staff   578B  9 Jul 12:05 .\r\ndrwxr-xr-x  13 wojsierak  staff   442B 29 Jun 11:44 ..\r\n-rw-r--r--@  1 wojsierak  staff   6.0K 27 May 20:32 .DS_Store\r\ndrwxr-xr-x  14 wojsierak  staff   476B 29 Jun 11:44 api\r\n-rw-r--r--   1 wojsierak  staff   3.1K  6 Feb 16:03 argumentsMapper.js\r\n-rw-r--r--   1 wojsierak  staff   4.1K 21 Nov  2011 argumentsProcessor.js\r\n```\r\n\r\nRunning ls in another directory:\r\n```bash\r\n$ ls -lah /etc\r\n```\r\n\r\nOther useful parameters:\r\n* -d: list only directories \r\n* -I, --ignore: lists files not matching pattern, in example `ls --ignore='a*' would exclude files starting from letter 'a'.\r\n* -R, --recursive: prints also content of subdirectories.\r\n\r\nSorting options:\r\n* -r, --reverse: sorts files in the reverse order.\r\n* -S, --sort=size\r\n* -t, --sort=time: sorts by last modification time\r\n* -u, --time=access: sorts by last access time\r\n* -X, --sort=extension: sorts by extension names\r\n\r\nColumns explanation:\r\n```\r\n1:            2: 3:       4:    5:      6:           7:\r\ndrwxr-xr-x    14 wsierak  staff 476B    29 Jun 11:44 api\r\n\r\n?UUUGGGOOO    00  UUUUUU GGGGGG ####    ^-- date stamp and file name\r\n^ ^  ^  ^      ^      ^      ^    ^\r\n| |  |  |      |      |      |    \\--- File Size\r\n| |  |  |      |      |      \\-------- Group Name (for example, Users, Administrators, etc)\r\n| |  |  |      |      \\--------------- Owner\r\n| |  |  |      \\---------------------- Links count \r\n| \\--\\--\\----------------------------- Read, Write and Special access modes for [U]ser, [G]roup, and [O]thers (everyone else)\r\n\\------------------------------------- File type flag\r\n```\r\n\r\n**Type and access:**\r\n\r\nThere are four parts that make this column.\r\n```\r\n| File |     Permissions      |\r\n| Type | User | Group | Other |\r\n-------------------------------\r\n   d     rwx     r-x     r-x \r\n```\r\nFile type:\r\n* \\- (dash): regular file\r\n* d: directories\r\n* l: symlink (symbolic link)\r\nLess common:\r\n* p: pipe\r\n* s: socket\r\n\r\nThe permission sets are as follows:\r\n* user: the user who owns the file\r\n* group: the group a file belongs to, any user in that group takes advantage of these permissions\r\n* other: everyone else in the system\r\n\r\nPermissions types:\r\n* r: read contents of file or read the contents of directory (view files and sub-directories in that directory) \r\n* w: write to a file or writ to the directory (create files and sub-directories in that directory)\r\n* x: execute programs or scripts for the files or enter into the directory\r\n* \\-: no permission\r\n\r\nExamples:\r\n* `-r-x------` means that the file can be only read and executed but not written to only by an owner\r\n* `drwxr-xr-x` means the file is directory, can be read, written to and content can be accessed by the owner and can be read and accessed by users in a group and other users in the system\r\n\r\n---\r\n#### 2.3 Creating files\r\nThere are many ways to create a new file directly from the command line without using any text editor. \r\n\r\n---\r\n##### 2.3.1 Touch\r\nThe simplest way is by using the `touch` command that is used to update the modification time stamp, however when the file doesn't exist, it will create an empty one.\r\n\r\n```bash\r\n$ touch read.me\r\n```\r\n\r\n---\r\n#### 2.3.2 Standard output from another command\r\nStandard input and output are also called streams. Processes read and write commands from them. To send output of any command to a file instead of terminal use the redirection in one of the two following forms:\r\n\r\nBelow will create a new file or overwrite an existing file\r\n```bash\r\n$ echo 'hello world' > read.me\r\n```\r\n\r\nBelow will create a new file or append to an existing file\r\n```bash\r\n$ echo 'hello world' >> read.me\r\n```\r\n\r\n---\r\n#### 2.4 Reading files\r\nThere are many ways of reading the contents of a file without editor.\r\n\r\n---\r\n##### 2.4.1 Cat\r\nCat  simply prints contents of one or more file.\r\n\r\n```bash\r\n$ cat read.me lisez.moi\r\n```\r\n\r\n---\r\n##### 2.4.2 Less\r\nLess command is used to page through large files. It is also used by the `info` command that is used for reading manuals. By pressing the `space bar` to move forward and the `b` key to move backward the user can conveniently control pagination instead of reading just a portion of a text while the rest would be already gone. To quit press the 'q' button. To search for a word type `/searchword` for searching forward and `?searchword` for searching backward.\r\n\r\n```bash\r\n$ less read.me\r\n```\r\n\r\nLess can also read input from piped stream:\r\n```bash\r\n$ ls -lah | less\r\n```\r\n\r\n---\r\n##### 2.4.3 Head and Tail\r\nBoth commands show n number of lines from a file or input stream, as the name suggests, the head command shows the first n lines and the tail n last lines. Default num of lines is 10, change num by using the -n parameter.\r\n\r\n```bash\r\nhead -n3 /etc/passwd\r\n##\r\n# User Database\r\n# \r\n\r\ntail /etc/passwd\r\n# ... will print the last 10 lines from the file.\r\n\r\n```\r\n\r\n---\r\n#### 2.5 Copying, Moving, Renaming, Removing files\r\n\r\nWith all of the commands listed here, the file names or folder paths can be used as well as globs explained earlier.\r\n\r\n---\r\n##### 2.5.1 Copy files or folders\r\n\r\nCopying file into another (cloning) with 'cp' command:\r\n```bash\r\n$ cp read.me readme.txt\r\n```\r\n\r\nCopying to another folder:\r\n```bash\r\n$ cp file1...filen foldernameorpath\r\n```\r\n\r\n---\r\n##### 2.5.2 Move files or directories\r\n\r\nRenaming files with 'mv' command:\r\n```bash\r\n$ mv read.me readme.txt\r\n```\r\n\r\nMoving files or directories to another places:\r\n```bash\r\n$ cp file1...filen foldernameorpath\r\n```\r\n\r\n---\r\n##### 2.5.3 Remove files or directories\r\n\r\nRemoving files with the 'rm' command:\r\n\r\n```bash\r\n$ rm read.me\r\n```\r\n\r\nRemoving directories with its contents that could be other directories and files is done with two parameters: `r` for recursive and `f` for forcing:\r\n```bash\r\n$ rm -rf myfolder\r\n```\r\n\r\n---\r\n#### 2.6 Navigating directories\r\n\r\n---\r\n##### 2.6.1 Print current working directory\r\nUse 'print working directory' command:\r\n\r\n```bash\r\n$ pwd\r\n/Users/wojciechsierakowski/Documents\r\n```\r\n\r\nUse `-p` parameter to show the true full path with symbolic links. /*\r\n\r\n---\r\n##### 2.6.2 Change current working directory\r\n\r\nUnix directory hierarchy starts at the root directory marked as `/`. There are two type of paths describing location of files or folders:\r\n* absolute - starting with slash: /etc/tmp\r\n* relative from the current position in the hierarchy - without the slash: applications/program\r\n\r\nThe single dot `.` refers to the current directory, if you are in the home/applications folders, then single dot refers to that folder. Most commands refer to the current folder anyway so this is not used very often.\r\nThe double dot `..` refers to the parent folder.\r\n\r\nChanging current directory to the root folder:\r\n```bash\r\n$ cd /\r\n```\r\n\r\nChanging current directory to the applications directory placed in the users' home directory (`~` is a shortcut for home dir):\r\n```bash\r\n$ cd ~/home\r\n```\r\n\r\n---\r\n##### 2.6.3 Create directory\r\n\r\n```bash\r\n$ mkdir mydirectory\r\n```\r\n\r\n##### 2.6.4 Remove directory\r\n\r\nIn most cases `rmdir` command is useless as if the directory contains files or subdirectories it will print the following error:\r\n\r\n```bash\r\n$ rmdir mydirectory\r\nrmdir: mydirectory: Directory not empty\r\n```\r\n\r\nInstead use the `rm` command with `-r` recursive parameters as described earlier.\r\n\r\n---\r\n#### 2.7 More advanced file commands\r\n\r\n---\r\n##### 2.7.1 Search for lines in files containing search text\r\n\r\nThe `grep` command prints the lines from file or files or input stream matching an expression. \r\n\r\nPrinting lines containing word 'sigma' in the dictionary file /usr/share/dict/words:\r\n```bash\r\n$ grep sigma /usr/share/dict/words\r\nsigma\r\nsigmaspire\r\nsigmate\r\nsigmatic\r\n```\r\n\r\nPrinting lines containing word 'http' in the /etc/apache2 .conf files:\r\n```bash\r\n$ grep server /etc/*.conf\r\n/etc/dnsextd.conf:// you could choose to allow anyone with a DNS key on your server to\r\n/etc/dnsextd.conf://\tnameserver\t\t\taddress 127.0.0.1 port 5030;\r\n/etc/resolv.conf:nameserver 37.8.214.2\r\n```\r\n\r\nThe results contain the files containing the searched keywords as well as the lines themselves.\r\n\r\nMost commonly used parameters are:\r\n* /- v that inverts the search to display lines not matching\r\n* /- i for case-insensitive matches\r\n\r\nGrep used with the `-E` options enables the powerful regular expressions search\r\n\r\n---\r\n##### 2.7.2 Getting file format details\r\n```bash\r\n$ file IMAG2674.jpeg \r\nIMAG2674.jpeg: JPEG image data, EXIF standard\r\n\r\n$ file NBp3Stories.xlsx \r\nNBp3Stories.xlsx: Zip archive data, at least v2.0 to extract\r\n```\r\n\r\n---\r\n##### 2.7.3 File difference\r\n\r\nThe `find` commands shows differences between two files. \r\n\r\nFor the following two files:\r\n```bash\r\n$ cat readme1.txt\r\nthis \r\nis \r\na sample\r\ntxt\r\nfile for showing differences\r\n\r\n$ cat readme2.txt\r\nthis is \r\nthe sample\r\ntext\r\nfile for showing differences\r\nin files\r\n\r\n```\r\n\r\nIt will print the following output:\r\n```bash\r\n$ diff readme1.txt readme2.txt \r\n1,4c1,3\r\n< this \r\n< is \r\n< a sample\r\n< txt\r\n---\r\n> this is \r\n> the sample\r\n> text\r\n5a5\r\n> in files\r\n```\r\n\r\nNotice the differences are only included.\r\n\r\nUsing the `-u` parameter prints the output in another format:\r\n```bash\r\n$ diff -u readme1.txt readme2.txt \r\n--- readme1.txt\t2015-07-27 18:10:18.000000000 +0100\r\n+++ readme2.txt\t2015-07-27 18:10:48.000000000 +0100\r\n@@ -1,5 +1,5 @@\r\n-this \r\n-is \r\n-a sample\r\n-txt\r\n+this is \r\n+the sample\r\n+text\r\n file for showing differences\r\n+in files\r\n```\r\n\r\n---\r\n##### 2.7.4 Finding files (*)\r\nWhen using find's own pattern matching feature, wrap the search term in single quotes to prevent the shell from using its own globbing.\r\n```bash\r\n$ find dir -name file -print\r\n```\r\nAn alternative to `find` is `locate` command, that uses the index that the operating system maintains and updates periodically. It is much faster than `find` but the results may not contain the files added recently.\r\n\r\n---\r\n##### 2.7.5 Sorting lines\r\nSorting in numerical order with `-n`, reversing `-r`.\r\n\r\n---\r\n##### 2.7.6 Changing file permissions\r\n\r\nThere are two main ways to change permission of a file with the `chmod` command.\r\n\r\nThe first method is to add or remove specific permissions to specific group:\r\n* u for owner\r\n* g for group\r\n* o for others \r\n\r\n```bash\r\n# Adding read permissions to the group\r\n$ chmod g+r file\r\n# Removing write permissions from the world/others\r\n$ chmod o-w file\r\n```\r\n\r\nProbably the more popular way to change permission is the absolute change by using numbers representing bits.\r\nFirst number represents user, second group, third others.\r\nDecimal representation represents 3 bits for read, write, execute: 4-2-1.\r\n\r\nIf the owner should have execute access and no read or write only the last bit is turned on so the decimal value for 001 is 1. If write access should be enabled, only the first bit should be turned on 010 what gives 2 in decimal. For read, write and execute all bits should be enabled 111 what gives 7.\r\n\r\n```bash\r\n# Read, write, execute access for owner, read and write for group and read for others:\r\n$ chmod 764 filename\r\n\r\n# Read, write for owner, no rights for others\r\n$ chmod 400 filename\r\n```\r\n\r\nThe shell default permissions are specified with the `umask` command, 022 means that all users will be able to see files and directories created by the user.\r\n\r\n```bash\r\n$ umask\r\n0022\r\n```\r\n\r\n---\r\n##### 2.7.7 Creating symbolic links\r\n\r\nTo create a file that points to another file like the shortcuts from M$ Windows use `ln` command with the `-s` parameter.\r\n\r\n```bash\r\n$ ln -s ~/projects/programs/ myprograms\r\n\r\n$ ls -lah\r\nlrwxr-xr-x   1 wsierakowski  staff    61B 28 Jul 11:21 myprograms -> /Users/wsierakowski/projects/programs\r\n\r\n$ cat myprograms\r\ncat: myprograms: Is a directory\r\n```\r\n\r\nNotice that when trying to see the content of the symbolic link, the user is actually moved to the destination, in this case a directory. To view where the link points to use `ls -l`. If the symlink file is copied to another location, the path will become inaccurate and the link will not be pointing correctly to the target anymore.\r\n\r\nUse `ln` without the `-s` parameter to create hard links. (TBC)\r\n\r\n---\r\n### 3. Other basics\r\n\r\n---\r\n#### 3.1 Getting help\r\n\r\nThe most popular way for getting help is to use the manual pages `man` command.\r\n\r\n```bash\r\n# Finding documentation for the less command\r\n$ man less\r\n\r\n# Finding all documentation pages containing the keyword\r\n$ man -k less\r\nPPI::Token::End(3pm)     - Completely useless content after the _|_END_|_ tag\r\nless(1)                  - opposite of more\r\nless(3pm)                - perl pragma to request less of something\r\n```\r\n\r\nRight after the manual page name, there is a section number listed in the brackets. Also many books or internet sources refer to a section of man when talking about particular manual pages. The less command we use in terminal appear to be in the section one (1) in the results above. Here is the list of all manual sections:\r\n\r\n|Section|Description|\r\n|-------|-----------|\r\n|1|General commands|\r\n|2|System calls|\r\n|3|Library functions, covering in particular the C standard library|\r\n|4|Special files (usually devices, those found in /dev) and drivers|\r\n|5|File formats and conventions|\r\n|6|Games and screensavers|\r\n|7|Miscellanea|\r\n|8|System administration commands and daemons|\r\n\r\n\r\nSearching for help in a particular section:\r\n\r\n```bash\r\n$ man 1 less\r\n\r\n$ man 5 passwd\r\n```\r\n\r\nAlternative to the `man` command is the `info` command from the GNU project.\r\n\r\n---\r\n#### 3.2 Shell and Environment variables\r\n\r\nVariables are used to store string data to use them in scripts or to control the way how shell or some commands behave.\r\n\r\nAssigning to shell variable is done with the equal sign (no spaces around the sign), the variable can be accessed by using the dollar sign:\r\n```bash\r\n$ MYVAR=hello # define shell variable $MYVAR\r\n$ echo $MYVAR\r\nhello\r\n```\r\nIn addition to shell variables, there are also environment variables. The main difference between them two is that an environment variable is a globally available, in a program and its child programs. A shell variable is only available in the current shell. To make a shell variable available as an environment variable, use `export VARNAME` (without dollar $).\r\n\r\nTo list all environment variables, use `env` and to list all shell variables, use `set`.\r\n\r\n```bash\r\n$ MYVAR=hello # define shell variable $MYVAR\r\n$ echo $MYVAR\r\nhello\r\n$ env | grep MYVAR # note: no output\r\n$ export MYVAR # turn $MYVAR into an environment variable\r\n$ env | grep MYVAR\r\nMYVAR=hello\r\n```\r\n\r\nAnother way to define an environment variable:\r\n\r\n```bash\r\n$ export MYVAR=hello\r\n$ echo $MYVAR\r\nhello\r\n$ env | grep MYVAR\r\nMYVAR=hello\r\n```\r\n\r\nShell variable PS1 is used to define how the shell prompt looks like:\r\n```bash\r\n$ set | grep PS1\r\nPS1='\\h:\\W \\u\\$ '\r\n```\r\n\r\nEnvironment variable LESS is used by the `less` command to set the default options. Man pages for commands contain section ENVIRONMENT VARIABLES describing what are the env variables that can be used for that purpose.\r\n\r\nSome of the `shell variables` evaluate to data that may come useful:\r\n* $$ gives current shell process PID\r\n\r\n---\r\n#### 3.3 Command path\r\n\r\nThere is a special environment variable dedicated to keep a list of system directories that the shell use when trying for locate commands. When the user runs any program from the terminal, the shell will check the `PATH` variable first and only if the command is not found in the locations listed there, it will search for the command in the current working directory.\r\n\r\n```bash\r\n$ echo $PATH\r\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin\r\n\r\n$ env | grep PATH\r\nPATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin\r\n```\r\n\r\nIf the shell locates the command in one of the locations, it will not search others.\r\n\r\nTo add a new directory to the existing `PATH` variable, append it to the beginning if you want that location to be searched first or to the end if you want that location to be searched last by using the colon sign. The changes aren't permanent since opening new shell will use the default `PATH` variable.\r\n\r\n```bash\r\n# add mypath to the beginning\r\n$ PATH=mypath:$PATH\r\n\r\n# add mypath to the end\r\n$ PATH=$PATH:mypath\r\n```\r\n\r\n---\r\n#### 3.4 Redirecting and piping input and output\r\n\r\nTo send the output of any command to a file instead of terminal use the single or double redirections `>`, `>>`. Single overwrites a file if it already exists and double appends to it.\r\n\r\n```bash\r\n$ ls > lsoutput.txt\r\n$ ls >> lsoutput.txt\r\n```\r\n\r\nTo send output from one command to another use the pipe character `|`. \r\n```bash\r\n$ grep https /etc/* | wc\r\n```\r\n\r\nTo redirect also standard error in addition to standard output use the `2>` redirection where 2 is the streamID of the standard error, and 1 is streamID of the standard out.\r\n\r\n```bash\r\n$ ls nonexistantpath > stdout.txt\r\nls: nonexistantpath: No such file or directory\r\n\r\n$ ls nonexistantpath > stdout.txt 2> stderr.txt\r\n```\r\n\r\nIn the first case the error was printed as stderr was printed to the terminal, in the second case the same error message got printed to the stderr.txt file.\r\n\r\nSaving both outputs to the same file:\r\n```bash\r\n$ ls nonexistantpath > out.txt 2>&1\r\n```\r\n\r\nTo redirect the input use the `<` operator. It is not common to use input redirection as most of the commands accept path to a file as one of the arguments.\r\n\r\n```bash\r\n# both do the same\r\n\r\n$ cat < /etc/passwd\r\n\r\n$ cat /etc/passwd\r\n```\r\n\r\n---\r\n#### 3.5 Controlling processes\r\n\r\n---\r\n##### 3.5.1 Listing processes\r\n\r\nTo get a list of running processes with their details such as:\r\n* process IDs (PID) \r\n* terminal device they are running in (TTY)\r\n* process status (STAT)\r\n* amount of CPU time a process used (TIME)\r\n* command\r\n\r\nuse the `ps` command:\r\n```bash\r\n  PID TTY           TIME CMD\r\n  507 ttys003    0:00.12 -bash\r\n28893 ttys005    0:00.04 -bash\r\n38675 ttys005    0:00.40 mongo\r\n```\r\n\r\nOften used parameters:\r\n* `x` to show all running processes for the user calling the command\r\n* `ax` to show all running process for all users\r\n* `u` to include more detailed information\r\n* `w` to show full names for commands\r\n\r\nMost often the `ps` command is used with `aux` parameter and it's output is redirected to `grep` to find a particular process by name: \r\n```bash\r\n$ ps aux | grep apache\r\n```\r\n\r\n---\r\n##### 3.5.2 Terminating and killing processes\r\n\r\nUsing the `kill` command, the user can send a signal to the process with certain `PID`. There are many type of signals:\r\n* TERM used by default by the `kill` command to terminate a process\r\n* STOP to freeze\r\n* CONT to resume STOPped process\r\n* KILL (9) to kill a process\r\n\r\n```bash\r\n$ kill pid\r\n\r\n# same as above:\r\n$ kill -TERM pid\r\n\r\n# immediately kill:\r\n$ kill -9 pid\r\n# or:\r\n$ kill -KILL pid\r\n```\r\n\r\nBoth numbers and names of signals are accepted.\r\n\r\nThe KILL (9) signal should be used with caution as it is the only signal that immediately stops the process and removes it from the memory without giving time to remove temporary files or do other maintenance job. Processes usually wait for signals and in case of receiving TERM in example, they perform some ending task before closing.\r\n\r\nUsing CTRL+C while a process is running in the terminal is equivalent to sending INT signal.\r\n\r\n---\r\n##### 3.5.3 Running processes in background\r\n\r\nTo detach process from the shell to get back control over it we can put a process in the background by using ampersand. This is usually done for the processes that will take significant amount of time to complete their work like compressing a file. The process will also continue to run after logging out or closing the terminal window. To avoid random stdout text from the processes run in background, redirect their output to a file.\r\n\r\n```bash\r\n$ tar cvf arch.tar myfiles &\r\n[1] 50845\r\n```\r\n\r\nThe shell returns PID of the process and returns the prompt.\r\n\r\nUse `fg` to bring the process back."
        },
        "extendedType": "markdown"
    },
    "hits": 1873,
    "publishedDate": {
        "$date": "2008-12-03T00:00:00.000+0000"
    },
    "slug": "linux-basics",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc39"
    }],
    "title": "Linux basics"
} {
    "_id": {
        "$oid": "56e6869b2f838cec6e553b3d"
    },
    "__v": 3,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc34"
    }],
    "content": {
        "brief": "<p>Regular expressions are patterns that can be matched against strings. They are used in many different situations and places. Most commonly regex come handy when doing operations on multiple files or working&nbsp;with&nbsp;strings like extracting specific values, validating forms, removing or replacing certain patterns like markup, splitting strings.</p>",
        "extendedHTML": "<p>bla bla bla</p>\r\n<p><a title=\"Regex Tester\" href=\"../../apps/regextester/?intxt=jestem%0Awielkim%20%0Agrzybem\" target=\"_blank\">Run Regex Tester</a></p>\r\n<p>blabla bla</p>",
        "extendedJade": "h3 this is some title\r\np.\r\n   This is some fancy text here\r\na(href=myUtils.encodeURL(\"what is the matter\")= grzyb",
        "extendedMarkdown": {
            "html": "<hr>\n<p><em>Update 20160311: This article originally had been written for ActionScript and in this update all examples have been updated to use JavaScript code. In addition RegexTester app has been included to better visualise the examples.</em></p>\n<hr>\n<p>There are two aspects to learn in order to effectively use regular expressions. We need to understand the basics of regular expressions themselves and we need to understand how to use them in code.</p>\n<h3 id=\"1-creating-regular-expression\">1. Creating regular expression</h3>\n<p>In order to create a regular expression we need to provide the pattern and set of flags. The pattern usually consists of characters (interpreted literally), metacharacters (like any character) and metasequences (special commands like \\b matching word boundary). Flags define how regular expression engine should execute the pattern.</p>\n<p>Regex can be created with the RegExp class constructor:</p>\n<pre><code class=\"lang-js\">// RegExp(pattern, flags)\nvar findHellos = new RegExp(&quot;hello&quot;, &quot;gim&quot;);\n</code></pre>\n<p>or as the regular expression literal by wrapping the pattern between two forward slashes and providing flags right after the ending slash:</p>\n<pre><code class=\"lang-js\">// /pattern/flags\nvar findHellos = /hello/gim;\n</code></pre>\n<p>The regex constructor is compiled on runtime and it makes most sense to use it when the regex pattern is dynamic, for example when it depends on the user input or is loaded from an external source.</p>\n<p>The regex literal is compiled when the script is loaded, therefore it has better performance. This form should be used when the regex isn&#39;t changing and is constant.</p>\n<p>The following flags can be provided:</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Flag</th>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:left\">Meaning</th>\n<th style=\"text-align:left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">g</td>\n<td style=\"text-align:left\">global</td>\n<td style=\"text-align:left\">Global search - matches more than one match</td>\n<td style=\"text-align:left\">/hello/g matches all g&#39;s in the string, not only the first one. Regex must be run in the loop in order to get all matches.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">i</td>\n<td style=\"text-align:left\">ignore case</td>\n<td style=\"text-align:left\">Case insensitive match</td>\n<td style=\"text-align:left\">/helloHELLO/gi marks both</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m</td>\n<td style=\"text-align:left\">multiline</td>\n<td style=\"text-align:left\">The start (^) and end ($) of string will match start and end of line.</td>\n<td style=\"text-align:left\">/^hello/gm will match hello and \\nhello (hello on the second line)</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>There are more flags then this, for example x (extended) to allow spaces for better readiness or s (dot all) to allow the any character (.) match new lines as well.</p>\n<h3 id=\"2-methods-using-regular-expressions\">2. Methods using regular expressions</h3>\n<p>Regular expressions can be used with methods available on the regex object by applying string or on the string object by applying regex.</p>\n<p><strong>RegExp.test</strong> Tests for a match in a string. Returns Boolean.</p>\n<pre><code class=\"lang-js\">var re = /bam/gi;\nvar tx = &#39;bimbambombimbambom&#39;;\nre.test(tx);\n// true\n</code></pre>\n<p><strong>String.search</strong> Tests for a match in a string. Returns index of a match. Finds only the first match.</p>\n<pre><code class=\"lang-js\">var re = /bam/gi;\nvar tx = &#39;bimbambombimbambom&#39;;\ntx.search(re);\n// 3\ntx.search(re);\n// 3\n</code></pre>\n<p><strong>String.replace</strong> Searches matches in a string and replaces them with a replacement string provided. The replacement string also can take special replacement codes that can make use of extracted pieces. Returns modifies string.</p>\n<pre><code class=\"lang-js\">var re = /bam/gi;\nvar tx = &#39;bimbambombimbambom&#39;;\ntx.replace(re, &#39;___&#39;);\n// &quot;bim___bombim___bom&quot;\n</code></pre>\n<p><strong>String.split</strong> Searches matches in a string and use them to split it into array of substrings. Returns an array of substrings. </p>\n<pre><code class=\"lang-js\">var re = /bam/gi;\nvar tx = &#39;bimbambombimbambom&#39;;\ntx.split(re);\n// [&quot;bim&quot;, &quot;bombim&quot;, &quot;bom&quot;]\n</code></pre>\n<p><strong>RegExp.exec / String.match</strong> Searches matches in a string. Returns an array with results including index information and captured extractions or null when there is no match.</p>\n<pre><code class=\"lang-js\">var re = /bam/gi;\nvar tx = &#39;bimbambombimbambom&#39;;\n\nre.exec(tx);\n// [&quot;bam&quot;] \nre.exec(tx);\n// [&quot;bam&quot;]\nre.exec(tx);\n// null\n</code></pre>\n<pre><code class=\"lang-js\">var re = /bam/gi;\nvar tx = &#39;bimbambombimbambom&#39;;\n\ntx.match(re)\n[&quot;bam&quot;, &quot;bam&quot;]\n\nconsole.log(tx.match(re))\nconsole.log(re.lastIndex);\n// [&quot;bam&quot;, &quot;bam&quot;]\n// 0\n</code></pre>\n<p>If we inspect the objects return we will find it has properties as well:</p>\n<pre><code class=\"lang-js\">var re = /bam/gi;\nvar tx = &#39;bimbambombimbambom&#39;;\n\nconsole.log(re.exec(tx));\n// [&quot;bam&quot;, index: 3, input: &quot;bimbambombimbambom&quot;]\nconsole.log(re.lastIndex);\n// 6\nconsole.log(re.exec(tx));\n// [&quot;bam&quot;, index: 12, input: &quot;bimbambombimbambom&quot;]\nconsole.log(re.lastIndex);\n// [15\nconsole.log(re.exec(tx));\n// null\nconsole.log(re.lastIndex);\n// 0\n</code></pre>\n<p>For the example below:</p>\n<pre><code class=\"lang-js\">var tx = &quot;his name is John and last name is Smith&quot;;\nvar re = /([A-Z]\\w+)(.*)([A-Z]\\w+)/g;\nconsole.log(re.exec(tx));\n\n// [&quot;John and last name is Smith&quot;, &quot;John&quot;, &quot;Smith&quot;, index: 12, input: &quot;his name is John and last name is Smith&quot;]\n\nconsole.log(re.lastIndex)\n// 0\n\nconsole.log(re.source)\n// ([A-Z]\\w+).*([A-Z]\\w+)\n</code></pre>\n<p>The object returned by the exec method has the following properties:</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Property</th>\n<th style=\"text-align:left\">Description</th>\n<th style=\"text-align:left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">[0]</td>\n<td style=\"text-align:left\">The matched characters</td>\n<td style=\"text-align:left\">&quot;John and last name is Smith&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[n]</td>\n<td style=\"text-align:left\">Any remembered characters using parantheses</td>\n<td style=\"text-align:left\">&quot;John&quot;, &quot;Smith&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">index of the match</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">input</td>\n<td style=\"text-align:left\">The original string</td>\n<td style=\"text-align:left\">&quot;his name is John and last name is Smith&quot;</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>Both methods are returning list of all results, but the main difference between them is that <strong>String&#39;s match</strong> returns all results without information of their position, whereas <strong>RegExp&#39; exec</strong> requires iteration and returns the index information as well. Because the exec iterates, the regex object itself can be examined to see what is the next index from which the engine will restart search.</p>\n<h3 id=\"3-testing-regular-expression-patterns\">3. Testing regular expression patterns</h3>\n<p>The best way to learn is to get hands dirty. As usually, the first steps are most difficult and it isn&#39;t always convenient to test things from command line or web console. \nI created a simple regex tester that takes the input string, the regex pattern and flags and runs the RegExp&#39;s exec method to list all the indexes and captured extractions and also String replace to replace the found matches with them wrapped into span tags in order to visually highlight them. This is a very effective way to expand regex knowledge by practicing with a tool that visually presents results of matching process.</p>\n<p>You can check out the source code on github:\n<a href=\"http://github.com/wsierakowski/regextester\">http://github.com/wsierakowski/regextester</a></p>\n<p><img src=\"/apps/regextester/regextester.png\" alt=\"RegEx Tester screenshot\" title=\"RegEx Tester screenshot\"></p>\n<p>RegEx Tester takes optionally two query string parameters as input allowing launching it from this article with input string (intxt) and regex input (inrgx) text boxes populated:\n<a href=\"http://blog.sigman.pl/apps/regextester/?intxt=hello&amp;inrgx=hello\">http://blog.sigman.pl/apps/regextester/?intxt=hello&amp;inrgx=hello</a></p>\n<hr>\n<h3 id=\"4-regular-expression-patters\">4. Regular Expression patters</h3>\n<hr>\n<h4 id=\"4-1-list-of-most-common-metacharacters-\">4.1 List of most common <strong>metacharacters</strong>:</h4>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Exp</th>\n<th style=\"text-align:left\">Meaning</th>\n<th style=\"text-align:left\">Example</th>\n<th style=\"text-align:left\">Test</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">1. Matches the preceding character 0 or 1 time. Same as {0,1}.</td>\n<td style=\"text-align:left\">1. hell?o matches helo and hello</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&amp;inrgx=hel%3Fo\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">2. when used immediately after character repetition expressions (like + or {}), makes the quantifier non-greedy.</td>\n<td style=\"text-align:left\">2. applying \\d? to 123 matches 1, without ? in greedy mode it would consume all</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">3. Used in lookahead assertions</td>\n<td style=\"text-align:left\">3. x(?=y) matches x only if followed by y</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">Matches preceding character zero or more times</td>\n<td style=\"text-align:left\">hel*o matches heo, helo, hello, helllo, hellllllo...</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&amp;inrgx=hel*o\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">Matches the preceding character one or more times</td>\n<td style=\"text-align:left\">hel+o matches helo, hello, hellllllllo...</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&amp;inrgx=hel%2Bo\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">Matches any single character except newline</td>\n<td style=\"text-align:left\">hel.o matches hello or helio</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&amp;inrgx=hel.o\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">Matches the start of the string or a line if the m flag used</td>\n<td style=\"text-align:left\">^ello matches ello</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&amp;inrgx=hel%3Fo\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">Matches the end of the string or a line if the m flag used</td>\n<td style=\"text-align:left\">hell$ doesn&#39;t matches hell</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=hell%0Aell&amp;inrgx=hell%24\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">Escapes the special meaning of metacharacters that are followed with \\</td>\n<td style=\"text-align:left\">. matches period instead of any single character</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=127.0.0.1&amp;inrgx=%5C.\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&#124;</td>\n<td style=\"text-align:left\">Matches either sides of the pipe</td>\n<td style=\"text-align:left\">(hello</td>\n<td style=\"text-align:left\">hallo) matches hello or hallo</td>\n<td><a href=\"/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&amp;inrgx=%28hello%7Challo%29\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(x)</td>\n<td style=\"text-align:left\">Creates groups</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1. used for pipes or {x,y}</td>\n<td style=\"text-align:left\">1. h(a</td>\n<td style=\"text-align:left\">e)llo matches hello or hallo</td>\n<td><a href=\"/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&amp;inrgx=h%28a%7Ce%29llo\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">2. Used in metasequences</td>\n<td style=\"text-align:left\">2. he(l){1,2}o matches helo and hello and not heo</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">3. Used for extraction to remember the match</td>\n<td style=\"text-align:left\">3. he(l)\\1o remembers l and therefore matches hello</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[xyz]</td>\n<td style=\"text-align:left\">Character classes and ranges</td>\n<td style=\"text-align:left\">1. h[ea]llo matches both hello and hallo</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&amp;inrgx=h%5Bae%5Dllo\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">2. [a-g] matches any character between &#39;a&#39; and &#39;g&#39;</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">3. [A-z1-9.] or [A-Za-z0-9] (with case on) matches any character from alphabet and dot (literally)</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">4. [+/-] matches plus and minus signs - notice we need to escape dash with backslash</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">5. [^a-f] matches any character except for range from &#39;a&#39; to &#39;f&#39;</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:x)</td>\n<td style=\"text-align:left\">Matches x without extraction / remembering the match</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x(?=y)</td>\n<td style=\"text-align:left\">Matches x if it is followed by y</td>\n<td style=\"text-align:left\">h(?=e) would match h in hello</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&amp;inrgx=h%28%3F%3De%29\">try</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x(?!y)</td>\n<td style=\"text-align:left\">Matches x if it is NOT followed by y</td>\n<td style=\"text-align:left\">h(?!e) would not match h in helo but would match in halo</td>\n<td style=\"text-align:left\"><a href=\"/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&amp;inrgx=h%28%3F!e%29\">try</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"4-2-list-of-most-common-metasequences-\">4.2 List of most common <strong>metasequences</strong>:</h4>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Exp</th>\n<th style=\"text-align:left\">Meaning</th>\n<th style=\"text-align:left\">Example</th>\n<th style=\"text-align:left\">Test</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td style=\"text-align:left\">Matches exactly n occurrences of the preceding char or group</td>\n<td style=\"text-align:left\">hel{1}o matches helo only</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td style=\"text-align:left\">Matches at least n occurrences of the preceding char or group</td>\n<td style=\"text-align:left\">hel{1,} mathes helo, hello, hellllo and so on</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td style=\"text-align:left\">Matches at least n but no more than m and n &lt;= m of the preceding char or group</td>\n<td style=\"text-align:left\">hel{1,2}o matches only helo and hello</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:left\">Any word character, shortcut for [A-z0-9_]</td>\n<td style=\"text-align:left\">hel\\wo matches hello or helio but not helo</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:left\">Negation of the above, any non-word char, same as [^A-z0-9_]</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">Matches a word boundary, where a word character is not followed or preceded by another word char. Match boundary is not include in the match!</td>\n<td style=\"text-align:left\">\\bh matches the &#39;h&#39; in hello. o\\b will match the &#39;o&#39; in hello</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">Negation of the above, any non-boundary char</td>\n<td style=\"text-align:left\">TODO</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:left\">Matches any digit, shortcut for [0-9]</td>\n<td style=\"text-align:left\">\\dC matches 1C</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:left\">Negation of the above</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:left\">Matches single white space (space, tab, line and form feed)</td>\n<td style=\"text-align:left\">\\s\\w+ matches the &#39; world&#39; (with space) in hello world</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:left\">Negation of the above</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">Matches new line char</td>\n<td style=\"text-align:left\">hello\\nworld matches &quot;hello\\nworld&quot;</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">Matches carriage return char</td>\n<td style=\"text-align:left\">hello\\rworld matches &quot;hello\\rworld&quot;</td>\n<td style=\"text-align:left\">[try]</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"5-extractions-and-replacements-using-patterns\">5. Extractions and replacements using patterns</h3>\n<p>If parts of the regular expression patter are wrapped into parentheses, they are going to be captured and remembered.</p>\n<p>When using the RegExp.exec method we will see the remembered matches contained remembered in the results. In the example below we extract first and the last name at index 1 and 2:</p>\n<pre><code class=\"lang-js\">var tx = &quot;his name is John and last name is Smith&quot;;\nvar re = /([A-Z]\\w+).*([A-Z]\\w+)/g;\nconsole.log(re.exec(tx));\n\n// [&quot;John and last name is Smith&quot;, &quot;John&quot;, &quot;Smith&quot;, index: 12, input: &quot;his name is John and last name is Smith&quot;]\n</code></pre>\n<p>If we use the replace method, we can use the replacement codes in the replacement substring.</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Replacement Code</th>\n<th style=\"text-align:left\">Replaced by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">$$</td>\n<td style=\"text-align:left\">The $ character ($escapes the second $)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$&amp;</td>\n<td style=\"text-align:left\">The whole matched substring</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$`</td>\n<td style=\"text-align:left\">Text in the string that precedes the matched substring</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$&#39;</td>\n<td style=\"text-align:left\">Text in the string that follows the matched substring</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$n</td>\n<td style=\"text-align:left\">The n group remembered</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<pre><code class=\"lang-js\">var tx = &quot;his name is John and last name is Smith&quot;;\nvar re = /([A-Z]\\w+)(.*)([A-Z]\\w+)/g;\nconsole.log(tx.replace(re, &quot;$3$2$1&quot;));\n\n// his name is Smith and last name is John\n</code></pre>\n<p>In the pattern above, the first group captures the first name, the second anything between the first and last name and the third group the last name. In the replace method we place the content of the last group (the last name) in the place of the first group (the first name).</p>\n<h3 id=\"6-greedy-and-lazy\">6. Greedy and lazy</h3>\n<p>When executing a pattern containing character repetition metasequences like *, + or {n,m}, the pattern is going to consume as many characters as possible, therefore it is called &quot;greedy&quot;. The most popular example of that is matching the html markup tags:</p>\n<pre><code class=\"lang-js\">var tx = &quot;&lt;p&gt;his &lt;i&gt;name&lt;/i&gt; is &lt;b&gt;John&lt;/b&gt; and &lt;i&gt;last name&lt;/i&gt; is &lt;b&gt;Smith&lt;/b&gt;&lt;/p&gt;And here is some text outside.&quot;;\nvar re = /&lt;.+&gt;/g\ntx.match(re);\n\n// [&quot;&lt;p&gt;his &lt;i&gt;name&lt;/i&gt; is &lt;b&gt;John&lt;/b&gt; and &lt;i&gt;last name&lt;/i&gt; is &lt;b&gt;Smith&lt;/b&gt;&lt;/p&gt;&quot;]\n</code></pre>\n<p>This pattern matched the whole string until the last closing angle bracket - only the last part starting with &quot;And&quot; is outside of the match. The expectation might have been that the match should stop on the first b tag but as we see it hasn&#39;t happened. The engine finds the opening angle bracket and then follows with any character as per the &quot;.&quot; metacharacter. It finds the p, then the closing angle bracket which still is matched by the &quot;.&quot;. This process continues until the engine matches the end of the string, but since the pattern requires the closing angle bracket to be the last character, the engine moves back to find it.</p>\n<p>There are two remedies to overcome the greedy patterns: use the character class (in example /&lt;[^&gt;]+&gt;/g) or create a nongreedy &quot;lazy&quot; pattern by adding the question mark right after the metasequence character. In this case, when the engine uses the lazy mode, it tries to match as few characters as possible, so after the first &quot;.&quot; any character match (we use + so one or more preceding chars) it checks if the next is not the closing angle bracket character that ends the pattern.</p>\n<p>In our example this would be &lt;.+?&gt;:</p>\n<pre><code class=\"lang-js\">var tx = &quot;&lt;p&gt;his &lt;i&gt;name&lt;/i&gt; is &lt;b&gt;John&lt;/b&gt; and &lt;i&gt;last name&lt;/i&gt; is &lt;b&gt;Smith&lt;/b&gt;&lt;/p&gt;And here is some text outside.&quot;;\nvar re = /&lt;.+?&gt;/g\ntx.match(re);\n\n// [&quot;&lt;p&gt;&quot;, &quot;&lt;i&gt;&quot;, &quot;&lt;/i&gt;&quot;, &quot;&lt;b&gt;&quot;, &quot;&lt;/b&gt;&quot;, &quot;&lt;i&gt;&quot;, &quot;&lt;/i&gt;&quot;, &quot;&lt;b&gt;&quot;, &quot;&lt;/b&gt;&quot;, &quot;&lt;/p&gt;&quot;]\n</code></pre>\n<h3 id=\"7-examples-in-javascript\">7. Examples in JavaScript</h3>\n<hr>\n<h4 id=\"7-1-for-the-given-string-find-all-names-where-second-character-is-a-\">7.1 For the given string find all names where second character is &#39;a&#39;</h4>\n<p>Input string:</p>\n<pre><code class=\"lang-js\">var tx = `April\nJennifer\nLana\nMacie\nAmaya\nMelissa\nSafa\nAlexia\nScarlet\nMary\nRosa\nAmelia-Rose\nEmmie\nLily-Mae\nCara\nYasmin\nHallie\nAda`;\n</code></pre>\n<p><strong>Note:</strong> I&#39;m using ES6 template strings that allow me to use break lines. The ES5 alternative would be to split each line with the new line char &quot;\\n&quot;:</p>\n<pre><code class=\"lang-js\">var tx = &quot;April\\nJennifer\\n...&quot;;\n</code></pre>\n<pre><code>/^.a/gim\n</code></pre><p>Using start of the string &quot;^&quot;, any single character and finally the &quot;a&quot;, gives the results. Using global, ignore case and multiline flags.</p>\n<p><a href=\"/apps/regextester/?intxt=April%0AJennifer%0ALana%0AMacie%0AAmaya%0AMelissa%0ASafa%0AAlexia%0AScarlet%0AMary%0ARosa%0AAmelia-Rose%0AEmmie%0ALily-Mae%0ACara%0AYasmin%0AHallie%0AAda&amp;inrgx=%5E.a\">&gt;Try in RegEx Tester</a></p>\n<h4 id=\"7-8-find-all-BLOG_PATHS-in-the-string-and-wrap-them-into-the-html-a-tags-\">7.8 Find all BLOG_PATHS in the string and wrap them into the HTML a tags.</h4>\n<pre><code class=\"lang-js\">var tx = &quot;Visit my blog http://sigman.pl or check out my github at http://github.com/wsierakowski&quot;;\nvar re = /(https?:\\/\\/[a-z0-9/.\\-_]+)/g;\ntx.replace(re, &quot;&lt;a href=\\&quot;$&amp;\\&quot;&gt;$&amp;&lt;/a&gt;&quot;);\n// &quot;Visit my blog &lt;a href=&quot;http://sigman.pl&quot;&gt;http://sigman.pl&lt;/a&gt; or check out my github at &lt;a href=&quot;http://github.com/wsierakowski&quot;&gt;http://github.com/wsierakowski&lt;/a&gt;&quot;\n</code></pre>\n<p>The pattern looks for patterns starting with http and optional s, followed by colon and two slashes (escaped with backslashes), then one or more characters from the range including alphabet, digits, dash (escaped), underscore and slash. In the replacement substring we refer to the remembered matches with the replacement code &quot;$&amp;&quot; forming the &quot;a&quot; tag.</p>\n<p><a href=\"/apps/regextester/?intxt=Visit%20my%20blog%20http%3A%2F%2Fsigman.pl%20or%20check%20out%20my%20github%20at%20http%3A%2F%2Fgithub.com%2Fwsierakowski&amp;inrgx=%28https%3F%3A%5C%2F%5C%2F%5Ba-z0-9%2F.%5C-_%5D%2B%29\">&gt; Try in TegEx Tester</a></p>\n<h3 id=\"8-examples-in-grep-\">8. Examples in <code>grep</code></h3>\n<hr>\n<h4 id=\"8-1-intro\">8.1 Intro</h4>\n<p>Global Regular Expression Print (<code>grep</code>) is a tool that comes with practically every Unix system and is one of the most popular and widely used utilities by multiple category of users like administrators and developers. </p>\n<p>Grep can be used on files in the following way:</p>\n<pre><code class=\"lang-bash\">$ grep args filename\n</code></pre>\n<p>or with input piped:</p>\n<pre><code class=\"lang-bash\">$ echo &quot;abcdef&quot; | grep args\n</code></pre>\n<hr>\n<h4 id=\"8-2-find-all-lines-in-the-file-starting-with-the-character-p-\">8.2 Find all lines in the file starting with the character &#39;p&#39;</h4>\n<p>For the following input.txt file:</p>\n<pre><code>Amelia\nOlivia\nIsla\nEmily\nPoppy\nAva\nIsabella\nJessica\nLily\nSophie\nGrace\nSophia\nMia\nEvie\nRuby\nElla\nScarlett\nIsabelle\nChloe\nSienna\nFreya\nPhoebe\nCharlotte\nDaisy\nAlice\n</code></pre><p>find all names starting with &#39;a&#39; or &#39;c&#39; case insensitive:</p>\n<pre><code class=\"lang-bash\">$ grep -i &#39;^[ac]&#39; input.txt\n\nAmelia\nAva\nChloe\nCharlotte\nAlice\n</code></pre>\n<hr>\n<h4 id=\"8-2-achieve-the-same-result-as-in-the-previous-example-using-groups\">8.2 Achieve the same result as in the previous example using groups</h4>\n<p>If we tried to do this:</p>\n<pre><code class=\"lang-bash\">$ grep -i &#39;^(a|c)&#39; input.txt\n</code></pre>\n<p>we are not going to receive any matches as grep doesn&#39;t understand that expression. We need to use the extended version. As per the <code>man grep</code>:</p>\n<blockquote>\n<p>-E, --extended-regexp: Interpret pattern as an extended regular expression (i.e. force grep to behave as egrep).</p>\n</blockquote>\n<pre><code class=\"lang-bash\">$ grep -iE &#39;^(a|c)&#39; input.txt \n\nAmelia\nAva\nChloe\nCharlotte\nAlice\n</code></pre>\n<hr>\n<h4 id=\"8-3-find-capital-letters-in-a-piped-string-and-use-color-to-highlight-matches\">8.3 Find capital letters in a piped string and use color to highlight matches</h4>\n<pre><code class=\"lang-bash\">echo &#39;aAbBcCdDeE&#39; | grep --color [:upper:]\n</code></pre>\n<p>The above will highlight only small &#39;e&#39; as it will use the definition in the brackets as a character set and only the &#39;e&#39; letter matches. This will interpret it as a character class so all capital letters will be highlighted:</p>\n<pre><code class=\"lang-bash\">echo &#39;aAbBcCdDeE&#39; | grep --color &#39;[[:upper:]]&#39;\n</code></pre>\n<hr>\n<h3 id=\"9-examples-in-sed-work-in-progress-\">9. Examples in <code>sed</code> (work in progress...)</h3>\n<hr>\n<h4 id=\"9-1-intro\">9.1 Intro</h4>\n<p>Stream Editor <code>sed</code> is as popular as <code>grep</code>. It&#39;s purpose is editing/applying transformations on the input string based on set of rules provided, that could be also regexes. As for grep, sed takes input either from a file or standard input (if file is omitted). What is unique about this tool is the program part that defines the manipulations.</p>\n<pre><code class=\"lang-bash\">$ sed &lt;program&gt; &lt;file&gt;\n</code></pre>\n<p>The program may look like that:</p>\n<pre><code>s/regex/replacement/params\n</code></pre><p>Where each part separeted with slash has its purpose and meaning as below:</p>\n<ul>\n<li>1st: <code>s</code> means that we are doing search and replace</li>\n<li>2nd: <code>regex</code> which is used on the input string</li>\n<li>3rd: <code>replacement</code> string that will replace matches</li>\n<li>4th: <code>params</code> like global</li>\n</ul>\n<hr>\n<h4 id=\"9-2-replace-vowels-with-the-underscore-characters\">9.2 Replace vowels with the underscore characters</h4>\n<pre><code class=\"lang-bash\">$ echo &quot;hello world to the whole world&quot; | sed s/[aeiou]/_/g\n\nh_ll_ w_rld t_ th_ wh_l_ w_rld\n</code></pre>\n",
            "md": "---\r\n_Update 20160311: This article originally had been written for ActionScript and in this update all examples have been updated to use JavaScript code. In addition RegexTester app has been included to better visualise the examples._\r\n\r\n---\r\n\r\nThere are two aspects to learn in order to effectively use regular expressions. We need to understand the basics of regular expressions themselves and we need to understand how to use them in code.\r\n\r\n### 1. Creating regular expression\r\n\r\nIn order to create a regular expression we need to provide the pattern and set of flags. The pattern usually consists of characters (interpreted literally), metacharacters (like any character) and metasequences (special commands like \\b matching word boundary). Flags define how regular expression engine should execute the pattern.\r\n\r\nRegex can be created with the RegExp class constructor:\r\n\r\n```js\r\n// RegExp(pattern, flags)\r\nvar findHellos = new RegExp(\"hello\", \"gim\");\r\n```\r\n\r\nor as the regular expression literal by wrapping the pattern between two forward slashes and providing flags right after the ending slash:\r\n\r\n```js\r\n// /pattern/flags\r\nvar findHellos = /hello/gim;\r\n```Â \r\n\r\nThe regex constructor is compiled on runtime and it makes most sense to use it when the regex pattern is dynamic, for example when it depends on the user input or is loaded from an external source.\r\n\r\nThe regex literal is compiled when the script is loaded, therefore it has better performance. This form should be used when the regex isn't changing and is constant.\r\n\r\nThe following flags can be provided:\r\n\r\n---\r\n\r\n| Flag |  Name  | Meaning | Example |\r\n|:-----|:-------|:--------|:--------|\r\n| g  |  global  | Global search - matches more than one match |/hello/g matches all g's in the string, not only the first one. Regex must be run in the loop in order to get all matches. |\r\n| i | ignore case | Case insensitive match | /helloHELLO/gi marks both |\r\n| m | multiline | The start (^) and end ($) of string will match start and end of line. | /^hello/gm will match hello and \\nhello (hello on the second line) |\r\n---\r\n\r\nThere are more flags then this, for example x (extended) to allow spaces for better readiness or s (dot all) to allow the any character (.) match new lines as well.\r\n\r\n### 2. Methods using regular expressions\r\n\r\nRegular expressions can be used with methods available on the regex object by applying string or on the string object by applying regex.\r\n\r\n**RegExp.test** Tests for a match in a string. Returns Boolean.\r\n\r\n```js\r\nvar re = /bam/gi;\r\nvar tx = 'bimbambombimbambom';\r\nre.test(tx);\r\n// true\r\n```\r\n\r\n**String.search** Tests for a match in a string. Returns index of a match. Finds only the first match.\r\n\r\n```js\r\nvar re = /bam/gi;\r\nvar tx = 'bimbambombimbambom';\r\ntx.search(re);\r\n// 3\r\ntx.search(re);\r\n// 3\r\n```\r\n\r\n**String.replace** Searches matches in a string and replaces them with a replacement string provided. The replacement string also can take special replacement codes that can make use of extracted pieces. Returns modifies string.\r\n\r\n```js\r\nvar re = /bam/gi;\r\nvar tx = 'bimbambombimbambom';\r\ntx.replace(re, '___');\r\n// \"bim___bombim___bom\"\r\n```\r\n\r\n**String.split** Searches matches in a string and use them to split it into array of substrings. Returns an array of substrings. \r\n\r\n```js\r\nvar re = /bam/gi;\r\nvar tx = 'bimbambombimbambom';\r\ntx.split(re);\r\n// [\"bim\", \"bombim\", \"bom\"]\r\n```\r\n\r\n\r\n**RegExp.exec / String.match** Searches matches in a string. Returns an array with results including index information and captured extractions or null when there is no match.\r\n\r\n```js\r\nvar re = /bam/gi;\r\nvar tx = 'bimbambombimbambom';\r\n\r\nre.exec(tx);\r\n// [\"bam\"] \r\nre.exec(tx);\r\n// [\"bam\"]\r\nre.exec(tx);\r\n// null\r\n```\r\n\r\n```js\r\nvar re = /bam/gi;\r\nvar tx = 'bimbambombimbambom';\r\n\r\ntx.match(re)\r\n[\"bam\", \"bam\"]\r\n\r\nconsole.log(tx.match(re))\r\nconsole.log(re.lastIndex);\r\n// [\"bam\", \"bam\"]\r\n// 0\r\n```\r\n\r\nIf we inspect the objects return we will find it has properties as well:\r\n```js\r\nvar re = /bam/gi;\r\nvar tx = 'bimbambombimbambom';\r\n\r\nconsole.log(re.exec(tx));\r\n// [\"bam\", index: 3, input: \"bimbambombimbambom\"]\r\nconsole.log(re.lastIndex);\r\n// 6\r\nconsole.log(re.exec(tx));\r\n// [\"bam\", index: 12, input: \"bimbambombimbambom\"]\r\nconsole.log(re.lastIndex);\r\n// [15\r\nconsole.log(re.exec(tx));\r\n// null\r\nconsole.log(re.lastIndex);\r\n// 0\r\n```\r\n\r\nFor the example below:\r\n```js\r\nvar tx = \"his name is John and last name is Smith\";\r\nvar re = /([A-Z]\\w+)(.*)([A-Z]\\w+)/g;\r\nconsole.log(re.exec(tx));\r\n\r\n// [\"John and last name is Smith\", \"John\", \"Smith\", index: 12, input: \"his name is John and last name is Smith\"]\r\n\r\nconsole.log(re.lastIndex)\r\n// 0\r\n\r\nconsole.log(re.source)\r\n// ([A-Z]\\w+).*([A-Z]\\w+)\r\n```\r\n\r\nThe object returned by the exec method has the following properties:\r\n\r\n---\r\n\r\n| Property | Description | Example |\r\n|:---------|:------------|:--------|\r\n| [0] | The matched characters | \"John and last name is Smith\" |\r\n| [n] | Any remembered characters using parantheses | \"John\", \"Smith\" |\r\n| index | index of the match | 12  |\r\n| input | The original string | \"his name is John and last name is Smith\" |\r\n\r\n---\r\nBoth methods are returning list of all results, but the main difference between them is that **String's match** returns all results without information of their position, whereas **RegExp' exec** requires iteration and returns the index information as well. Because the exec iterates, the regex object itself can be examined to see what is the next index from which the engine will restart search.\r\n\r\n\r\n### 3. Testing regular expression patterns\r\nThe best way to learn is to get hands dirty. As usually, the first steps are most difficult and it isn't always convenient to test things from command line or web console. \r\nI created a simple regex tester that takes the input string, the regex pattern and flags and runs the RegExp's exec method to list all the indexes and captured extractions and also String replace to replace the found matches with them wrapped into span tags in order to visually highlight them. This is a very effective way to expand regex knowledge by practicing with a tool that visually presents results of matching process.\r\n\r\nYou can check out the source code on github:\r\n[http://github.com/wsierakowski/regextester](http://github.com/wsierakowski/regextester)\r\n\r\n![RegEx Tester screenshot](/apps/regextester/regextester.png \"RegEx Tester screenshot\")\r\n\r\nRegEx Tester takes optionally two query string parameters as input allowing launching it from this article with input string (intxt) and regex input (inrgx) text boxes populated:\r\n[http://blog.sigman.pl/apps/regextester/?intxt=hello&inrgx=hello](http://blog.sigman.pl/apps/regextester/?intxt=hello&inrgx=hello)\r\n\r\n---\r\n\r\n### 4. Regular Expression patters\r\n\r\n---\r\n\r\n#### 4.1 List of most common **metacharacters**:\r\n\r\n---  \r\n  \r\n| Exp | Meaning | Example | Test |\r\n|:----|:--------|:--------|:-----|\r\n| ? | 1. Matches the preceding character 0 or 1 time. Same as {0,1}.| 1. hell?o matches helo and hello | [try](/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&inrgx=hel%3Fo) |\r\n|   | 2. when used immediately after character repetition expressions (like + or {}), makes the quantifier non-greedy. | 2. applying \\d? to 123 matches 1, without ? in greedy mode it would consume all | [try] |\r\n|   | 3. Used in lookahead assertions | 3. x(?=y) matches x only if followed by y | [try] |\r\n| * | Matches preceding character zero or more times | hel*o matches heo, helo, hello, helllo, hellllllo... | [try](/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&inrgx=hel*o) |\r\n| + | Matches the preceding character one or more times | hel+o matches helo, hello, hellllllllo... | [try](/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&inrgx=hel%2Bo) |\r\n| . | Matches any single character except newline | hel.o matches hello or helio | [try](/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&inrgx=hel.o) |\r\n| ^ | Matches the start of the string or a line if the m flag used | ^ello matches ello | [try](/apps/regextester/?intxt=heo%0Ahelo%0Ahello%0Ahelllo%0Ahellllo%0Ahellllllo%0Alello%0Ahelio&inrgx=hel%3Fo) |\r\n| $ | Matches the end of the string or a line if the m flag used | hell$ doesn't matches hell | [try](/apps/regextester/?intxt=hell%0Aell&inrgx=hell%24) |\r\n| \\ | Escapes the special meaning of metacharacters that are followed with \\ | \\. matches period instead of any single character | [try](/apps/regextester/?intxt=127.0.0.1&inrgx=%5C.) |\r\n| &#124; | Matches either sides of the pipe | (hello|hallo) matches hello or hallo | [try](/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&inrgx=%28hello%7Challo%29) |\r\n| (x) | Creates groups | | |\r\n| | 1. used for pipes or {x,y} | 1. h(a|e)llo matches hello or hallo | [try](/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&inrgx=h%28a%7Ce%29llo) |\r\n| | 2. Used in metasequences | 2. he(l){1,2}o matches helo and hello and not heo | [try] | \r\n| | 3. Used for extraction to remember the match | 3. he(l)\\1o remembers l and therefore matches hello | [try] |\r\n| [xyz] | Character classes and ranges | 1. h[ea]llo matches both hello and hallo | [try](/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&inrgx=h%5Bae%5Dllo) |\r\n|||2. [a-g] matches any character between 'a' and 'g'|[try]|\r\n|||3. [A-z1-9.] or [A-Za-z0-9] (with case on) matches any character from alphabet and dot (literally)|[try]|\r\n|||4. [+/-] matches plus and minus signs - notice we need to escape dash with backslash|[try]|\r\n|||5. [^a-f] matches any character except for range from 'a' to 'f'|[try]|\r\n| (?:x) | Matches x without extraction / remembering the match |||\r\n| x(?=y) | Matches x if it is followed by y | h(?=e) would match h in hello | [try](/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&inrgx=h%28%3F%3De%29) |\r\n| x(?!y) | Matches x if it is NOT followed by y | h(?!e) would not match h in helo but would match in halo | [try](/apps/regextester/?intxt=hello%0Ahallo%0Ahalo%0Ahelo%0Ahullo&inrgx=h%28%3F!e%29) |\r\n  \r\n---  \r\n#### 4.2 List of most common **metasequences**:\r\n---\r\n  \r\n| Exp | Meaning | Example | Test |\r\n|:----|:--------|:--------|:-----|\r\n| {n} | Matches exactly n occurrences of the preceding char or group | hel{1}o matches helo only | [try] |\r\n| {n,} | Matches at least n occurrences of the preceding char or group | hel{1,} mathes helo, hello, hellllo and so on | [try] |\r\n| {n,m} | Matches at least n but no more than m and n <= m of the preceding char or group| hel{1,2}o matches only helo and hello | [try] |\r\n| \\w | Any word character, shortcut for [A-z0-9_] | hel\\wo matches hello or helio but not helo | [try] |\r\n| \\W | Negation of the above, any non-word char, same as [^A-z0-9_] |  | [try] |\r\n| \\b | Matches a word boundary, where a word character is not followed or preceded by another word char. Match boundary is not include in the match! | \\bh matches the 'h' in hello. o\\b will match the 'o' in hello | [try] |\r\n| \\B | Negation of the above, any non-boundary char | TODO | [try] |\r\n| \\d | Matches any digit, shortcut for [0-9] | \\dC matches 1C | [try] |\r\n| \\D | Negation of the above |  | [try] |\r\n| \\s | Matches single white space (space, tab, line and form feed) | \\s\\w+ matches the ' world' (with space) in hello world | [try] |\r\n| \\S | Negation of the above |  | [try] |\r\n| \\n | Matches new line char | hello\\nworld matches \"hello\\nworld\" | [try] |\r\n| \\r | Matches carriage return char | hello\\rworld matches \"hello\\rworld\" | [try] |\r\n---\r\n### 5. Extractions and replacements using patterns\r\nIf parts of the regular expression patter are wrapped into parentheses, they are going to be captured and remembered.\r\n\r\nWhen using the RegExp.exec method we will see the remembered matches contained remembered in the results. In the example below we extract first and the last name at index 1 and 2:\r\n```js\r\nvar tx = \"his name is John and last name is Smith\";\r\nvar re = /([A-Z]\\w+).*([A-Z]\\w+)/g;\r\nconsole.log(re.exec(tx));\r\n\r\n// [\"John and last name is Smith\", \"John\", \"Smith\", index: 12, input: \"his name is John and last name is Smith\"]\r\n```\r\n\r\nIf we use the replace method, we can use the replacement codes in the replacement substring.\r\n\r\n---\r\n\r\n| Replacement Code | Replaced by |\r\n|:-----------------|:------------|\r\n|$$|The $ character ($escapes the second $)|\r\n|$&|The whole matched substring|\r\n|$`|Text in the string that precedes the matched substring|\r\n|$'|Text in the string that follows the matched substring|\r\n|$n|The n group remembered |\r\n---\r\n```js\r\nvar tx = \"his name is John and last name is Smith\";\r\nvar re = /([A-Z]\\w+)(.*)([A-Z]\\w+)/g;\r\nconsole.log(tx.replace(re, \"$3$2$1\"));\r\n\r\n// his name is Smith and last name is John\r\n```\r\n\r\nIn the pattern above, the first group captures the first name, the second anything between the first and last name and the third group the last name. In the replace method we place the content of the last group (the last name) in the place of the first group (the first name).\r\n\r\n### 6. Greedy and lazy\r\n\r\nWhen executing a pattern containing character repetition metasequences like *, + or {n,m}, the pattern is going to consume as many characters as possible, therefore it is called \"greedy\". The most popular example of that is matching the html markup tags:\r\n\r\n```js\r\nvar tx = \"<p>his <i>name</i> is <b>John</b> and <i>last name</i> is <b>Smith</b></p>And here is some text outside.\";\r\nvar re = /<.+>/g\r\ntx.match(re);\r\n\r\n// [\"<p>his <i>name</i> is <b>John</b> and <i>last name</i> is <b>Smith</b></p>\"]\r\n```\r\n\r\nThis pattern matched the whole string until the last closing angle bracket - only the last part starting with \"And\" is outside of the match. The expectation might have been that the match should stop on the first b tag but as we see it hasn't happened. The engine finds the opening angle bracket and then follows with any character as per the \".\" metacharacter. It finds the p, then the closing angle bracket which still is matched by the \".\". This process continues until the engine matches the end of the string, but since the pattern requires the closing angle bracket to be the last character, the engine moves back to find it.\r\n\r\nThere are two remedies to overcome the greedy patterns: use the character class (in example /<[^>]+>/g) or create a nongreedy \"lazy\" pattern by adding the question mark right after the metasequence character. In this case, when the engine uses the lazy mode, it tries to match as few characters as possible, so after the first \".\" any character match (we use + so one or more preceding chars) it checks if the next is not the closing angle bracket character that ends the pattern.\r\n\r\nIn our example this would be <.+?>:\r\n```js\r\nvar tx = \"<p>his <i>name</i> is <b>John</b> and <i>last name</i> is <b>Smith</b></p>And here is some text outside.\";\r\nvar re = /<.+?>/g\r\ntx.match(re);\r\n\r\n// [\"<p>\", \"<i>\", \"</i>\", \"<b>\", \"</b>\", \"<i>\", \"</i>\", \"<b>\", \"</b>\", \"</p>\"]\r\n```\r\n\r\n### 7. Examples in JavaScript\r\n---\r\n#### 7.1 For the given string find all names where second character is 'a'\r\n\r\nInput string:\r\n```js\r\nvar tx = `April\r\nJennifer\r\nLana\r\nMacie\r\nAmaya\r\nMelissa\r\nSafa\r\nAlexia\r\nScarlet\r\nMary\r\nRosa\r\nAmelia-Rose\r\nEmmie\r\nLily-Mae\r\nCara\r\nYasmin\r\nHallie\r\nAda`;\r\n```\r\n\r\n**Note:** I'm using ES6 template strings that allow me to use break lines. The ES5 alternative would be to split each line with the new line char \"\\n\":\r\n```js\r\nvar tx = \"April\\nJennifer\\n...\";\r\n```\r\n\r\n```\r\n/^.a/gim\r\n```\r\n\r\nUsing start of the string \"^\", any single character and finally the \"a\", gives the results. Using global, ignore case and multiline flags.\r\n\r\n[>Try in RegEx Tester](/apps/regextester/?intxt=April%0AJennifer%0ALana%0AMacie%0AAmaya%0AMelissa%0ASafa%0AAlexia%0AScarlet%0AMary%0ARosa%0AAmelia-Rose%0AEmmie%0ALily-Mae%0ACara%0AYasmin%0AHallie%0AAda&inrgx=%5E.a)\r\n\r\n#### 7.8 Find all BLOG_PATHS in the string and wrap them into the HTML a tags.\r\n\r\n```js\r\nvar tx = \"Visit my blog http://sigman.pl or check out my github at http://github.com/wsierakowski\";\r\nvar re = /(https?:\\/\\/[a-z0-9/.\\-_]+)/g;\r\ntx.replace(re, \"<a href=\\\"$&\\\">$&</a>\");\r\n// \"Visit my blog <a href=\"http://sigman.pl\">http://sigman.pl</a> or check out my github at <a href=\"http://github.com/wsierakowski\">http://github.com/wsierakowski</a>\"\r\n```\r\n\r\nThe pattern looks for patterns starting with http and optional s, followed by colon and two slashes (escaped with backslashes), then one or more characters from the range including alphabet, digits, dash (escaped), underscore and slash. In the replacement substring we refer to the remembered matches with the replacement code \"$&\" forming the \"a\" tag.\r\n\r\n[> Try in TegEx Tester](/apps/regextester/?intxt=Visit%20my%20blog%20http%3A%2F%2Fsigman.pl%20or%20check%20out%20my%20github%20at%20http%3A%2F%2Fgithub.com%2Fwsierakowski&inrgx=%28https%3F%3A%5C%2F%5C%2F%5Ba-z0-9%2F.%5C-_%5D%2B%29)\r\n\r\n### 8. Examples in `grep`\r\n---\r\n#### 8.1 Intro\r\n\r\nGlobal Regular Expression Print (`grep`) is a tool that comes with practically every Unix system and is one of the most popular and widely used utilities by multiple category of users like administrators and developers. \r\n\r\nGrep can be used on files in the following way:\r\n\r\n```bash\r\n$ grep args filename\r\n```\r\n\r\nor with input piped:\r\n\r\n```bash\r\n$ echo \"abcdef\" | grep args\r\n```\r\n\r\n---\r\n#### 8.2 Find all lines in the file starting with the character 'p'\r\n\r\nFor the following input.txt file:\r\n\r\n```\r\nAmelia\r\nOlivia\r\nIsla\r\nEmily\r\nPoppy\r\nAva\r\nIsabella\r\nJessica\r\nLily\r\nSophie\r\nGrace\r\nSophia\r\nMia\r\nEvie\r\nRuby\r\nElla\r\nScarlett\r\nIsabelle\r\nChloe\r\nSienna\r\nFreya\r\nPhoebe\r\nCharlotte\r\nDaisy\r\nAlice\r\n```\r\n\r\nfind all names starting with 'a' or 'c' case insensitive:\r\n\r\n```bash\r\n$ grep -i '^[ac]' input.txt\r\n\r\nAmelia\r\nAva\r\nChloe\r\nCharlotte\r\nAlice\r\n```\r\n\r\n---\r\n#### 8.2 Achieve the same result as in the previous example using groups\r\n\r\nIf we tried to do this:\r\n\r\n```bash\r\n$ grep -i '^(a|c)' input.txt\r\n```\r\n\r\nwe are not going to receive any matches as grep doesn't understand that expression. We need to use the extended version. As per the `man grep`:\r\n\r\n> -E, --extended-regexp: Interpret pattern as an extended regular expression (i.e. force grep to behave as egrep).\r\n\r\n```bash\r\n$ grep -iE '^(a|c)' input.txt \r\n\r\nAmelia\r\nAva\r\nChloe\r\nCharlotte\r\nAlice\r\n```\r\n\r\n---\r\n#### 8.3 Find capital letters in a piped string and use color to highlight matches\r\n\r\n```bash\r\necho 'aAbBcCdDeE' | grep --color [:upper:]\r\n```\r\n\r\nThe above will highlight only small 'e' as it will use the definition in the brackets as a character set and only the 'e' letter matches. This will interpret it as a character class so all capital letters will be highlighted:\r\n\r\n```bash\r\necho 'aAbBcCdDeE' | grep --color '[[:upper:]]'\r\n```\r\n\r\n---\r\n### 9. Examples in `sed` (work in progress...)\r\n---\r\n#### 9.1 Intro\r\n\r\nStream Editor `sed` is as popular as `grep`. It's purpose is editing/applying transformations on the input string based on set of rules provided, that could be also regexes. As for grep, sed takes input either from a file or standard input (if file is omitted). What is unique about this tool is the program part that defines the manipulations.\r\n\r\n```bash\r\n$ sed <program> <file>\r\n```\r\n\r\nThe program may look like that:\r\n\r\n```\r\ns/regex/replacement/params\r\n```\r\n\r\nWhere each part separeted with slash has its purpose and meaning as below:\r\n- 1st: `s` means that we are doing search and replace\r\n- 2nd: `regex` which is used on the input string\r\n- 3rd: `replacement` string that will replace matches\r\n- 4th: `params` like global\r\n\r\n---\r\n#### 9.2 Replace vowels with the underscore characters\r\n\r\n```bash\r\n$ echo \"hello world to the whole world\" | sed s/[aeiou]/_/g\r\n\r\nh_ll_ w_rld t_ th_ wh_l_ w_rld\r\n```"
        },
        "extendedType": "markdown"
    },
    "hits": 1344,
    "publishedDate": {
        "$date": "2012-03-14T00:00:00.000+0000"
    },
    "slug": "regex-basics",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3b"
    }, {
        "$oid": "55ae65e269291600761cdc39"
    }, {
        "$oid": "56fc39c2c4677bdcc57f2cfa"
    }],
    "title": "Regex basics"
} {
    "_id": {
        "$oid": "56ea8c9e6f86238823224fa7"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc34"
    }],
    "content": {
        "brief": "<p>This is the first part of the series of primers about CouchDB. In this article I'm covering all the major features necessary to start working with CouchDB including key things to remember about CouchDB, CRUD operations, replication and creating user accounts.</p>",
        "extendedMarkdown": {
            "html": "<hr>\n<p>Link to the second part of the primer: <a href=\"/posts/couchdb-primer-part-2-design-documents-and-views\">CouchDB primer part 2 - design documents and views</a></p>\n<hr>\n<h2 id=\"1-key-points-to-know-about-couch-db\">1. Key points to know about Couch DB</h2>\n<hr>\n<h3 id=\"1-0-what-is-couchdb\">1.0 What is CouchDB</h3>\n<p>CouchDB (cluster of unreliable commodity hardware) is a document-oriented NoSQL open source database written in Erlang implementing a form of Multi-Version Concurrency Control as a strategy to resolve document conflicts. It is known for using Map-Reduce for generating data and became very popular among web developers thanks to features like replication, offline support by allowing syncing different instances, use of JavaScript for creating views and REST API. </p>\n<hr>\n<h3 id=\"1-1-couchdb-is-nosql\">1.1 CouchDB is NoSQL</h3>\n<p>NoSQL (Not Only SQL) provides an alternative model for storing and retrieving documents comparing to typical relational databases. Data is stored without relations, it can be structured as key-value pairs, documents, columns or graphs. This allows making some operations faster than in SQL databases, facilitates handling massive amounts of data and makes it simpler to design database and scale horizontally. Each documents has it&#39;s own schema, there isn&#39;t any data model defined for all documents in collections.</p>\n<hr>\n<h3 id=\"1-2-key-value-stores-vs-document-database\">1.2 Key/Value stores vs Document database</h3>\n<p><strong>Key/Value</strong> is the simplest type of NoSQL databagses where data is stored as hash table / associative array. The key uniquely identifies each record, the values can be strings, numbers or more complex structures. </p>\n<p>Popular examples: Redis, Memcache, DynamoDB</p>\n<p>An example record in key/value stores:</p>\n<pre><code>KEY       VALUE\nusername: Jonny\nemail   : jonny123@jonny.com\nage     : 23\n</code></pre><p><strong>Document database</strong> is a subset of key/value stores, it uses the metadata in the data to provide a richer key-value database. Documents are grouped in collections and can contain many key/value pairs, where value could contain nested documents. CouchDB stores documents as JSON.</p>\n<p>Popular examples: CouchDB, MongoDB</p>\n<pre><code>// blog article document\n{\n   &quot;title&quot;   : &quot;CouchDB basics&quot;,\n   &quot;author&quot;  : &quot;24c8ea5e0552db4cfdede3958400b72e&quot;\n   &quot;comments&quot;: [{\n         &quot;nick&quot;   : &quot;Jenny&quot;,\n         &quot;date&quot;   : 1458217472268,\n         &quot;comment&quot;:  &quot;&quot;\n    }]\n}\n</code></pre><hr>\n<h3 id=\"1-3-http-restful-api\">1.3 HTTP RESTful API</h3>\n<p>All operations on database are done through the exposed API via HTTP using REST style HTTP verbs for CRUD operations. This means not only the documents themselves can be created, retrieved, updated and removed in this way but also changes to the configuration or design documents containing views are configured that way as well. This is the reason why most of the CouchDB tutorials use cURL command line tool to do changes to the DB.</p>\n<hr>\n<h3 id=\"1-4-map-reduce-in-views\">1.4 Map/Reduce in Views</h3>\n<p>As in SQL databases documents are queried and grouped using the SQL syntax, in CouchDB this is done with views. Views are JavaScript objects made of two functions, one for mapping documents from the collection (equivalent of SELECT, WHERE) and one for reducing the documents returned by map to calculate a single value (equivalent of GROUP BY, COUNT). Views are indexed every time there is a change to documents in collection.</p>\n<hr>\n<h3 id=\"1-5-multi-version-concurrency-control-mvcc-\">1.5 Multi-Version Concurrency Control (MVCC)</h3>\n<p>CouchDB provides <a href=\"https://en.wikipedia.org/wiki/ACID\">ACID</a> (Atomicity, Consistency, Isolation, Durability) semantics to provide guarantee that database transactions are processed reliably by implementing MVCC.</p>\n<p>A typical SQL database uses locking mechanism to manage concurrent access to the database. Only one user can update a single document at a time and if there are requests to update or read the same document from other users, they are queued waiting until the lock created for the update is removed. This is time consuming and inefficient in large document databases.</p>\n<p>With MVCC there are no locks. Each document stored in CouchDB maintains it&#39;s history of versions/revisions, in the same way how version control systems like GIT work. When the first user updates a document with current revision 1, other users requests will be responded with this version of the document. Once the update process is complete (once the transaction has been committed), the latest revision becomes 2 and all requests will be served with this updated version of the document.</p>\n<p>Read more: <a href=\"http://guide.couchdb.org/draft/consistency.html\">http://guide.couchdb.org/draft/consistency.html</a></p>\n<hr>\n<h3 id=\"1-6-replication-and-eventual-consistency\">1.6 Replication and Eventual Consistency</h3>\n<p>CouchDB replication system handles synchronisation between different devices in a bi-directional way. Multiple replicas can have their own copies of the same data, modify it and then sync changes later. The system accounts for the fact that devices can go off-line and provides mechanism to handle the sync when back online. The consistency between different replicas isn&#39;t handled in the same way as in Relational Database Management Systems, the availability of the latest document before sending response isn&#39;t guaranteed as immediate consistency, instead the changes will be synced eventually. This trade-off pays off with significant performance improvements in terms of data access.</p>\n<hr>\n<h2 id=\"2-basic-operations\">2. Basic operations</h2>\n<hr>\n<h3 id=\"2-0-example-database\">2.0 Example database</h3>\n<p>As a sample used in the examples I will be using the database consisting of the following documents: <a href=\"/pub/couchdb-primer/blogarticles.json\">Full JSON structure</a></p>\n<p>Example document structure:</p>\n<pre><code class=\"lang-js\">{\n   &quot;_id&quot;: &quot;24c8ea5e0552db4cfdede39584004f86&quot;,\n   &quot;_rev&quot;: &quot;3-3bb1e0c71f26706fac61bfa2917d686f&quot;,\n   &quot;title&quot;: &quot;10 Project Management Tips&quot;,\n   &quot;category&quot;: &quot;management&quot;,\n   &quot;published_date&quot;: &quot;2015-03-19T00:00:00.000Z&quot;,\n   &quot;author&quot;: &quot;mark&quot;,\n   &quot;tags&quot;: [\n       &quot;pmp&quot;,\n       &quot;project&quot;,\n       &quot;management&quot;,\n       &quot;tips&quot;\n   ],\n   &quot;visits&quot;: 1000,\n   &quot;comments&quot;: [\n       {\n           &quot;nick&quot;: &quot;laura&quot;,\n           &quot;date&quot;: &quot;2015-03-19T00:00:00.000Z&quot;,\n           &quot;comment&quot;: &quot;Sample comment&quot;,\n           &quot;article_rate&quot;: 4\n       },\n       {\n           &quot;nick&quot;: &quot;karen&quot;,\n           &quot;date&quot;: &quot;2015-04-09T00:00:00.000Z&quot;,\n           &quot;comment&quot;: &quot;Sample comment&quot;,\n           &quot;article_rate&quot;: 5\n       }\n   ]\n}\n</code></pre>\n<h3 id=\"2-1-database-access\">2.1 Database access</h3>\n<p>Since CouchDB exposes API through HTTP, any HTTP client supporting CRUD operations will do the job. For many programmers the most obvious client would be cURL, a command line tool found on Unix-type systems and available on Windows as well. Browser extensions like Advanced RESTful client or Postman can be used if GUI would be preferred. CouchDB also provided a great tool called Futon, that is as handy as PHPMyAdmin to MySQL developers.</p>\n<hr>\n<h3 id=\"2-2-curl-basics\">2.2 cURL basics</h3>\n<p>cURL as most of the command line tools accepts both short and long name parameters.</p>\n<p>Example: <strong>GET</strong> request to the service hosted locally on port 5984. The short version of the <code>--request</code> parameter to specify type of request is X.</p>\n<pre><code class=\"lang-bash\">$ curl --request GET http://localhost:5984/dbname\n\n$ curl -X GET http://localhost:5984/dbname\n</code></pre>\n<p>Example: <strong>POST</strong> request with verbose mode switched on <code>--verbose/-v</code> to print the full response from the service (i.e. request and response headers), with two headers <code>--header/-H</code> specifying the expected response format (json) and the type of the content sent (json) and  lastly the payload indicated by the <code>--data/-d</code> parameter in the JSON format. Note that the <code>--header</code> short version is capital <code>-H</code>. Since JSON requires double quotes, the whole JSON string is wrapped into the single quotes. Alternatively if we use double quotes to wrap JSON, all double quotes inside JSON would need to be escaped with <code>/</code>.</p>\n<pre><code class=\"lang-bash\">$ curl --request POST --verbose --header &quot;Accept: application/json&quot; --header &quot;Content-Type: application/json&quot; --data &#39;{&quot;_id&quot;: &quot;0&quot;, &quot;type&quot;: &quot;annotation&quot;, &quot;title&quot;: &quot;Hello World&quot;}&#39; http://localhost:5984/dbname\n\n$ curl -vX POST -H &quot;Accept: application/json&quot; -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;_id&quot;: &quot;0&quot;, &quot;type&quot;: &quot;annotation&quot;, &quot;title&quot;: &quot;Hello World&quot;}&#39; http://localhost:5984/dbname\n</code></pre>\n<p>To save yourself some trouble with typing host and port information all the time, it is a standard practice to create an environmental variable and then use it with cURL:</p>\n<pre><code class=\"lang-bash\">$ HOST=&quot;http://127.0.0.1:5984&quot;\n$ curl -X GET $HOST/dbname\n</code></pre>\n<p>When sending a GET request containing multiple query string parameters containing quotation and ampersand characters, you may stumble upon this error message : </p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?startkey=&quot;2014-11-18T00:00:00.000Z&quot;&amp;endkey=&quot;2015-03-19T00:00:00.000Z&quot;\n\n{&quot;error&quot;:&quot;bad_request&quot;,&quot;reason&quot;:&quot;invalid_json&quot;}\n</code></pre>\n<p>This is caused by the fact that the shell interprets quotes and the ampersand in its own way, in example the <code>&amp;</code> means run the preceding command in the background, which will eventually send a different request altogether. The simple remedy is to wrap the URL in quotes:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?startkey=&quot;2014-11-18T00:00:00.000Z&quot;&amp;endkey=&quot;2015-03-19T00:00:00.000Z&quot;&#39;\n</code></pre>\n<p>cURL will also report an error if square brackets are used in the URL:</p>\n<pre><code class=\"lang-bash\">curl: (3) [globbing] bad range specification in column 89\n</code></pre>\n<p>in this case the <code>--globoff/-g</code> parameter should be used.</p>\n<hr>\n<h3 id=\"2-3-get-database-instance-information\">2.3 Get database instance information</h3>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984\n\n{&quot;couchdb&quot;:&quot;Welcome&quot;,&quot;uuid&quot;:&quot;dfad4f1b139595ad0254756d40abce0b&quot;,&quot;version&quot;:&quot;1.6.1&quot;,&quot;vendor&quot;:{&quot;version&quot;:&quot;1.6.1-1&quot;,&quot;name&quot;:&quot;Homebrew&quot;}}\n</code></pre>\n<hr>\n<h3 id=\"2-4-listing-available-databases\">2.4 Listing available databases</h3>\n<p>To get a list of all databases, we send request to <code>_all_dbs</code> endpoint.</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984/_all_dbs\n\n[&quot;_replicator&quot;,&quot;_users&quot;,&quot;albums&quot;,&quot;albums-replica&quot;,&quot;autos&quot;,&quot;baseball&quot;,&quot;couchdbschool&quot;,&quot;electronics&quot;,&quot;grzyb&quot;,&quot;hello-world&quot;,&quot;hello-world-replication&quot;,&quot;programming-languages-learn-couchdb&quot;,&quot;sales&quot;,&quot;secdibi&quot;,&quot;test_suite_db&quot;,&quot;test_suite_db2&quot;,&quot;things-learn-couchdb&quot;,&quot;todos&quot;,&quot;wern-ancheta&quot;]\n</code></pre>\n<hr>\n<h3 id=\"2-5-creating-new-database\">2.5 Creating new database</h3>\n<p>To create a new database we send a PUT request to the endpoint named like the database name we want to create.</p>\n<pre><code class=\"lang-bash\">$ curl -X PUT http://localhost:5984/blogarticles\n\n{&quot;ok&quot;:true}\n</code></pre>\n<p>If a database with this name already exists, CouchDB will respond with the following error.</p>\n<pre><code class=\"lang-bash\">$ curl -X PUT http://localhost:5984/blogarticles\n\n{&quot;error&quot;:&quot;file_exists&quot;,&quot;reason&quot;:&quot;The database could not be created, the file already exists.&quot;}\n</code></pre>\n<hr>\n<h3 id=\"2-6-deleting-database\">2.6 Deleting database</h3>\n<pre><code class=\"lang-bash\">$ curl -X DELETE http://localhost5984/blogarticles\n\n{&quot;ok&quot;:true}\n</code></pre>\n<hr>\n<h3 id=\"2-7-inserting-document-to-database\">2.7 Inserting document to database</h3>\n<p>Document creation is done with the POST request providing necessary headers and in the body the key value pairs.</p>\n<pre><code class=\"lang-bash\">$ curl -X POST &#39;http://localhost:5984/blogarticles -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;title&quot;: &quot;first article&quot;, &quot;comments&quot;: [], &quot;author&quot;: &quot;sigman.pl&quot;}&#39;\n\n{&quot;ok&quot;:true,&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;}\n</code></pre>\n<p>Since we didn&#39;t provide the ID for the document, CouchDB created one for us what we can observe in the response. Additionally database returns the current revision number. We can also request IDs beforehand and provide one when creating a new document. For this we need to request pre-generated UUIDs from CouchDB. A <code>UUID</code> (universally unique identifier) is a 128-bit random value with a low collision probability used as an identifier. This way we can requet a list of 10 UUIDs:</p>\n<pre><code class=\"lang-bash\">$ curl -vX GET localhost:5984/_uuids?count=5\n\n{&quot;uuids&quot;:[&quot;24c8ea5e0552db4cfdede39584004f86&quot;,&quot;24c8ea5e0552db4cfdede39584005892&quot;,&quot;24c8ea5e0552db4cfdede39584005dc5&quot;,&quot;24c8ea5e0552db4cfdede39584005e37&quot;,&quot;24c8ea5e0552db4cfdede39584006973&quot;]}\n</code></pre>\n<p>Once we have UUID we can then supply it with POST:</p>\n<pre><code class=\"lang-bash\">$ curl -X POST http://localhost:5984/blogarticles -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;title&quot;: &quot;first article&quot;, &quot;comments&quot;: [], &quot;author&quot;: &quot;sigman.pl&quot;, &quot;_id&quot;: &quot;24c8ea5e0552db4cfdede39584004f86&quot;}&#39;\n\n{&quot;ok&quot;:true,&quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,&quot;rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;}\n</code></pre>\n<p>or PUT requests by providing ID in the URL:</p>\n<pre><code class=\"lang-bash\">$ curl -vX PUT localhost:5984/blogarticles/24c8ea5e0552db4cfdede39584005892 -d &#39;{&quot;title&quot;: &quot;first article&quot;, &quot;comments&quot;: [], &quot;author&quot;: &quot;sigman.pl&quot;}&#39;\n\n{&quot;ok&quot;:true,&quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584005892&quot;,&quot;rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;}\n</code></pre>\n<p>Note that if we didn&#39;t provide the document ID with the PUT request, database would interpret that as a try to create a database with the name from the URL, which would obviously fail since that db already exists.</p>\n<p>Response body returned on the successful creation consist of the document ID and the revision number that should be used by client when attempting to update and remove the document in the future.</p>\n<p>If we inspect the response headers that are printed to console when we use the <code>--verbose/-v</code> option in cURL, we will see the revision number listed over there as the eTag and the location header that contains the full URL to the document.</p>\n<pre><code class=\"lang-bash\">&lt; HTTP/1.1 201 Created\n&lt; Server: CouchDB/1.6.1 (Erlang OTP/17)\n&lt; Location: http://localhost:5984/albums/24c8ea5e0552db4cfdede3958400b72e\n&lt; ETag: &quot;3-3285ae864e437add0b1f033197e7a306&quot;\n&lt; Date: Thu, 04 Feb 2015 20:49:09 GMT\n&lt; Content-Type: text/plain; charset=utf-8\n&lt; Content-Length: 95\n&lt; Cache-Control: must-revalidate\n</code></pre>\n<p>For convenience, when creating documents can supply our own IDs that aren&#39;t in the UUID format as well, it could be any string or number provided it is unique:</p>\n<pre><code class=\"lang-bash\">$ curl -X POST http://localhost:5984/blogarticles -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;title&quot;: &quot;first article&quot;, &quot;comments&quot;: [], &quot;author&quot;: &quot;sigman.pl&quot;, &quot;_id&quot;: &quot;my_own_unique_id1&quot;}&#39;\n</code></pre>\n<hr>\n<h3 id=\"2-8-getting-documents-without-views\">2.8 Getting documents without views</h3>\n<hr>\n<h4 id=\"2-8-1-getting-document-by-id\">2.8.1 Getting document by ID</h4>\n<p>To get document by it&#39;s ID simply provide the database name and the document&#39;s ID. The latest revision will be returned.</p>\n<pre><code class=\"lang-bash\">$ curl -vX GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\n\n{&quot;_id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;_rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;,&quot;title&quot;:&quot;first article&quot;,&quot;comments&quot;:[],&quot;author&quot;:&quot;sigman.pl&quot;}\n</code></pre>\n<hr>\n<h4 id=\"2-8-2-getting-specific-revision-of-document\">2.8.2 Getting specific revision of document</h4>\n<p>To retrieve a specific revision of a document, you can supply the <code>rev</code> as a query parameter and then use the revision number as the value.</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://127.0.0.1:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=1-b222d8fdfbfa76bb11871451dda6a811\n</code></pre>\n<hr>\n<h4 id=\"2-8-3-getting-all-documents-in-database\">2.8.3 Getting all documents in database</h4>\n<p>Use the database name and the <code>_all_docs</code> path.</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://127.0.0.1:5984/blogarticles/_all_docs \n\n{\n   &quot;total_rows&quot;:2,\n   &quot;offset&quot;:0,\n   &quot;rows&quot;:[\n      {\n         &quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,\n         &quot;key&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,\n         &quot;value&quot;:{\n            &quot;rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;\n         }\n      },\n      {\n         &quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,\n         &quot;key&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,\n         &quot;value&quot;:{\n            &quot;rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;\n         }\n      }\n   ]\n}\n</code></pre>\n<p>Note that this only returns the ID, key and value of the documents and not their actual contents. If you also need to return the contents, just add the <code>include_docs</code> as a query parameter and set its value to true:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://127.0.0.1:5984/blogarticles/_all_docs?include_docs=true\n</code></pre>\n<hr>\n<h4 id=\"2-8-4-database-dump-and-import\">2.8.4 Database dump and import</h4>\n<p>We can use the <code>_all_docs</code> endpoint with the <code>include_docs</code> parameter to make a dump of the database to a file:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://127.0.0.1:5984/blogarticles/_all_docs?include_docs=true&#39; &gt; blogarticles_dump.json\n</code></pre>\n<p>And then import it with cURL using the <code>_bulk_docs</code> endpoint:</p>\n<pre><code class=\"lang-bash\">$ curl -X POST &#39;http://127.0.0.1:5984/blogarticles2/_bulk_docs&#39; -H &#39;Content-Type: application/json&#39; -d @blogarticles_dump.json\n</code></pre>\n<hr>\n<h4 id=\"2-9-updating-document-and-revision-numbers\">2.9 Updating document and revision numbers</h4>\n<p>Unlike in SQL or other database solutions, it is not possible to update a document by referring to its ID and providing just one or more fields/columns with new values. Instead, every time we want to update even just one value out of many in that document, we will need to create a new document that in some cases could have an entirely different schema. This new document will be saved under the same document ID but it will have a new revision number stored as the <code>_rev</code> value.</p>\n<p>When a new document is created, it gets a new revision number which has the following form:</p>\n<p><code>1-1e2554ab3134c05c2f3df0915b37bb0b</code></p>\n<p>It is made of two parts. The prefix (decimal number) placed on the left of the dash tells us which version of the document we are looking at (or how many times this document got updated), in this case &#39;1&#39; indicated this is the first version meaning the document has not been updated yet. The second part is a MD5 hash of the document and its attachments (<a href=\"http://csm.tumblr.com/post/18963100318/how-couchdb-revision-number-generation-works\">it is actually more complex than that</a>).</p>\n<p>The new revision number is returned every time we create or update a document both in the returned body payload as well as the eTag header (this can be seen printed to console when using the <code>--verbose</code> flag in cURL):</p>\n<pre><code class=\"lang-bash\">&lt; HTTP/1.1 201 Created\n&lt; Server: CouchDB/1.6.1 (Erlang OTP/17)\n&lt; Location: http://localhost:5984/albums/24c8ea5e0552db4cfdede39584004f86\n&lt; ETag: &quot;1-1e2554ab3134c05c2f3df0915b37bb0b&quot;     // &lt;----- here\n&lt; Date: Wed, 03 Feb 2015 22:12:47 GMT\n&lt; Content-Type: text/plain; charset=utf-8\n&lt; Content-Length: 95\n&lt; Cache-Control: must-revalidate\n&lt; \n{\n   &quot;ok&quot;:true,\n   &quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,\n   &quot;rev&quot;:&quot;1-1e2554ab3134c05c2f3df0915b37bb0b&quot;    // &lt;----- and here\n}\n</code></pre>\n<p>Every time we want to update or delete a document, we need to provide its revision number to let the database check if we are trying update the latest version of the document. If there is a mismatch, it would mean that there has been an update to the document on the server side and the client isn&#39;t aware of that (hasn&#39;t synced yet), hence provides the revision number representing an older document version. In this case the client application needs to sync in order to be up to date with the changes on the server and let the user is decided what action should be taken if there is a conflict. Options could include overwrite client version with the version from the server, or opposite, or let the user merge both. After this action is taken, the client app may again attempt to update. If the client document&#39;s revision number matches the one on the database side, the document gets updated on the server side and receives a new revision number that is returned again to the client. If replication is set with other clients, they will be synced with the latest revision &quot;eventually&quot; as well. </p>\n<p>Let&#39;s update a document by adding a new comment to it. Since article and comments are part of the same document, adding a new comment to an article requires sending the whole article document again. If we send a PUT request and won&#39;t provide any revision number in the body of the request, database is going to return a conflict error (the same as if we provided an incorrect or stale number):</p>\n<pre><code class=\"lang-bash\">$ curl -X PUT http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743 -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;title&quot;: &quot;first article&quot;, &quot;comments&quot;: [{&quot;name&quot;:&quot;Tynka&quot;, &quot;comment&quot;: &quot;Thanks for good post!&quot;}], &quot;author&quot;: &quot;sigman.pl&quot;}&#39;\n\n{&quot;error&quot;:&quot;conflict&quot;,&quot;reason&quot;:&quot;Document update conflict.&quot;}\n</code></pre>\n<p>If we provide the correct revision number (in the JSON payload), the request will be successfull:</p>\n<pre><code class=\"lang-bash\">$ curl -X PUT  http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743 -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;title&quot;: &quot;first article&quot;, &quot;comments&quot;: [{&quot;name&quot;:&quot;Tynka&quot;, &quot;comment&quot;: &quot;Thanks for good post!&quot;}], &quot;author&quot;: &quot;sigman.pl&quot;, &quot;_rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;}&#39;\n\n{&quot;ok&quot;:true,&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;rev&quot;:&quot;2-c152b742621041c94c093729e91623e3&quot;}\n</code></pre>\n<p>The updated document gets a new revision number, this time starting with the digit 2, indicating there has been a change done since creation:</p>\n<p><code>2-c152b742621041c94c093729e91623e3</code></p>\n<hr>\n<h4 id=\"2-10-deleting-document\">2.10 Deleting document</h4>\n<p>Deleting documents is done by sending a DELETE request to the same URL path as for GET request but as in case of the update call, we need to supply the revision number as a query parameter:</p>\n<pre><code class=\"lang-bash\">curl -X DELETE http://127.0.0.1:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=2-b222d8fdfbfa76bb11871451dda6a811\n\n{&quot;ok&quot;:true,&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;rev&quot;:&quot;3-3dc9c896701ffb60db65087e259ff961&quot;}\n</code></pre>\n<p>Providing incorrect revision number would cause the database to reject the request in order to prevent the situation that the user unaware of the changes done to the same document on the database mistakenly removes it. If the revision provided matches the revision of the document, it will get deleted. Attempt to receive it will be responded with the following message:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\n\n{&quot;error&quot;:&quot;not_found&quot;,&quot;reason&quot;:&quot;deleted&quot;}\n</code></pre>\n<p>Now, one may have noticed that the response for the delete request returned another revision number and when requesting the document, instead of just &quot;not found&quot; error we also got the <code>reason</code> stating the document has been deleted. This response is different to the response when we try to request a document that doesn&#39;t exist because it has never been created:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984/blogarticles/00000000000011111111111112222222\n\n{&quot;error&quot;:&quot;not_found&quot;,&quot;reason&quot;:&quot;missing&quot;}\n</code></pre>\n<p>This may lead to only one conclusion, the document is still there, and although it is marked as deleted at revision 3, the previous revisions are still available. You can confirm that by requesting any of these specific revisions using the document ID:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=1-b222d8fdfbfa76bb11871451dda6a811\n\n{&quot;_id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;_rev&quot;:&quot;1-b222d8fdfbfa76bb11871451dda6a811&quot;,&quot;title&quot;:&quot;first article&quot;,&quot;comments&quot;:[],&quot;author&quot;:&quot;sigman.pl&quot;}\n\n$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=2-c152b742621041c94c093729e91623e3\n\n{&quot;_id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;_rev&quot;:&quot;2-c152b742621041c94c093729e91623e3&quot;,&quot;title&quot;:&quot;first article&quot;,&quot;comments&quot;:[{&quot;name&quot;:&quot;Tynka&quot;,&quot;comment&quot;:&quot;Thanks for good post!&quot;}],&quot;author&quot;:&quot;sigman.pl&quot;}\n</code></pre>\n<p>The fact that the document is deleted means in the CouchDB world that the latest revision is marked as deleted. We could now insert a new revision to the same document using the document_id and the document will not be marked as deleted anymore:</p>\n<pre><code class=\"lang-bash\">$ curl -X PUT  http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743 -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;title&quot;: &quot;first article&quot;, &quot;comments&quot;: [{&quot;name&quot;:&quot;Tynka&quot;, &quot;comment&quot;: &quot;Thanks for the good post!&quot;}], &quot;author&quot;: &quot;sigman.pl&quot;, &quot;_rev&quot;:&quot;3-3dc9c896701ffb60db65087e259ff961&quot;}&#39;\n\n{&quot;ok&quot;:true,&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;rev&quot;:&quot;4-09db81f3becacf61e34da44be8b10985&quot;}\n</code></pre>\n<p>Database returns the document with the new revision again:</p>\n<pre><code class=\"lang-bash\">i$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\n\n{&quot;_id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;_rev&quot;:&quot;4-09db81f3becacf61e34da44be8b10985&quot;,&quot;title&quot;:&quot;first article&quot;,&quot;comments&quot;:[{&quot;name&quot;:&quot;Tynka&quot;,&quot;comment&quot;:&quot;Thanks for the good post!&quot;}],&quot;author&quot;:&quot;sigman.pl&quot;}\n</code></pre>\n<p>It is not possible to delete a specific revision of a document, attempt to send a DELETE request referring to earlier revision will cause database to respond with the conflict error. \nIt is possible to remove all old revision for documents marked as deleted using <a href=\"http://wiki.apache.org/couchdb/Compaction\">compaction</a>.</p>\n<hr>\n<h4 id=\"2-11-adding-attachments-to-document\">2.11 Adding attachments to document</h4>\n<p>Attachments can be any type of data. To upload one we use the PUT request like if we were doing a standard update request since adding attachment is in fact an update to the document. We need to provide the document ID and the revision number in the URL and the MIME type in the Content-Type header. We need to send the header information as CouchDB will save it along with the attachment and later will return it to clients - in this way internet browsers will know how to handle it, in example they if the attachment is a PNG file, they will display it on the screen instead of downloading it as an uncompatible file. The <code>--data-binary</code> option makes cURL read fileâ€™s contents into the HTTP request body, note that we don&#39;t use the standard <code>-d</code> or <code>--data</code> since we are going to upload a binary file. The <code>@</code> character followed by the file name tells cURL to read and transmit the file. In the example request below, the file name that will be created on the database will not be the same as the original file name. </p>\n<pre><code class=\"lang-bash\">$ curl -vX PUT http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.png?rev=6-76abeae68356e43048ff5cda2ba712b9 --data-binary @thumb1234.jpg -H &quot;Content-Type:image/jpeg&quot;\n\n* Connected to localhost (127.0.0.1) port 5984 (#0)\n&gt; PUT /blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.jpg?rev=6-76abeae68356e43048ff5cda2ba712b9 HTTP/1.1\n&gt; Host: localhost:5984\n&gt; User-Agent: curl/7.43.0\n&gt; Accept: */*\n&gt; Content-Type:image/jpeg\n&gt; Content-Length: 8818\n&gt; Expect: 100-continue\n&gt; \n&lt; HTTP/1.1 100 Continue\n* We are completely uploaded and fine\n&lt; HTTP/1.1 201 Created\n&lt; Server: CouchDB/1.6.1 (Erlang OTP/17)\n&lt; Location: http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.jpg\n&lt; ETag: &quot;7-fb5654d85ff16f57bf079aee05f35de7&quot;\n&lt; Date: Fri, 18 Mar 2015 11:29:38 GMT\n&lt; Content-Type: text/plain; charset=utf-8\n&lt; Content-Length: 95\n&lt; Cache-Control: must-revalidate\n&lt; \n{&quot;ok&quot;:true,&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;rev&quot;:&quot;7-fb5654d85ff16f57bf079aee05f35de7&quot;}\n</code></pre>\n<p>I used the <code>--verbose</code> flag in cURL to print the details of the upload process, it is really handy as it shows how database handes the upload process. In example, if cURL couldn&#39;t find the file, the update will still go ahead and the new revision of the document will be created but without the attachment (which may not be what we desire): </p>\n<p><code>&quot;Warning: Couldn&#39;t read data from file &quot;thumb1234.jpg&quot;, this makes an empty POST&quot;.</code></p>\n<p>After the upload is complete, the attachment information will be available in the response for the GET request:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\n\n{\n   &quot;_id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,\n   &quot;_rev&quot;:&quot;7-fb5654d85ff16f57bf079aee05f35de7&quot;,\n   &quot;title&quot;:&quot;first article&quot;,\n   &quot;comments&quot;:[\n      {\n         &quot;name&quot;:&quot;Tynka&quot;,\n         &quot;comment&quot;:&quot;Thanks for the good post!&quot;\n      }\n   ],\n   &quot;author&quot;:&quot;sigman.pl&quot;,\n   &quot;_attachments&quot;:{\n      &quot;thumb.jpg&quot;:{\n         &quot;content_type&quot;:&quot;image/jpeg&quot;,\n         &quot;revpos&quot;:7,\n         &quot;digest&quot;:&quot;md5-hC40fyp13/N0XCDB0tRUiA==&quot;,\n         &quot;length&quot;:8818,\n         &quot;stub&quot;:true\n      }\n   }\n}\n</code></pre>\n<p>The stub=true setting tells us that this entry is just the metadata. If we use the ?attachments=true HTTP query parameter when requesting this document, we would get a Base64 encoded string containing the attachment data.</p>\n<p>The individual attachments in the document can be retrieved using the document ID followed by the file name. We could reuse the location header returned to us in the response of the request sent to upload a file:</p>\n<p><a href=\"http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.jpg\">http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.jpg</a></p>\n<h2 id=\"3-replication\">3. Replication</h2>\n<p>Synchronisation of databases, called replication, lets CouchDB verify which documents and revisions are in the source and target databases and push all the missing or newer version to the target. Replication process is kicked off with one POST request to the <code>_replicate</code> endpoint specifying the source and the target databases. </p>\n<p><strong>There are thee types of replications:</strong>\nThe names correspond to what we use with code repository systems like GIT.</p>\n<ul>\n<li><p>Local replication - when both a <code>source</code> and a <code>target</code> databases are <code>local</code>. It is usually used as local backup snapshot before doing some changes to be able to return back to the previous state if needed.</p>\n</li>\n<li><p>Push replication - when we use <code>local source</code> and a <code>remote target</code> database, this means we want to push our changes to the remote server.</p>\n</li>\n<li><p>Pull replication - when we use <code>remote target</code> and a <code>local source</code>, we do this when we want to update our local records with the changes on the remote database.</p>\n</li>\n<li><p>Remote replication - when both <code>source</code> and <code>target</code> are remote, this is used for management operations.</p>\n</li>\n</ul>\n<p>In the example below we will perform a local replication. Since I don&#39;t have the target database created yet, I&#39;m going to use the <code>create_target</code> parameter set to true to let CouchDB create the database for me.</p>\n<pre><code class=\"lang-bash\">$ curl -vX POST http://localhost:5984/_replicate -d &#39;{&quot;source&quot;:&quot;blogarticles&quot;,&quot;target&quot;:&quot;blogarticles-replica&quot;, &quot;create_target&quot;:true}&#39; -H &quot;Content-Type: application/json&quot;\n\n{\n   &quot;ok&quot;:true,\n   &quot;session_id&quot;:&quot;b6eda05f5b0136303af72331539586e9&quot;,\n   &quot;source_last_seq&quot;:8,\n   &quot;replication_id_version&quot;:3,\n   &quot;history&quot;:[\n      {\n         &quot;session_id&quot;:&quot;b6eda05f5b0136303af72331539586e9&quot;,\n         &quot;start_time&quot;:&quot;Fri, 18 Mar 2015 12:22:21 GMT&quot;,\n         &quot;end_time&quot;:&quot;Fri, 18 Mar 2015 12:22:21 GMT&quot;,\n         &quot;start_last_seq&quot;:0,\n         &quot;end_last_seq&quot;:8,\n         &quot;recorded_seq&quot;:8,\n         &quot;missing_checked&quot;:2,\n         &quot;missing_found&quot;:2,\n         &quot;docs_read&quot;:2,\n         &quot;docs_written&quot;:2,\n         &quot;doc_write_failures&quot;:0\n      }\n   ]\n}\n</code></pre>\n<p>The response may not come back immediately especially when there is a lot of documents to synchronise. The returned response data contains the details of the replication including how many documents has been moved and updated. The replication history is kept in the database.</p>\n<p>Example of the push replication:</p>\n<pre><code class=\"lang-bash\">$ curl -vX POST http://localhost:5984/_replicate -d &#39;{&quot;source&quot;:&quot;blogarticles&quot;,&quot;target&quot;:&quot;http://myhost.com:5984/blogarticles&quot;, &quot;create_target&quot;:true}&#39; -H &quot;Content-Type: application/json&quot;\n</code></pre>\n<p><em>Of course, for security reasons, you should not keep the remote database open to the whole world to allow remote replications like in the example above. At the very least, user accounts should be created, and the endpoint should be opened to a dedicated single IP address only. Enabling HTTPS is also advisable.</em></p>\n<hr>\n<h2 id=\"4-security\">4. Security</h2>\n<hr>\n<h3 id=\"4-1-creating-admin-user\">4.1 Creating Admin user</h3>\n<p>By default, CouchDB is installed in so called &quot;Admin Party&quot; mode meaning that no authentication is required to access the database. When the first admin user is created, from now on, actions including creating and deleting database, creating and deleting design document, restarting database and access to documentation can be performed only by admins. In addition to admins, normal user can also be created and they may get their own roles assigned.</p>\n<p>Creating a new admin user with name &quot;joe&quot; and password &quot;E3o2J1&quot;:</p>\n<pre><code class=\"lang-bash\">$ curl -vX PUT $HOST/_config/admins/joe -d &#39;&quot;E3o2J1&quot;&#39;\n\n&quot;&quot;\n</code></pre>\n<p>This created a new entry in the _config document for the admins, the password for the admin user &quot;joe&quot; will be hashed (hash of the password and seed UUID appended with the -hash- string and the seed). The returned empty string value is the previous value that was stored before.</p>\n<p>Now an unauthorised user trying to create a new database will be forbidden from doing so.</p>\n<pre><code class=\"lang-bash\">$ curl -vX PUT $HOST/anewdb\n\n{&quot;error&quot;:&quot;unauthorized&quot;,&quot;reason&quot;:&quot;You are not a server admin.&quot;}\n</code></pre>\n<p>Querying database will still work for unauthenticated users in this set up.</p>\n<hr>\n<h3 id=\"4-2-basic-authentication\">4.2 Basic authentication</h3>\n<p>Basic authentication, which is not very secure, involves providing username and password in plain text in the URL:</p>\n<pre><code class=\"lang-bash\">$ HOST=http://joe:E3o2J1@127.0.0.1:5984\n$ curl -vX PUT $HOST/anewdb\n\n{&quot;ok&quot;:true}\n</code></pre>\n<hr>\n<h3 id=\"4-3-cookie-based-authentication\">4.3 Cookie based authentication</h3>\n<p>First the cookie needs to be requested:</p>\n<pre><code class=\"lang-bash\">$ HOST=http://127.0.0.1:5984\n$ curl -vX POST $HOST/_session -H &#39;Content-Type:application/x-www-form-urlencoded&#39; -d &#39;name=joe&amp;password=E3o2J1&#39;\n</code></pre>\n<p>The response will contain the Set-Cookie header containing the cookie:</p>\n<pre><code class=\"lang-bash\">&lt; HTTP/1.1 200 OK\n&lt; Set-Cookie: AuthSession=Z3J6eWI6NTZCNzJFODk6yB1wOYdjV1ocquts0FRqLaLwIcw; Version=1; Path=/; HttpOnly\n&lt; Server: CouchDB/1.6.1 (Erlang OTP/17)\n&lt; Date: Sun, 07 Feb 2015 11:46:17 GMT\n&lt; Content-Type: text/plain; charset=utf-8\n&lt; Content-Length: 43\n&lt; Cache-Control: must-revalidate\n&lt; \n{&quot;ok&quot;:true,&quot;name&quot;:null,&quot;roles&quot;:[&quot;_admin&quot;]}\n</code></pre>\n<p>The cookie with token is valid for 10 minutes only. Now using the cookie returned, we are authenticated and able to perform restricted actions:</p>\n<pre><code class=\"lang-bash\">$ curl -vX PUT $HOST/new_db --cookie AuthSession=Z3J6eWI6NTZCNzJFODk6yB1wOYdjV1ocquts0FRqLaLwIcw -H &quot;X-CouchDB-WWW-Authenticate: Cookie&quot;\n</code></pre>\n<p>The response will contain the new cookie:</p>\n<pre><code class=\"lang-bash\">&lt; HTTP/1.1 201 Created\n&lt; Set-Cookie: AuthSession=Z3J6eWI6NTZCNzMwQTg6GqwhzmZe14gPx9bwDKs24XPB_M4; Version=1; Path=/; HttpOnly\n\n{&quot;ok&quot;:true}\n</code></pre>\n<hr>\n<h3 id=\"4-4-user-accounts\">4.4 User accounts</h3>\n<p>User accounts are stored in the database called _users. </p>\n<p>Information how to add new users: <a href=\"http://docs.couchdb.org/en/1.6.1/intro/security.html\">http://docs.couchdb.org/en/1.6.1/intro/security.html</a> </p>\n",
            "md": "---\r\n\r\nLink to the second part of the primer: [CouchDB primer part 2 - design documents and views](/posts/couchdb-primer-part-2-design-documents-and-views)\r\n\r\n---\r\n## 1. Key points to know about Couch DB\r\n\r\n---\r\n### 1.0 What is CouchDB\r\nCouchDB (cluster of unreliable commodity hardware) is a document-oriented NoSQL open source database written in Erlang implementing a form of Multi-Version Concurrency Control as a strategy to resolve document conflicts. It is known for using Map-Reduce for generating data and became very popular among web developers thanks to features like replication, offline support by allowing syncing different instances, use of JavaScript for creating views and REST API. \r\n\r\n---\r\n### 1.1 CouchDB is NoSQL\r\nNoSQL (Not Only SQL) provides an alternative model for storing and retrieving documents comparing to typical relational databases. Data is stored without relations, it can be structured as key-value pairs, documents, columns or graphs. This allows making some operations faster than in SQL databases, facilitates handling massive amounts of data and makes it simpler to design database and scale horizontally. Each documents has it's own schema, there isn't any data model defined for all documents in collections.\r\n\r\n---\r\n### 1.2 Key/Value stores vs Document database\r\n\r\n**Key/Value** is the simplest type of NoSQL databagses where data is stored as hash table / associative array. The key uniquely identifies each record, the values can be strings, numbers or more complex structures. \r\n\r\nPopular examples: Redis, Memcache, DynamoDB\r\n\r\nAn example record in key/value stores:\r\n```\r\nKEY       VALUE\r\nusername: Jonny\r\nemail   : jonny123@jonny.com\r\nage     : 23\r\n\r\n```\r\n\r\n**Document database** is a subset of key/value stores, it uses the metadata in the data to provide a richer key-value database. Documents are grouped in collections and can contain many key/value pairs, where value could contain nested documents. CouchDB stores documents as JSON.\r\n\r\nPopular examples: CouchDB, MongoDB\r\n\r\n```\r\n// blog article document\r\n{\r\n   \"title\"   : \"CouchDB basics\",\r\n   \"author\"  : \"24c8ea5e0552db4cfdede3958400b72e\"\r\n   \"comments\": [{\r\n         \"nick\"   : \"Jenny\",\r\n         \"date\"   : 1458217472268,\r\n         \"comment\":  \"\"\r\n    }]\r\n}\r\n```\r\n\r\n---\r\n### 1.3 HTTP RESTful API\r\nAll operations on database are done through the exposed API via HTTP using REST style HTTP verbs for CRUD operations. This means not only the documents themselves can be created, retrieved, updated and removed in this way but also changes to the configuration or design documents containing views are configured that way as well. This is the reason why most of the CouchDB tutorials use cURL command line tool to do changes to the DB.\r\n\r\n---\r\n### 1.4 Map/Reduce in Views\r\nAs in SQL databases documents are queried and grouped using the SQL syntax, in CouchDB this is done with views. Views are JavaScript objects made of two functions, one for mapping documents from the collection (equivalent of SELECT, WHERE) and one for reducing the documents returned by map to calculate a single value (equivalent of GROUP BY, COUNT). Views are indexed every time there is a change to documents in collection.\r\n\r\n---\r\n### 1.5 Multi-Version Concurrency Control (MVCC)\r\nCouchDB provides [ACID](https://en.wikipedia.org/wiki/ACID) (Atomicity, Consistency, Isolation, Durability) semantics to provide guarantee that database transactions are processed reliably by implementing MVCC.\r\n\r\nA typical SQL database uses locking mechanism to manage concurrent access to the database. Only one user can update a single document at a time and if there are requests to update or read the same document from other users, they are queued waiting until the lock created for the update is removed. This is time consuming and inefficient in large document databases.\r\n\r\nWith MVCC there are no locks. Each document stored in CouchDB maintains it's history of versions/revisions, in the same way how version control systems like GIT work. When the first user updates a document with current revision 1, other users requests will be responded with this version of the document. Once the update process is complete (once the transaction has been committed), the latest revision becomes 2 and all requests will be served with this updated version of the document.\r\n\r\nRead more: [http://guide.couchdb.org/draft/consistency.html](http://guide.couchdb.org/draft/consistency.html)\r\n\r\n---\r\n### 1.6 Replication and Eventual Consistency\r\nCouchDB replication system handles synchronisation between different devices in a bi-directional way. Multiple replicas can have their own copies of the same data, modify it and then sync changes later. The system accounts for the fact that devices can go off-line and provides mechanism to handle the sync when back online. The consistency between different replicas isn't handled in the same way as in Relational Database Management Systems, the availability of the latest document before sending response isn't guaranteed as immediate consistency, instead the changes will be synced eventually. This trade-off pays off with significant performance improvements in terms of data access.\r\n\r\n---\r\n\r\n## 2. Basic operations\r\n---\r\n\r\n### 2.0 Example database\r\n\r\nAs a sample used in the examples I will be using the database consisting of the following documents: [Full JSON structure](/pub/couchdb-primer/blogarticles.json)\r\n\r\nExample document structure:\r\n```js\r\n{\r\n   \"_id\": \"24c8ea5e0552db4cfdede39584004f86\",\r\n   \"_rev\": \"3-3bb1e0c71f26706fac61bfa2917d686f\",\r\n   \"title\": \"10 Project Management Tips\",\r\n   \"category\": \"management\",\r\n   \"published_date\": \"2015-03-19T00:00:00.000Z\",\r\n   \"author\": \"mark\",\r\n   \"tags\": [\r\n       \"pmp\",\r\n       \"project\",\r\n       \"management\",\r\n       \"tips\"\r\n   ],\r\n   \"visits\": 1000,\r\n   \"comments\": [\r\n       {\r\n           \"nick\": \"laura\",\r\n           \"date\": \"2015-03-19T00:00:00.000Z\",\r\n           \"comment\": \"Sample comment\",\r\n           \"article_rate\": 4\r\n       },\r\n       {\r\n           \"nick\": \"karen\",\r\n           \"date\": \"2015-04-09T00:00:00.000Z\",\r\n           \"comment\": \"Sample comment\",\r\n           \"article_rate\": 5\r\n       }\r\n   ]\r\n}\r\n```\r\n\r\n### 2.1 Database access\r\nSince CouchDB exposes API through HTTP, any HTTP client supporting CRUD operations will do the job. For many programmers the most obvious client would be cURL, a command line tool found on Unix-type systems and available on Windows as well. Browser extensions like Advanced RESTful client or Postman can be used if GUI would be preferred. CouchDB also provided a great tool called Futon, that is as handy as PHPMyAdmin to MySQL developers.\r\n\r\n---\r\n### 2.2 cURL basics\r\n\r\ncURL as most of the command line tools accepts both short and long name parameters.\r\n\r\nExample: **GET** request to the service hosted locally on port 5984. The short version of the `--request` parameter to specify type of request is X.\r\n```bash\r\n$ curl --request GET http://localhost:5984/dbname\r\n\r\n$ curl -X GET http://localhost:5984/dbname\r\n```\r\n\r\nExample: **POST** request with verbose mode switched on `--verbose/-v` to print the full response from the service (i.e. request and response headers), with two headers `--header/-H` specifying the expected response format (json) and the type of the content sent (json) and  lastly the payload indicated by the `--data/-d` parameter in the JSON format. Note that the `--header` short version is capital `-H`. Since JSON requires double quotes, the whole JSON string is wrapped into the single quotes. Alternatively if we use double quotes to wrap JSON, all double quotes inside JSON would need to be escaped with `/`.\r\n\r\n```bash\r\n$ curl --request POST --verbose --header \"Accept: application/json\" --header \"Content-Type: application/json\" --data '{\"_id\": \"0\", \"type\": \"annotation\", \"title\": \"Hello World\"}' http://localhost:5984/dbname\r\n\r\n$ curl -vX POST -H \"Accept: application/json\" -H \"Content-Type: application/json\" -d '{\"_id\": \"0\", \"type\": \"annotation\", \"title\": \"Hello World\"}' http://localhost:5984/dbname\r\n```\r\n\r\nTo save yourself some trouble with typing host and port information all the time, it is a standard practice to create an environmental variable and then use it with cURL:\r\n\r\n```bash\r\n$ HOST=\"http://127.0.0.1:5984\"\r\n$ curl -X GET $HOST/dbname\r\n```\r\n\r\nWhen sending a GET request containing multiple query string parameters containing quotation and ampersand characters, you may stumble upon this error message : \r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?startkey=\"2014-11-18T00:00:00.000Z\"&endkey=\"2015-03-19T00:00:00.000Z\"\r\n\r\n{\"error\":\"bad_request\",\"reason\":\"invalid_json\"}\r\n```\r\n\r\nThis is caused by the fact that the shell interprets quotes and the ampersand in its own way, in example the `&` means run the preceding command in the background, which will eventually send a different request altogether. The simple remedy is to wrap the URL in quotes:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?startkey=\"2014-11-18T00:00:00.000Z\"&endkey=\"2015-03-19T00:00:00.000Z\"'\r\n```\r\n\r\ncURL will also report an error if square brackets are used in the URL:\r\n```bash\r\ncurl: (3) [globbing] bad range specification in column 89\r\n```\r\n\r\nin this case the `--globoff/-g` parameter should be used.\r\n\r\n---\r\n### 2.3 Get database instance information\r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984\r\n\r\n{\"couchdb\":\"Welcome\",\"uuid\":\"dfad4f1b139595ad0254756d40abce0b\",\"version\":\"1.6.1\",\"vendor\":{\"version\":\"1.6.1-1\",\"name\":\"Homebrew\"}}\r\n```\r\n\r\n---\r\n### 2.4 Listing available databases\r\n\r\nTo get a list of all databases, we send request to `_all_dbs` endpoint.\r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984/_all_dbs\r\n\r\n[\"_replicator\",\"_users\",\"albums\",\"albums-replica\",\"autos\",\"baseball\",\"couchdbschool\",\"electronics\",\"grzyb\",\"hello-world\",\"hello-world-replication\",\"programming-languages-learn-couchdb\",\"sales\",\"secdibi\",\"test_suite_db\",\"test_suite_db2\",\"things-learn-couchdb\",\"todos\",\"wern-ancheta\"]\r\n```\r\n\r\n---\r\n### 2.5 Creating new database\r\n\r\nTo create a new database we send a PUT request to the endpoint named like the database name we want to create.\r\n\r\n```bash\r\n$ curl -X PUT http://localhost:5984/blogarticles\r\n\r\n{\"ok\":true}\r\n```\r\n\r\nIf a database with this name already exists, CouchDB will respond with the following error.\r\n\r\n```bash\r\n$ curl -X PUT http://localhost:5984/blogarticles\r\n\r\n{\"error\":\"file_exists\",\"reason\":\"The database could not be created, the file already exists.\"}\r\n```\r\n\r\n---\r\n### 2.6 Deleting database\r\n\r\n```bash\r\n$ curl -X DELETE http://localhost5984/blogarticles\r\n\r\n{\"ok\":true}\r\n```\r\n\r\n---\r\n### 2.7 Inserting document to database\r\n\r\nDocument creation is done with the POST request providing necessary headers and in the body the key value pairs.\r\n\r\n```bash\r\n$ curl -X POST 'http://localhost:5984/blogarticles -H \"Content-Type: application/json\" -d '{\"title\": \"first article\", \"comments\": [], \"author\": \"sigman.pl\"}'\r\n\r\n{\"ok\":true,\"id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\"}\r\n```\r\n\r\nSince we didn't provide the ID for the document, CouchDB created one for us what we can observe in the response. Additionally database returns the current revision number. We can also request IDs beforehand and provide one when creating a new document. For this we need to request pre-generated UUIDs from CouchDB. A `UUID` (universally unique identifier) is a 128-bit random value with a low collision probability used as an identifier. This way we can requet a list of 10 UUIDs:\r\n\r\n```bash\r\n$ curl -vX GET localhost:5984/_uuids?count=5\r\n\r\n{\"uuids\":[\"24c8ea5e0552db4cfdede39584004f86\",\"24c8ea5e0552db4cfdede39584005892\",\"24c8ea5e0552db4cfdede39584005dc5\",\"24c8ea5e0552db4cfdede39584005e37\",\"24c8ea5e0552db4cfdede39584006973\"]}\r\n```\r\n\r\nOnce we have UUID we can then supply it with POST:\r\n\r\n```bash\r\n$ curl -X POST http://localhost:5984/blogarticles -H \"Content-Type: application/json\" -d '{\"title\": \"first article\", \"comments\": [], \"author\": \"sigman.pl\", \"_id\": \"24c8ea5e0552db4cfdede39584004f86\"}'\r\n\r\n{\"ok\":true,\"id\":\"24c8ea5e0552db4cfdede39584004f86\",\"rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\"}\r\n```\r\n\r\nor PUT requests by providing ID in the URL:\r\n\r\n```bash\r\n$ curl -vX PUT localhost:5984/blogarticles/24c8ea5e0552db4cfdede39584005892 -d '{\"title\": \"first article\", \"comments\": [], \"author\": \"sigman.pl\"}'\r\n\r\n{\"ok\":true,\"id\":\"24c8ea5e0552db4cfdede39584005892\",\"rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\"}\r\n```\r\n\r\nNote that if we didn't provide the document ID with the PUT request, database would interpret that as a try to create a database with the name from the URL, which would obviously fail since that db already exists.\r\n\r\nResponse body returned on the successful creation consist of the document ID and the revision number that should be used by client when attempting to update and remove the document in the future.\r\n\r\nIf we inspect the response headers that are printed to console when we use the `--verbose/-v` option in cURL, we will see the revision number listed over there as the eTag and the location header that contains the full URL to the document.\r\n\r\n```bash\r\n< HTTP/1.1 201 Created\r\n< Server: CouchDB/1.6.1 (Erlang OTP/17)\r\n< Location: http://localhost:5984/albums/24c8ea5e0552db4cfdede3958400b72e\r\n< ETag: \"3-3285ae864e437add0b1f033197e7a306\"\r\n< Date: Thu, 04 Feb 2015 20:49:09 GMT\r\n< Content-Type: text/plain; charset=utf-8\r\n< Content-Length: 95\r\n< Cache-Control: must-revalidate\r\n```\r\n\r\nFor convenience, when creating documents can supply our own IDs that aren't in the UUID format as well, it could be any string or number provided it is unique:\r\n\r\n```bash\r\n$ curl -X POST http://localhost:5984/blogarticles -H \"Content-Type: application/json\" -d '{\"title\": \"first article\", \"comments\": [], \"author\": \"sigman.pl\", \"_id\": \"my_own_unique_id1\"}'\r\n```\r\n\r\n---\r\n### 2.8 Getting documents without views\r\n---\r\n#### 2.8.1 Getting document by ID\r\n\r\nTo get document by it's ID simply provide the database name and the document's ID. The latest revision will be returned.\r\n\r\n```bash\r\n$ curl -vX GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\r\n\r\n{\"_id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"_rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\",\"title\":\"first article\",\"comments\":[],\"author\":\"sigman.pl\"}\r\n```\r\n\r\n---\r\n#### 2.8.2 Getting specific revision of document\r\n\r\nTo retrieve a specific revision of a document, you can supply the `rev` as a query parameter and then use the revision number as the value.\r\n\r\n```bash\r\n$ curl -X GET http://127.0.0.1:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=1-b222d8fdfbfa76bb11871451dda6a811\r\n```\r\n\r\n---\r\n#### 2.8.3 Getting all documents in database\r\n\r\nUse the database name and the `_all_docs` path.\r\n\r\n```bash\r\n$ curl -X GET http://127.0.0.1:5984/blogarticles/_all_docs \r\n\r\n{\r\n   \"total_rows\":2,\r\n   \"offset\":0,\r\n   \"rows\":[\r\n      {\r\n         \"id\":\"24c8ea5e0552db4cfdede39584004f86\",\r\n         \"key\":\"24c8ea5e0552db4cfdede39584004f86\",\r\n         \"value\":{\r\n            \"rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\"\r\n         }\r\n      },\r\n      {\r\n         \"id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\r\n         \"key\":\"3c9187bdabb2408e3fbfe6a76f000743\",\r\n         \"value\":{\r\n            \"rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\"\r\n         }\r\n      }\r\n   ]\r\n}\r\n```\r\n\r\nNote that this only returns the ID, key and value of the documents and not their actual contents. If you also need to return the contents, just add the `include_docs` as a query parameter and set its value to true:\r\n\r\n```bash\r\n$ curl -X GET http://127.0.0.1:5984/blogarticles/_all_docs?include_docs=true\r\n```\r\n\r\n---\r\n#### 2.8.4 Database dump and import\r\n\r\nWe can use the `_all_docs` endpoint with the `include_docs` parameter to make a dump of the database to a file:\r\n\r\n```bash\r\n$ curl -X GET 'http://127.0.0.1:5984/blogarticles/_all_docs?include_docs=true' > blogarticles_dump.json\r\n```\r\n\r\nAnd then import it with cURL using the `_bulk_docs` endpoint:\r\n\r\n```bash\r\n$ curl -X POST 'http://127.0.0.1:5984/blogarticles2/_bulk_docs' -H 'Content-Type: application/json' -d @blogarticles_dump.json\r\n```\r\n\r\n---\r\n#### 2.9 Updating document and revision numbers\r\n\r\nUnlike in SQL or other database solutions, it is not possible to update a document by referring to its ID and providing just one or more fields/columns with new values. Instead, every time we want to update even just one value out of many in that document, we will need to create a new document that in some cases could have an entirely different schema. This new document will be saved under the same document ID but it will have a new revision number stored as the `_rev` value.\r\n\r\nWhen a new document is created, it gets a new revision number which has the following form:\r\n\r\n`1-1e2554ab3134c05c2f3df0915b37bb0b`\r\n\r\nIt is made of two parts. The prefix (decimal number) placed on the left of the dash tells us which version of the document we are looking at (or how many times this document got updated), in this case '1' indicated this is the first version meaning the document has not been updated yet. The second part is a MD5 hash of the document and its attachments ([it is actually more complex than that](http://csm.tumblr.com/post/18963100318/how-couchdb-revision-number-generation-works)).\r\n\r\nThe new revision number is returned every time we create or update a document both in the returned body payload as well as the eTag header (this can be seen printed to console when using the `--verbose` flag in cURL):\r\n\r\n```bash\r\n< HTTP/1.1 201 Created\r\n< Server: CouchDB/1.6.1 (Erlang OTP/17)\r\n< Location: http://localhost:5984/albums/24c8ea5e0552db4cfdede39584004f86\r\n< ETag: \"1-1e2554ab3134c05c2f3df0915b37bb0b\"     // <----- here\r\n< Date: Wed, 03 Feb 2015 22:12:47 GMT\r\n< Content-Type: text/plain; charset=utf-8\r\n< Content-Length: 95\r\n< Cache-Control: must-revalidate\r\n< \r\n{\r\n   \"ok\":true,\r\n   \"id\":\"24c8ea5e0552db4cfdede39584004f86\",\r\n   \"rev\":\"1-1e2554ab3134c05c2f3df0915b37bb0b\"    // <----- and here\r\n}\r\n```\r\n\r\nEvery time we want to update or delete a document, we need to provide its revision number to let the database check if we are trying update the latest version of the document. If there is a mismatch, it would mean that there has been an update to the document on the server side and the client isn't aware of that (hasn't synced yet), hence provides the revision number representing an older document version. In this case the client application needs to sync in order to be up to date with the changes on the server and let the user is decided what action should be taken if there is a conflict. Options could include overwrite client version with the version from the server, or opposite, or let the user merge both. After this action is taken, the client app may again attempt to update. If the client document's revision number matches the one on the database side, the document gets updated on the server side and receives a new revision number that is returned again to the client. If replication is set with other clients, they will be synced with the latest revision \"eventually\" as well. \r\n\r\nLet's update a document by adding a new comment to it. Since article and comments are part of the same document, adding a new comment to an article requires sending the whole article document again. If we send a PUT request and won't provide any revision number in the body of the request, database is going to return a conflict error (the same as if we provided an incorrect or stale number):\r\n\r\n```bash\r\n$ curl -X PUT http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743 -H \"Content-Type: application/json\" -d '{\"title\": \"first article\", \"comments\": [{\"name\":\"Tynka\", \"comment\": \"Thanks for good post!\"}], \"author\": \"sigman.pl\"}'\r\n\r\n{\"error\":\"conflict\",\"reason\":\"Document update conflict.\"}\r\n```\r\n\r\nIf we provide the correct revision number (in the JSON payload), the request will be successfull:\r\n\r\n```bash\r\n$ curl -X PUT  http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743 -H \"Content-Type: application/json\" -d '{\"title\": \"first article\", \"comments\": [{\"name\":\"Tynka\", \"comment\": \"Thanks for good post!\"}], \"author\": \"sigman.pl\", \"_rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\"}'\r\n\r\n{\"ok\":true,\"id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"rev\":\"2-c152b742621041c94c093729e91623e3\"}\r\n```\r\n\r\nThe updated document gets a new revision number, this time starting with the digit 2, indicating there has been a change done since creation:\r\n\r\n`2-c152b742621041c94c093729e91623e3`\r\n\r\n---\r\n#### 2.10 Deleting document\r\n\r\nDeleting documents is done by sending a DELETE request to the same URL path as for GET request but as in case of the update call, we need to supply the revision number as a query parameter:\r\n\r\n```bash\r\ncurl -X DELETE http://127.0.0.1:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=2-b222d8fdfbfa76bb11871451dda6a811\r\n\r\n{\"ok\":true,\"id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"rev\":\"3-3dc9c896701ffb60db65087e259ff961\"}\r\n```\r\n\r\nProviding incorrect revision number would cause the database to reject the request in order to prevent the situation that the user unaware of the changes done to the same document on the database mistakenly removes it. If the revision provided matches the revision of the document, it will get deleted. Attempt to receive it will be responded with the following message:\r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\r\n\r\n{\"error\":\"not_found\",\"reason\":\"deleted\"}\r\n```\r\n\r\nNow, one may have noticed that the response for the delete request returned another revision number and when requesting the document, instead of just \"not found\" error we also got the `reason` stating the document has been deleted. This response is different to the response when we try to request a document that doesn't exist because it has never been created:\r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984/blogarticles/00000000000011111111111112222222\r\n\r\n{\"error\":\"not_found\",\"reason\":\"missing\"}\r\n```\r\n\r\nThis may lead to only one conclusion, the document is still there, and although it is marked as deleted at revision 3, the previous revisions are still available. You can confirm that by requesting any of these specific revisions using the document ID:\r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=1-b222d8fdfbfa76bb11871451dda6a811\r\n\r\n{\"_id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"_rev\":\"1-b222d8fdfbfa76bb11871451dda6a811\",\"title\":\"first article\",\"comments\":[],\"author\":\"sigman.pl\"}\r\n\r\n$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=2-c152b742621041c94c093729e91623e3\r\n\r\n{\"_id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"_rev\":\"2-c152b742621041c94c093729e91623e3\",\"title\":\"first article\",\"comments\":[{\"name\":\"Tynka\",\"comment\":\"Thanks for good post!\"}],\"author\":\"sigman.pl\"}\r\n\r\n```\r\n\r\nThe fact that the document is deleted means in the CouchDB world that the latest revision is marked as deleted. We could now insert a new revision to the same document using the document_id and the document will not be marked as deleted anymore:\r\n\r\n```bash\r\n$ curl -X PUT  http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743 -H \"Content-Type: application/json\" -d '{\"title\": \"first article\", \"comments\": [{\"name\":\"Tynka\", \"comment\": \"Thanks for the good post!\"}], \"author\": \"sigman.pl\", \"_rev\":\"3-3dc9c896701ffb60db65087e259ff961\"}'\r\n\r\n{\"ok\":true,\"id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"rev\":\"4-09db81f3becacf61e34da44be8b10985\"}\r\n```\r\n\r\nDatabase returns the document with the new revision again:\r\n```bash\r\ni$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\r\n\r\n{\"_id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"_rev\":\"4-09db81f3becacf61e34da44be8b10985\",\"title\":\"first article\",\"comments\":[{\"name\":\"Tynka\",\"comment\":\"Thanks for the good post!\"}],\"author\":\"sigman.pl\"}\r\n```\r\n\r\nIt is not possible to delete a specific revision of a document, attempt to send a DELETE request referring to earlier revision will cause database to respond with the conflict error. \r\nIt is possible to remove all old revision for documents marked as deleted using [compaction](http://wiki.apache.org/couchdb/Compaction).\r\n\r\n---\r\n#### 2.11 Adding attachments to document\r\n\r\nAttachments can be any type of data. To upload one we use the PUT request like if we were doing a standard update request since adding attachment is in fact an update to the document. We need to provide the document ID and the revision number in the URL and the MIME type in the Content-Type header. We need to send the header information as CouchDB will save it along with the attachment and later will return it to clients - in this way internet browsers will know how to handle it, in example they if the attachment is a PNG file, they will display it on the screen instead of downloading it as an uncompatible file. The `--data-binary` option makes cURL read fileâ€™s contents into the HTTP request body, note that we don't use the standard `-d` or `--data` since we are going to upload a binary file. The `@` character followed by the file name tells cURL to read and transmit the file. In the example request below, the file name that will be created on the database will not be the same as the original file name. \r\n\r\n```bash\r\n$ curl -vX PUT http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.png?rev=6-76abeae68356e43048ff5cda2ba712b9 --data-binary @thumb1234.jpg -H \"Content-Type:image/jpeg\"\r\n\r\n* Connected to localhost (127.0.0.1) port 5984 (#0)\r\n> PUT /blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.jpg?rev=6-76abeae68356e43048ff5cda2ba712b9 HTTP/1.1\r\n> Host: localhost:5984\r\n> User-Agent: curl/7.43.0\r\n> Accept: */*\r\n> Content-Type:image/jpeg\r\n> Content-Length: 8818\r\n> Expect: 100-continue\r\n> \r\n< HTTP/1.1 100 Continue\r\n* We are completely uploaded and fine\r\n< HTTP/1.1 201 Created\r\n< Server: CouchDB/1.6.1 (Erlang OTP/17)\r\n< Location: http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.jpg\r\n< ETag: \"7-fb5654d85ff16f57bf079aee05f35de7\"\r\n< Date: Fri, 18 Mar 2015 11:29:38 GMT\r\n< Content-Type: text/plain; charset=utf-8\r\n< Content-Length: 95\r\n< Cache-Control: must-revalidate\r\n< \r\n{\"ok\":true,\"id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"rev\":\"7-fb5654d85ff16f57bf079aee05f35de7\"}\r\n```\r\n\r\nI used the `--verbose` flag in cURL to print the details of the upload process, it is really handy as it shows how database handes the upload process. In example, if cURL couldn't find the file, the update will still go ahead and the new revision of the document will be created but without the attachment (which may not be what we desire): \r\n\r\n`\"Warning: Couldn't read data from file \"thumb1234.jpg\", this makes an empty POST\".`\r\n\r\nAfter the upload is complete, the attachment information will be available in the response for the GET request:\r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743\r\n\r\n{\r\n   \"_id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\r\n   \"_rev\":\"7-fb5654d85ff16f57bf079aee05f35de7\",\r\n   \"title\":\"first article\",\r\n   \"comments\":[\r\n      {\r\n         \"name\":\"Tynka\",\r\n         \"comment\":\"Thanks for the good post!\"\r\n      }\r\n   ],\r\n   \"author\":\"sigman.pl\",\r\n   \"_attachments\":{\r\n      \"thumb.jpg\":{\r\n         \"content_type\":\"image/jpeg\",\r\n         \"revpos\":7,\r\n         \"digest\":\"md5-hC40fyp13/N0XCDB0tRUiA==\",\r\n         \"length\":8818,\r\n         \"stub\":true\r\n      }\r\n   }\r\n}\r\n```\r\n\r\nThe stub=true setting tells us that this entry is just the metadata. If we use the ?attachments=true HTTP query parameter when requesting this document, we would get a Base64 encoded string containing the attachment data.\r\n\r\nThe individual attachments in the document can be retrieved using the document ID followed by the file name. We could reuse the location header returned to us in the response of the request sent to upload a file:\r\n\r\nhttp://localhost:5984/blogarticles/3c9187bdabb2408e3fbfe6a76f000743/thumb.jpg\r\n\r\n## 3. Replication\r\n\r\nSynchronisation of databases, called replication, lets CouchDB verify which documents and revisions are in the source and target databases and push all the missing or newer version to the target. Replication process is kicked off with one POST request to the `_replicate` endpoint specifying the source and the target databases. \r\n\r\n**There are thee types of replications:**\r\nThe names correspond to what we use with code repository systems like GIT.\r\n\r\n- Local replication - when both a `source` and a `target` databases are `local`. It is usually used as local backup snapshot before doing some changes to be able to return back to the previous state if needed.\r\n\r\n- Push replication - when we use `local source` and a `remote target` database, this means we want to push our changes to the remote server.\r\n\r\n- Pull replication - when we use `remote target` and a `local source`, we do this when we want to update our local records with the changes on the remote database.\r\n\r\n- Remote replication - when both `source` and `target` are remote, this is used for management operations.\r\n\r\nIn the example below we will perform a local replication. Since I don't have the target database created yet, I'm going to use the `create_target` parameter set to true to let CouchDB create the database for me.\r\n\r\n```bash\r\n$ curl -vX POST http://localhost:5984/_replicate -d '{\"source\":\"blogarticles\",\"target\":\"blogarticles-replica\", \"create_target\":true}' -H \"Content-Type: application/json\"\r\n\r\n{\r\n   \"ok\":true,\r\n   \"session_id\":\"b6eda05f5b0136303af72331539586e9\",\r\n   \"source_last_seq\":8,\r\n   \"replication_id_version\":3,\r\n   \"history\":[\r\n      {\r\n         \"session_id\":\"b6eda05f5b0136303af72331539586e9\",\r\n         \"start_time\":\"Fri, 18 Mar 2015 12:22:21 GMT\",\r\n         \"end_time\":\"Fri, 18 Mar 2015 12:22:21 GMT\",\r\n         \"start_last_seq\":0,\r\n         \"end_last_seq\":8,\r\n         \"recorded_seq\":8,\r\n         \"missing_checked\":2,\r\n         \"missing_found\":2,\r\n         \"docs_read\":2,\r\n         \"docs_written\":2,\r\n         \"doc_write_failures\":0\r\n      }\r\n   ]\r\n}\r\n```\r\n\r\nThe response may not come back immediately especially when there is a lot of documents to synchronise. The returned response data contains the details of the replication including how many documents has been moved and updated. The replication history is kept in the database.\r\n\r\nExample of the push replication:\r\n\r\n```bash\r\n$ curl -vX POST http://localhost:5984/_replicate -d '{\"source\":\"blogarticles\",\"target\":\"http://myhost.com:5984/blogarticles\", \"create_target\":true}' -H \"Content-Type: application/json\"\r\n```\r\n\r\n_Of course, for security reasons, you should not keep the remote database open to the whole world to allow remote replications like in the example above. At the very least, user accounts should be created, and the endpoint should be opened to a dedicated single IP address only. Enabling HTTPS is also advisable._\r\n\r\n---\r\n## 4. Security\r\n---\r\n### 4.1 Creating Admin user\r\n\r\nBy default, CouchDB is installed in so called \"Admin Party\" mode meaning that no authentication is required to access the database. When the first admin user is created, from now on, actions including creating and deleting database, creating and deleting design document, restarting database and access to documentation can be performed only by admins. In addition to admins, normal user can also be created and they may get their own roles assigned.\r\n\r\nCreating a new admin user with name \"joe\" and password \"E3o2J1\":\r\n\r\n```bash\r\n$ curl -vX PUT $HOST/_config/admins/joe -d '\"E3o2J1\"'\r\n\r\n\"\"\r\n```\r\n\r\nThis created a new entry in the _config document for the admins, the password for the admin user \"joe\" will be hashed (hash of the password and seed UUID appended with the -hash- string and the seed). The returned empty string value is the previous value that was stored before.\r\n\r\nNow an unauthorised user trying to create a new database will be forbidden from doing so.\r\n\r\n```bash\r\n$ curl -vX PUT $HOST/anewdb\r\n\r\n{\"error\":\"unauthorized\",\"reason\":\"You are not a server admin.\"}\r\n```\r\n\r\nQuerying database will still work for unauthenticated users in this set up.\r\n\r\n---\r\n### 4.2 Basic authentication\r\n\r\nBasic authentication, which is not very secure, involves providing username and password in plain text in the URL:\r\n\r\n```bash\r\n$ HOST=http://joe:E3o2J1@127.0.0.1:5984\r\n$ curl -vX PUT $HOST/anewdb\r\n\r\n{\"ok\":true}\r\n```\r\n\r\n---\r\n### 4.3 Cookie based authentication\r\n\r\nFirst the cookie needs to be requested:\r\n\r\n```bash\r\n$ HOST=http://127.0.0.1:5984\r\n$ curl -vX POST $HOST/_session -H 'Content-Type:application/x-www-form-urlencoded' -d 'name=joe&password=E3o2J1'\r\n```\r\n\r\nThe response will contain the Set-Cookie header containing the cookie:\r\n```bash\r\n< HTTP/1.1 200 OK\r\n< Set-Cookie: AuthSession=Z3J6eWI6NTZCNzJFODk6yB1wOYdjV1ocquts0FRqLaLwIcw; Version=1; Path=/; HttpOnly\r\n< Server: CouchDB/1.6.1 (Erlang OTP/17)\r\n< Date: Sun, 07 Feb 2015 11:46:17 GMT\r\n< Content-Type: text/plain; charset=utf-8\r\n< Content-Length: 43\r\n< Cache-Control: must-revalidate\r\n< \r\n{\"ok\":true,\"name\":null,\"roles\":[\"_admin\"]}\r\n```\r\n\r\nThe cookie with token is valid for 10 minutes only. Now using the cookie returned, we are authenticated and able to perform restricted actions:\r\n\r\n```bash\r\n$ curl -vX PUT $HOST/new_db --cookie AuthSession=Z3J6eWI6NTZCNzJFODk6yB1wOYdjV1ocquts0FRqLaLwIcw -H \"X-CouchDB-WWW-Authenticate: Cookie\"\r\n```\r\n\r\nThe response will contain the new cookie:\r\n```bash\r\n< HTTP/1.1 201 Created\r\n< Set-Cookie: AuthSession=Z3J6eWI6NTZCNzMwQTg6GqwhzmZe14gPx9bwDKs24XPB_M4; Version=1; Path=/; HttpOnly\r\n\r\n{\"ok\":true}\r\n```\r\n\r\n---\r\n### 4.4 User accounts\r\n\r\nUser accounts are stored in the database called _users. \r\n\r\nInformation how to add new users: http://docs.couchdb.org/en/1.6.1/intro/security.html \r\n\r\n\r\n"
        },
        "extendedType": "markdown"
    },
    "hits": 2089,
    "publishedDate": {
        "$date": "2015-09-17T00:00:00.000+0000"
    },
    "slug": "couchdb-primer-part-1-the-basics",
    "state": "published",
    "tags": [{
        "$oid": "56fc38c5c4677bdcc57f2cf9"
    }, {
        "$oid": "56fc388fc4677bdcc57f2cf7"
    }, {
        "$oid": "56fc38a4c4677bdcc57f2cf8"
    }],
    "title": "CouchDB primer part 1 - the basics"
} {
    "_id": {
        "$oid": "56fc32586f86238823224fa8"
    },
    "__v": 2,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc34"
    }],
    "content": {
        "brief": "<p>This is the second&nbsp;part of the series of primers about CouchDB. In this article I'm covering&nbsp;the design documents, views including map-reduce and rereduce, lookup views, different way of querying, using compound key and debugging.</p>",
        "extendedMarkdown": {
            "html": "<hr>\n<p>Link to the first part of the primer: <a href=\"/posts/couchdb-primer-part-1-the-basics\">CouchDB primer part 1 - the basics</a></p>\n<hr>\n<h2 id=\"5-design-documents\">5. Design documents</h2>\n<hr>\n<h3 id=\"5-1-purpose-and-structure-of-design-documents\">5.1 Purpose and structure of design documents</h3>\n<p>Every database created in CouchDB can have none, one or more design documents. By default, when creating a new database, there isn&#39;t any. Design documents are JavaScript objects represented as JSON containing methods that are this database&#39;s logic responsible for transformations and outputting of documents this database contains. They are stored just like other documents in the database, they can be retrieved in the same way too through the HTTP API, but they are part of a dedicated _design space and their methods are designed to be executed in order to process the documents. </p>\n<p>Design documents can consist of the following functionalities:</p>\n<ul>\n<li><strong>Views</strong> - they go through each document from the database to return only these that meet criteria defined by us (map function) and they can group data as well. Functionally they are what SELECT, WHERE, GROUP, COUNT, SUM are in SQL (reduce function).</li>\n<li><strong>Shows</strong> - they convert the <em>single_document&#39;s</em> structure (JSON) into another format, like HTML, XML</li>\n<li><strong>Lists</strong> - they convert the whole view into another format, in example a table or XML collection</li>\n<li><strong>Document validations</strong> - are validations function that can check and reformat incoming documents to ensure consistency before they are saved.</li>\n<li><strong>Update handlers</strong> - they are invoked during document create or update action. They can be implemented to auto-increment some values or update timestamps.</li>\n<li><strong>Filters</strong> - they are used during replication to filter out documents that should not be exchanged, after inspecting properties and values of each document they return it or not (null).</li>\n</ul>\n<p>Design document doesn&#39;t have to contain all of the properties listed above. One design document can contain many different views, each with a different key.</p>\n<p>By convention design document name should represent the type of the document that is generated by it.</p>\n<p>Example design document may look as below:</p>\n<pre><code class=\"lang-js\">{\n  &quot;_id&quot;: &quot;_design/articles&quot;,\n  &quot;language&quot;: &quot;javascript&quot;,\n  &quot;views&quot;: {\n    &quot;all&quot;: {\n      &quot;map&quot;: &quot;function(doc) { emit(doc.title, doc) }&quot;\n    },\n    &quot;by_title&quot;: {\n      &quot;map&quot;: &quot;function(doc) { if (doc.title != null) emit(doc.title, doc) }&quot;,\n      &quot;reduce&quot;: &quot;function(keys, values, rereduce){}&quot;\n    },\n    &quot;by_tag&quot;: {\n      &quot;map&quot;: &quot;function(doc) { \n        for(i=0;i&lt;doc.tag.lenghth();i++) {    \n          emit(doc.keywords[i], doc); \n        } \n      }&quot;,\n    },\n  },\n  &quot;shows&quot;: {\n    &quot;article&quot;: &quot;function(doc, req) { return &#39;&lt;h1&gt;&#39; + doc.title + &#39;&lt;/h1&gt;&#39; }&quot;\n}\n</code></pre>\n<hr>\n<h3 id=\"5-2-creating-design-document\">5.2 Creating design document</h3>\n<p>What makes a document the design document is the document ID <code>_id</code> value which indicates that the blogarticles document is in the special dedicated <code>_design</code> space:</p>\n<pre><code>&quot;_id&quot;: &quot;_design/articles&quot;\n</code></pre><p>New design documents need to be created with a PUT request, the <code>_id</code> is required and won&#39;t be automatically generated by CouchDB as in the case of standard documents.</p>\n<p>Since design documents are usually large, it becomes cumbersome to pass them as parameter with cURL, a more effective way is to save the document&#39;s JSON structure to the file and then upload it using the --data argument, as in the example below:</p>\n<pre><code class=\"lang-bash\">$ curl -X PUT -d @blogarticles_design.js &#39;http://localhost:5984/blogarticles/_design/articles&#39;\n</code></pre>\n<hr>\n<h3 id=\"5-3-retrieving-and-updating-design-documents\">5.3 Retrieving and updating design documents</h3>\n<p>Retrieval of the design documents structure is done in the same way standard documents are retrieved, remembering that the document&#39;s ID is made of the &quot;_design/&quot; part and the document&#39;s name:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles&#39;\n\n{&quot;_id&quot;:&quot;_design/articles&quot;,&quot;_rev&quot;:&quot;1-a572b72927492f44aa976d9f5f9b0c0d&quot;,&quot;language&quot;:&quot;javascript&quot;,&quot;views&quot;:{&quot;by_published_date&quot;:{&quot;map&quot;:&quot;function(doc){if(doc.published_date){emit(doc.published_date, doc);}}&quot;}}}\n</code></pre>\n<p>Executing any of the design document functions is done by sending a GET request to the design document URL appended with the type of the function (_show/_view or other) and it&#39;s name:</p>\n<p>Here we are looking up the results of the show function named article:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_show/articles/&#39;\n</code></pre>\n<p>And here we access the results produced by the by_title view:</p>\n<pre><code class=\"lang-bash\">http://127.0.0.1:5984/blogarticles/_design/articles/_view/by_title\n</code></pre>\n<p>Similarly, updating of design documents requires a PUT request with document ID and revision number:</p>\n<pre><code class=\"lang-bash\">curl -X PUT -H &#39;Content-type: application/json&#39; -d &#39;{&quot;_rev&quot;:&quot;1-b41a673ce62351a2c629734d4dc220f9&quot;, &quot;view/by_title&quot;: &quot;...&quot;}&#39; &#39;http://localhost:5984/blogarticles/_design/articles&#39;\n</code></pre>\n<hr>\n<h3 id=\"5-4-view-functions-overview\">5.4 View functions overview</h3>\n<p>From purely technical perspective, views are just JavaScript functions that you can write to emit individual documents based on some criteria. In some cases a view may emit more data than the actual number of documents, for example you may want to iterate through comments in each article and emit them. The most common uses of views are querying data from documents, rendering lists or tables for extracted data, summarising, filtering, calculating, counting or reducing numbers of documents.</p>\n<p>When a new view is created and first time accessed, CouchDB processes all documents in the database and creates an index made up of information generated by the view function. Depending on amount of data to process, this may make take a while. Every time a view is changed, all data (in the database that uses that particular view) needs to be reindexed. Every time a document in a database is created or changed, CouchDB needs to update the view&#39;s index. Even though you access one view only after adding a new document, all views in the same design documents are updated. Under the hood, the indexes are in the form of (B-Trees)[<a href=\"http://guide.couchdb.org/draft/btree.html\">http://guide.couchdb.org/draft/btree.html</a>], this ensures efficient retrieval of data.</p>\n<p>Views are made of two functions: <code>map</code> and <code>reduce</code>. (MapReduce)[<a href=\"https://en.wikipedia.org/wiki/MapReduce\">https://en.wikipedia.org/wiki/MapReduce</a>] is a programming model that has become very popular due to it&#39;s efficiently processing large amounts of data and transforming it into useful information. </p>\n<p>During the map phase CouchDB takes each document from the database and sends it to the map function, which may or may not emit the document in the same or different form to generate the view. The pieces of data that are emitted are document&#39;s ID, the key that can be used later for querying and the value. Both the key and the value may take the form of a boolean, string, number, lists, objects. Emitting is done with the built-in <code>emit()</code> function that takes the key and value as two arguments.</p>\n<p>By convention, the view names are prefixed with &quot;_by&quot; to indicate by which criteria the view returns the data.</p>\n<p>In the example below the view name is &quot;by_title&quot; and the map function checks if the document (article) has a value for the title and emits that title as the key and no value.</p>\n<pre><code class=\"lang-js\">{\n    &quot;views&quot;: {\n        &quot;by_title&quot;: {\n            &quot;map&quot;: &quot;function(doc) { if (doc.title != null) emit(doc.title, null) }&quot;\n        },\n}\n</code></pre>\n<hr>\n<h3 id=\"5-5-querying-views\">5.5 Querying views</h3>\n<p>CouchDB sorts view results by key values represented as UTF-8 encoded strings.</p>\n<p>The following map function returns the list of documents with the published_date value as the key and the object containing article&#39;s title and author as the value:</p>\n<pre><code class=\"lang-js\">function(doc){\n  if(doc.published_date){\n    emit(doc.published_date, {title: doc.title, author: doc.author\n  });\n}\n</code></pre>\n<p>If we call the view without any extra parameters we are going to receive all records (note the key always contains the &quot;id&quot;, even if it wasn&#39;t emitted by us):</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_published_date&#39;\n\n{&quot;total_rows&quot;:7,&quot;offset&quot;:0,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f004958&quot;,&quot;key&quot;:&quot;2014-01-20T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;Make your C++ Effective&quot;,&quot;author&quot;:&quot;tom&quot;}},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f005603&quot;,&quot;key&quot;:&quot;2014-10-10T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;Effective Problem Solving&quot;,&quot;author&quot;:&quot;kim&quot;}},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f001bbc&quot;,&quot;key&quot;:&quot;2014-10-19T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;Secrets of Effective Negotiations&quot;,&quot;author&quot;:&quot;kim&quot;}},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f0032f4&quot;,&quot;key&quot;:&quot;2014-11-18T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;Grandma&#39;s Cook Book Samples&quot;,&quot;author&quot;:&quot;mark&quot;}},\n{&quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,&quot;key&quot;:&quot;2015-03-19T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;10 Project Management Tips&quot;,&quot;author&quot;:&quot;mark&quot;}},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f000743&quot;,&quot;key&quot;:&quot;2015-05-29T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;Programming Game AI&quot;,&quot;author&quot;:&quot;tom&quot;}},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f0013a3&quot;,&quot;key&quot;:&quot;2015-07-03T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;Marketing and Public Relations in Startups&quot;,&quot;author&quot;:&quot;kim&quot;}}\n]}\n</code></pre>\n<p>The blogarticles published dates are ranging from 2014-01-20 to 2015-07-03. If we wanted to request a document with a specific published date using the by_published_date view, we can provide the date as the value of the <code>key</code> query string parameter:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?key=&quot;2015-03-19T00:00:00.000Z&quot;&#39;\n\n{&quot;total_rows&quot;:7,&quot;offset&quot;:4,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,&quot;key&quot;:&quot;2015-03-19T00:00:00.000Z&quot;,&quot;value&quot;:{&quot;title&quot;:&quot;10 Project Management Tips&quot;,&quot;author&quot;:&quot;mark&quot;}}\n]}\n</code></pre>\n<p>To get articles with published_date starting from and including a specific date we can use the <code>startkey</code> parameter. To get articles with date including and no older that a specific date we can use the <code>endkey</code> parameter. For getting the range between two dates we could use both parameters together:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?startkey=&quot;2014-11-18T00:00:00.000Z&quot;&amp;endkey=&quot;2015-03-19T00:00:00.000Z&quot;&#39;\n\n{\n    &quot;total_rows&quot;: 7,\n    &quot;offset&quot;: 3,\n    &quot;rows&quot;: [{\n        &quot;id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f0032f4&quot;,\n        &quot;key&quot;: &quot;2014-11-18T00:00:00.000Z&quot;,\n        &quot;value&quot;: {\n            &quot;title&quot;: &quot;Grandma&#39;s Cook Book Samples&quot;,\n            &quot;author&quot;: &quot;mark&quot;\n        }\n    }, {\n        &quot;id&quot;: &quot;24c8ea5e0552db4cfdede39584004f86&quot;,\n        &quot;key&quot;: &quot;2015-03-19T00:00:00.000Z&quot;,\n        &quot;value&quot;: {\n            &quot;title&quot;: &quot;10 Project Management Tips&quot;,\n            &quot;author&quot;: &quot;mark&quot;\n        }\n    }]\n}\n</code></pre>\n<p>To learn more about views visit: <a href=\"http://guide.couchdb.org/draft/views.html\">http://guide.couchdb.org/draft/views.html</a></p>\n<hr>\n<h3 id=\"5-6-querying-compound-keys\">5.6 Querying compound keys</h3>\n<p>It is also possible to search by more complex keys then just a single dimensional value. If we wanted to find all comments having  article_rate equal or greater than &quot;3&quot; for articles from the &quot;management&quot; category, we would first need to create the following <code>by_category_comment_rate</code> view map function emitting the compound key made of two values:</p>\n<pre><code class=\"lang-js\">function(doc) {\n  if (doc.category &amp;&amp; doc.comments) {\n    for (var i = 0, len = doc.comments.length; i &lt; len; i++) {\n      var commRate = doc.comments[i].article_rate;\n      if (commRate !== null) {\n        emit([doc.category, commRate], doc.title);\n      }\n    }\n  }\n}\n</code></pre>\n<p>This will give the following output when querying without any parameters (document ids are shortened for brevity):</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_category_comment_rate&#39;\n\n{&quot;total_rows&quot;:19,&quot;offset&quot;:0,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;32f4&quot;,&quot;key&quot;:[&quot;cooking&quot;,2],&quot;value&quot;:&quot;Grandma&#39;s Cook Book Samples&quot;},\n{&quot;id&quot;:&quot;32f4&quot;,&quot;key&quot;:[&quot;cooking&quot;,3],&quot;value&quot;:&quot;Grandma&#39;s Cook Book Samples&quot;},\n{&quot;id&quot;:&quot;32f4&quot;,&quot;key&quot;:[&quot;cooking&quot;,4],&quot;value&quot;:&quot;Grandma&#39;s Cook Book Samples&quot;},\n{&quot;id&quot;:&quot;32f4&quot;,&quot;key&quot;:[&quot;cooking&quot;,5],&quot;value&quot;:&quot;Grandma&#39;s Cook Book Samples&quot;},\n{&quot;id&quot;:&quot;5603&quot;,&quot;key&quot;:[&quot;management&quot;,null],&quot;value&quot;:&quot;Effective Problem Solving&quot;}\n// ... and so on ...\n]}\n</code></pre>\n<p>Now we can send a GET request using the <code>startkey</code> and <code>endkey</code> in a form of array, where the first item would be the category and the second the start and end of the comment rate range. If our function emitted more values in the key array, the <code>startkey</code> and <code>endkey</code> parameters could contain more values as well. Note that we use the <code>--globoff</code> or <code>-g</code> parameter, as otherwise the square brackets would cause the following error:</p>\n<pre><code class=\"lang-bash\">curl: (3) [globbing] bad range specification in column 89\n</code></pre>\n<p>Here are the results:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET --globoff &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_category_comment_rate?startkey=[&quot;management&quot;,3]&amp;endkey=[&quot;management&quot;,5]&#39;\n\n{&quot;total_rows&quot;:19,&quot;offset&quot;:9,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f001bbc&quot;,&quot;key&quot;:[&quot;management&quot;,3],&quot;value&quot;:&quot;Secrets of Effective Negotiations&quot;},\n{&quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,&quot;key&quot;:[&quot;management&quot;,4],&quot;value&quot;:&quot;10 Project Management Tips&quot;},\n{&quot;id&quot;:&quot;24c8ea5e0552db4cfdede39584004f86&quot;,&quot;key&quot;:[&quot;management&quot;,5],&quot;value&quot;:&quot;10 Project Management Tips&quot;},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f001bbc&quot;,&quot;key&quot;:[&quot;management&quot;,5],&quot;value&quot;:&quot;Secrets of Effective Negotiations&quot;}\n]}\n</code></pre>\n<p>Despite the fact that the view queried using the filter returned only 4 records, the total_rows property shows total number of records that the view returns (with no query string filter applied).</p>\n<hr>\n<h3 id=\"5-7-lookup-views\">5.7 Lookup views</h3>\n<hr>\n<h4 id=\"5-7-1-view-collation\">5.7.1 View Collation</h4>\n<p>Unlike in RDBMS (Relational Database Management Systems), it is not possible to join results from two different tables (or databases in CouchDB world) using one request. Instead two separate requests would need to be sent to each of the databases and data would need to be joined on the client side.</p>\n<p>One common approach to overcome this limitation, described in the <a href=\"http://docs.couchdb.org/en/1.6.1/couchapp/views/joins.html\">official documentation</a>, is to store two different type of documents in the same database. </p>\n<p>To explain that better, lets discuss the blogarticles database we&#39;ve been using so far. The fact that the article and associated comments are part of the same document allows us to request them together using one request. But the problem is that if a new comment needs to be added or an existing comment needs to be edited, the whole document needs to be updated because comments are just article&#39;s properties. In the case when multiple blog viewers wanted to comment the same article at the same time, some of them would get document update conflict error since as soon as the first user adds her comment, the revision number is going to be updated. </p>\n<p>To overcome this issue we can split articles and comments but still keep them in the same database allowing the view to access both. Lets take this document:</p>\n<pre><code class=\"lang-js\">{\n   &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f0013a3&quot;,\n   &quot;title&quot;: &quot;Marketing and Public Relations in Startups&quot;,\n   &quot;category&quot;: &quot;startups&quot;,\n   &quot;published_date&quot;: &quot;2015-07-03T00:00:00.000Z&quot;,\n   &quot;author&quot;: &quot;kim&quot;,\n   &quot;tags&quot;: [&quot;marketing&quot;, &quot;public relations&quot;],\n   &quot;visits&quot;: 4300,\n   &quot;comments&quot;: [\n       {\n           &quot;nick&quot;: &quot;alex&quot;,\n           &quot;date&quot;: &quot;2015-07-03T00:00:00.000Z&quot;,\n           &quot;comment&quot;: &quot;Sample comment&quot;,\n           &quot;article_rate&quot;: 3\n       },\n       {\n           &quot;nick&quot;: &quot;nick&quot;,\n           &quot;date&quot;: &quot;2015-08-09T00:00:00.000Z&quot;,\n           &quot;comment&quot;: &quot;Sample comment&quot;,\n           &quot;article_rate&quot;: 2\n       }\n   ]\n}\n</code></pre>\n<p>And split it into three, first the article and then the two comments:</p>\n<pre><code class=\"lang-js\">{\n   &quot;_id&quot;: &quot;marketing-and-public-relations-in-startups&quot;,\n   &quot;type&quot;: &quot;article&quot;,\n   &quot;title&quot;: &quot;Marketing and Public Relations in Startups&quot;,\n   &quot;category&quot;: &quot;startups&quot;,\n   &quot;published_date&quot;: &quot;2015-07-03T00:00:00.000Z&quot;,\n   &quot;author&quot;: &quot;kim&quot;,\n   &quot;tags&quot;: [&quot;marketing&quot;,&quot;public relations&quot;],\n   &quot;visits&quot;: 4300\n}, {\n   &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f00a488&quot;,\n   &quot;type&quot;: &quot;comment&quot;,\n   &quot;article&quot;: &quot;marketing-and-public-relations-in-startups&quot;,\n   &quot;nick&quot;: &quot;alex&quot;,\n   &quot;date&quot;: &quot;2015-07-03T00:00:00.000Z&quot;,\n   &quot;comment&quot;: &quot;Sample comment&quot;,\n   &quot;article_rate&quot;: 3\n}, {\n   &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f00aa87&quot;,\n   &quot;type&quot;: &quot;comment&quot;,\n   &quot;article&quot;: &quot;marketing-and-public-relations-in-startups&quot;,\n   &quot;nick&quot;: &quot;nick&quot;,\n   &quot;date&quot;: &quot;2015-08-09T00:00:00.000Z&quot;,\n   &quot;comment&quot;: &quot;Sample comment&quot;,\n   &quot;article_rate&quot;: 2\n}\n</code></pre>\n<p>What we have done here is added a new property called <code>type</code> that describes the type of the document, which could be <code>article</code> or <code>comment</code>. For the sake of brevity, instead of using UUID for article IDs, we use the <code>slug</code>, which is just a user friendly version of the article title in the form of URL. By doing this we also agree that article titles are required to be unique or alternatively we could add some logic to make sure that if there is a title conflict, a slug would get some random prefix like a digit to ensure uniqueness (we could use the <a href=\"https://wiki.apache.org/couchdb/Document_Update_Handlers\">update handlers</a> in the design document for this purpose). We linked comment documents with their parent articles using the <code>article</code> property populated with the article&#39;s ID.</p>\n<p>Now, the next step is to create a view with the map function called &#39;by_article_id&#39; that would enable us to get both the articles and their comments together:</p>\n<pre><code class=\"lang-js\">function(doc){\n  if (doc.type === &quot;article&quot;) {\n     emit([doc._id, 0],doc);\n  }\n  else if (doc.type === &quot;comment&quot;) {\n     emit([doc.article, 1],doc);\n  }\n}\n</code></pre>\n<p>If we send the following query:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_article_id?key=[&quot;marketing-and-public-relations-in-startups&quot;,0]&#39;\n</code></pre>\n<p>we will get just the article itself. If we provide 1 as the second value to the key we will get comments only:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_article_id?key=[&quot;marketing-and-public-relations-in-startups&quot;,1]\n</code></pre>\n<p>But if we provide a range we will get both type of documents ordered in the way that comments are positioned after the article - thanks to the second value in the emitted key, called <code>sorting token</code>:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_article_id?startkey=[&quot;marketing-and-public-relations-in-startups&quot;,0]&amp;endkey=[&quot;marketing-and-public-relations-in-startups&quot;,1]&#39; --globoff\n\n{\n    &quot;total_rows&quot;: 6,\n    &quot;offset&quot;: 3,\n    &quot;rows&quot;: [{\n        &quot;id&quot;: &quot;marketing-and-public-relations-in-startups&quot;,\n        &quot;key&quot;: [&quot;marketing-and-public-relations-in-startups&quot;, 0],\n        &quot;value&quot;: {\n            &quot;_id&quot;: &quot;marketing-and-public-relations-in-startups&quot;,\n            &quot;type&quot;: &quot;article&quot;,\n            &quot;title&quot;: &quot;Marketing and Public Relations in Startups&quot;,\n            &quot;category&quot;: &quot;startups&quot;,\n            &quot;published_date&quot;: &quot;2015-07-03T00:00:00.000Z&quot;,\n            &quot;author&quot;: &quot;kim&quot;,\n            &quot;tags&quot;: [&quot;marketing&quot;, &quot;public relations&quot;, &quot;startup&quot;, &quot;tips&quot;],\n            &quot;visits&quot;: 4300\n        }\n    }, {\n        &quot;id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f00a488&quot;,\n        &quot;key&quot;: [&quot;marketing-and-public-relations-in-startups&quot;, 1],\n        &quot;value&quot;: {\n            &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f00a488&quot;,\n            &quot;type&quot;: &quot;comment&quot;,\n            &quot;article&quot;: &quot;marketing-and-public-relations-in-startups&quot;,\n            &quot;nick&quot;: &quot;alex&quot;,\n            &quot;date&quot;: &quot;2015-07-03T00:00:00.000Z&quot;,\n            &quot;comment&quot;: &quot;Sample comment&quot;,\n            &quot;article_rate&quot;: 3\n        }\n    }, {\n        &quot;id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f00aa87&quot;,\n        &quot;key&quot;: [&quot;marketing-and-public-relations-in-startups&quot;, 1],\n        &quot;value&quot;: {\n            &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f00aa87&quot;,\n            &quot;type&quot;: &quot;comment&quot;,\n            &quot;article&quot;: &quot;marketing-and-public-relations-in-startups&quot;,\n            &quot;nick&quot;: &quot;nick&quot;,\n            &quot;date&quot;: &quot;2015-08-09T00:00:00.000Z&quot;,\n            &quot;comment&quot;: &quot;Sample comment&quot;,\n            &quot;article_rate&quot;: 2\n        }\n    }]\n}\n</code></pre>\n<p>More on collation including sorting by keys can be found here: <a href=\"http://docs.couchdb.org/en/1.6.1/couchapp/views/collation.html#views-collation\">http://docs.couchdb.org/en/1.6.1/couchapp/views/collation.html#views-collation</a>.</p>\n<hr>\n<h4 id=\"5-7-2-linked-documents\">5.7.2 Linked Documents</h4>\n<p>Now what solution could we use if we wanted to request comments by their ID and also see the corresponding article using one request? We could create a view as below, where the map function is called &quot;by_comments&quot;:</p>\n<pre><code class=\"lang-js\">function(doc){\n  if (doc.type === &quot;comment&quot;) {\n     emit(doc._id, {&quot;_id&quot;:doc.article});\n  }\n}\n</code></pre>\n<p>What we are doing here is we emit the comment&#39;s doc_id in order to be able to query by comment&#39;s ID and as the value we emit an object with the &quot;_id&quot; as a key and the corresponding article&#39;s ID as a value.</p>\n<p>Querying by key gives us the following response:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_comment?key=&quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;&#39;\n\n&quot;rows&quot;: [{\n    &quot;id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n    &quot;key&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n    &quot;value&quot;: {\n        &quot;_id&quot;: &quot;make-your-c++-effective&quot;\n    }\n}]\n</code></pre>\n<p>But if we add the <code>include_docs=true</code> parameter we are going to receive something completely different:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_comment?key=&quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;&amp;include_docs=true&#39;\n\n{\n    &quot;total_rows&quot;: 4,\n    &quot;offset&quot;: 0,\n    &quot;rows&quot;: [{\n        &quot;id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n        &quot;key&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n        &quot;value&quot;: {\n            &quot;_id&quot;: &quot;make-your-c++-effective&quot;\n        },\n        &quot;doc&quot;: {\n            &quot;_id&quot;: &quot;make-your-c++-effective&quot;,\n            &quot;_rev&quot;: &quot;5-19b57826876e9bd14b526f5d354c02a1&quot;,\n            &quot;type&quot;: &quot;article&quot;,\n            &quot;title&quot;: &quot;Make your C++ Effective&quot;,\n            &quot;category&quot;: &quot;programming&quot;,\n            &quot;published_date&quot;: &quot;2014-01-20T00:00:00.000Z&quot;,\n            &quot;author&quot;: &quot;tom&quot;,\n            &quot;tags&quot;: [&quot;programming&quot;, &quot;c++&quot;, &quot;software&quot;],\n            &quot;visits&quot;: 1234\n        }\n    }]\n}\n</code></pre>\n<p>As you can see the <code>include_docs=true</code> option made CouchDB add the <code>doc</code> property to the returned results containing the article document referenced by the _id value emitted from the view.</p>\n<p>If we wanted to receive the full comment document as well, we could modify the view so that it could have another emit or add another property to the returned object:</p>\n<pre><code class=\"lang-js\">function(doc){\n  if (doc.type === &quot;comment&quot;) {\n     emit(doc._id, null);\n     emit(doc._id, {&quot;_id&quot;:doc.article});\n  }\n}\n\n// or\n\nfunction(doc){\n  if (doc.type === &quot;comment&quot;) {\n     emit(doc._id, {&quot;_id&quot;:doc.article, &quot;doc&quot;:doc});\n  }\n}\n</code></pre>\n<p>Why are we emitting null in the first emit? If we didn&#39;t, the <code>include_docs=true</code> switch would make the same document returned twice:</p>\n<pre><code class=\"lang-bash\">{\n        &quot;id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n        &quot;key&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n        &quot;value&quot;: {\n            &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n            &quot;_rev&quot;: &quot;2-da6c6825e4f305fe8034bbc57d5c2610&quot;,\n            &quot;type&quot;: &quot;comment&quot;,\n            &quot;article&quot;: &quot;make-your-c++-effective&quot;,\n            &quot;nick&quot;: &quot;steve&quot;,\n            &quot;date&quot;: &quot;2014-01-20T00:00:00.000Z&quot;,\n            &quot;comment&quot;: &quot;Sample comment&quot;,\n            &quot;article_rate&quot;: 4\n        },\n        &quot;doc&quot;: {\n            &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n            &quot;_rev&quot;: &quot;2-da6c6825e4f305fe8034bbc57d5c2610&quot;,\n            &quot;type&quot;: &quot;comment&quot;,\n            &quot;article&quot;: &quot;make-your-c++-effective&quot;,\n            &quot;nick&quot;: &quot;steve&quot;,\n            &quot;date&quot;: &quot;2014-01-20T00:00:00.000Z&quot;,\n            &quot;comment&quot;: &quot;Sample comment&quot;,\n            &quot;article_rate&quot;: 4\n        }\n    }\n</code></pre>\n<p>If we emit null, the document is returned in the doc property:</p>\n<pre><code class=\"lang-emit\">{\n        &quot;id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n        &quot;key&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n        &quot;value&quot;: null,\n        &quot;doc&quot;: {\n            &quot;_id&quot;: &quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,\n            &quot;_rev&quot;: &quot;2-da6c6825e4f305fe8034bbc57d5c2610&quot;,\n            &quot;type&quot;: &quot;comment&quot;,\n            &quot;article&quot;: &quot;make-your-c++-effective&quot;,\n            &quot;nick&quot;: &quot;steve&quot;,\n            &quot;date&quot;: &quot;2014-01-20T00:00:00.000Z&quot;,\n            &quot;comment&quot;: &quot;Sample comment&quot;,\n            &quot;article_rate&quot;: 4\n        }\n    }\n</code></pre>\n<p>The <code>include_docs</code> switch lets the CouchDB engine query the database &quot;on the fly&quot; when a request is sent and inject resulting document to the response as the <code>doc</code> value. If we emit documents as values in our view (doc as the second parameter in the emit function), these documents are actually going to be cached/indexed on disk (as discussed earlier). The official documentation in the chapter for <a href=\"http://docs.couchdb.org/en/1.6.1/couchapp/views/collation.html#views-collation\">joins</a> advises that it is not recommended to emit the documents in the view and instead, it is suggested to include the bodies of the documents by requesting the view with <code>?include_docs=true</code>. This way we save disk space for a price of incurring overhead of making the engine querying the docs from the database requested by us. More details in <a href=\"http://stackoverflow.com/questions/36210507/why-is-the-couchdb-documentation-suggesting-docs-should-not-be-emitted-in-the-vi\">this thread</a>.</p>\n<hr>\n<h3 id=\"5-8-reduce-functions\">5.8 Reduce functions</h3>\n<hr>\n<h4 id=\"5-8-1-purpose\">5.8.1 Purpose</h4>\n<p>Role of the reduce functions is to collate the output of the map function call by counting, summing up, grouping items of a particular type. Output of the reduce function is always <strong>one</strong> new record containing the result of the operation on all documents returned from the map step. Results of the reduce step are indexed in the same way as the results of the map step, this means that the response will be much faster as the data comes from the &quot;cache&quot; and isn&#39;t calculated &quot;on the fly&quot; every time a query is sent. Two main things to know about the reduction functionality is the available built-in functions and what are the group levels.</p>\n<hr>\n<h4 id=\"5-8-2-using-built-in-functions\">5.8.2 Using built in functions</h4>\n<hr>\n<h5 id=\"5-8-2-1-count\">5.8.2.1 Count</h5>\n<p>If we wanted to count how many comments we have in total in all articles, we could come up with the following view, where the map function returns each record (the fact that value is 1 isn&#39;t important, it could be null as well) and the <code>_count</code> function as the reduce:</p>\n<pre><code class=\"lang-js\">&quot;all_comments&quot;: {\n      &quot;map&quot;: &quot;function(doc) { if (doc.type == &#39;comment&#39;)  emit(doc.id, 1) }&quot;,\n      &quot;reduce&quot; : &quot;_count&quot;\n}\n</code></pre>\n<p>If we query this without reduction using the <code>reduce=false</code> parameter we are going to get this result:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/all_comments?reduce=false&#39;\n\n{&quot;total_rows&quot;:4,&quot;offset&quot;:0,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f008f03&quot;,&quot;key&quot;:null,&quot;value&quot;:1},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f00948e&quot;,&quot;key&quot;:null,&quot;value&quot;:1},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f00a488&quot;,&quot;key&quot;:null,&quot;value&quot;:1},\n{&quot;id&quot;:&quot;3c9187bdabb2408e3fbfe6a76f00aa87&quot;,&quot;key&quot;:null,&quot;value&quot;:1}\n]}\n</code></pre>\n<p>If we do not provide any parameter which is equivalent to providing <code>group_level=0</code> we are going to get the value that represents the result of taking each of the records returned from the map function and adding it to the counter:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/all_comments&#39;\n\n{&quot;rows&quot;:[\n{&quot;key&quot;:null,&quot;value&quot;:4}\n]}\n</code></pre>\n<hr>\n<h5 id=\"5-8-2-2-sum\">5.8.2.2 Sum</h5>\n<p>As an exercise lets sum up the visits in all articles, in other words lets get a number representing total visits to our blog. For this we would create a view with the map function returning the visits value for each article and use the <code>_sum</code> as the reduction function:</p>\n<pre><code class=\"lang-js\">&quot;all_articles_visits&quot;: {\n   &quot;map&quot;: &quot;function(doc) { if (doc.type === &#39;article&#39;)  emit(doc.id, doc.visits) }&quot;,\n   &quot;reduce&quot;: &quot;_sum&quot;\n}\n</code></pre>\n<p>It is important to note that since the sum is going to add numbers, the number needs to be returned from the emit function. If the value isn&#39;t actually a number but a string, it should be converted into number using likes of <code>parseInt</code> or <code>parseFloat</code>.</p>\n<p>Without reduce and with reduce:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/all_articles_visits?reduce=false&#39;\n\n{&quot;total_rows&quot;:2,&quot;offset&quot;:0,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;make-your-c++-effective&quot;,&quot;key&quot;:null,&quot;value&quot;:1234},\n{&quot;id&quot;:&quot;marketing-and-public-relations-in-startups&quot;,&quot;key&quot;:null,&quot;value&quot;:4300}\n]}\n\n$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/all_articles_visits&#39;\n\n{&quot;rows&quot;:[\n{&quot;key&quot;:null,&quot;value&quot;:5534}\n]}\n</code></pre>\n<hr>\n<h5 id=\"5-8-2-3-stats\">5.8.2.3 Stats</h5>\n<p>For the following view, where we use <code>_stats</code> for the reduce:</p>\n<pre><code class=\"lang-js\">&quot;all_articles_stats&quot;: {\n   &quot;map&quot;: &quot;function(doc) { if (doc.type === &#39;article&#39;)  emit(doc.id, doc.visits); }&quot;,\n   &quot;reduce&quot;: &quot;_stats&quot;\n}\n</code></pre>\n<p>we will get the following response data:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/all_articles_stats?reduce=false&#39;\n\n{&quot;total_rows&quot;:2,&quot;offset&quot;:0,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;make-your-c++-effective&quot;,&quot;key&quot;:null,&quot;value&quot;:1234},\n{&quot;id&quot;:&quot;marketing-and-public-relations-in-startups&quot;,&quot;key&quot;:null,&quot;value&quot;:4300}\n]}\n\n$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/all_articles_stats&#39;\n\n{&quot;rows&quot;:[\n{&quot;key&quot;:null,&quot;value&quot;:{&quot;sum&quot;:5534,&quot;count&quot;:2,&quot;min&quot;:1234,&quot;max&quot;:4300,&quot;sumsqr&quot;:20012756}}\n]}\n</code></pre>\n<p>Since the stats method similarly to the sum takes numbers, the emit is required to return numbers.</p>\n<hr>\n<h4 id=\"5-8-3-group-levels\">5.8.3 Group levels</h4>\n<p>To better explain the group levels, lets use the example database presented at the beginning of this article and the following view that will provide us information of which author and which article category became most successful in terms of number of visits (our key is is the <code>collation key</code> since it is made up of two elements):</p>\n<pre><code class=\"lang-js\">&quot;by_name_category&quot;: {\n   &quot;map&quot;: &quot;function(doc) { emit([doc.author, doc.category], doc.visits) }&quot;,\n   &quot;reduce&quot;: &quot;_sum&quot;\n}\n</code></pre>\n<p>**Without reduction99 we will get the following results (ids truncated for brevity):</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?reduce=false&#39;\n\n{&quot;total_rows&quot;:12,&quot;offset&quot;:0,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;1bbc&quot;,&quot;key&quot;:[&quot;kim&quot;,&quot;management&quot;],&quot;value&quot;:8756},\n{&quot;id&quot;:&quot;5603&quot;,&quot;key&quot;:[&quot;kim&quot;,&quot;management&quot;],&quot;value&quot;:12853},\n{&quot;id&quot;:&quot;13a3&quot;,&quot;key&quot;:[&quot;kim&quot;,&quot;startups&quot;],&quot;value&quot;:4300},\n{&quot;id&quot;:&quot;32f4&quot;,&quot;key&quot;:[&quot;mark&quot;,&quot;cooking&quot;],&quot;value&quot;:7845},\n{&quot;id&quot;:&quot;4f86&quot;,&quot;key&quot;:[&quot;mark&quot;,&quot;management&quot;],&quot;value&quot;:1000},\n{&quot;id&quot;:&quot;0743&quot;,&quot;key&quot;:[&quot;tom&quot;,&quot;programming&quot;],&quot;value&quot;:600},\n{&quot;id&quot;:&quot;4958&quot;,&quot;key&quot;:[&quot;tom&quot;,&quot;programming&quot;],&quot;value&quot;:1234}\n]}\n</code></pre>\n<p>Notice that the compound key is made of two values. By using the array as the key we can group to multiple levels (as many as values in the key).</p>\n<p><strong>Reduction with level 0</strong>: <code>group_level=0</code>, equivalent to <code>group=false</code> or no parameters in the query string, is the default and means that no key (sent from the emit) is used for grouping - in other words each line is taken into calculation separately. This is called reducing to a single value. The key in the reduce results is null, this is because we took all different records and calculated them together, so the key is irrelevant in this case.</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?group_level=0&#39;\n\n{&quot;rows&quot;:[\n{&quot;key&quot;:null,&quot;value&quot;:36588}\n]}\n</code></pre>\n<p><strong>Reduction with level 1</strong>: <code>group_level=1</code> means that the first key is going to be taken into account in the calculations. Since the first item in the key is the author name, all values (visits) for each name are are grouped and added to the sum, hence we are getting summary per each user.</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?group_level=1&#39;\n\n{&quot;rows&quot;:[\n{&quot;key&quot;:[&quot;kim&quot;],&quot;value&quot;:47518},\n{&quot;key&quot;:[&quot;mark&quot;],&quot;value&quot;:17690},\n{&quot;key&quot;:[&quot;tom&quot;],&quot;value&quot;:2434}\n]}\n</code></pre>\n<p><strong>Reduction with level 2</strong>: <code>group_level=2</code> means that both values from the compound key are going to be used to group values. This means that CouchDB will go through the records, if it finds ones with the same key (both values), it will summarise their values. To explain this better, if we look at the results returned from the view without reduction turned on, we will notice that some records have the same keys, in example these (ids truncated for brevity):</p>\n<pre><code class=\"lang-js\">{&quot;id&quot;:&quot;1bbc&quot;,&quot;key&quot;:[&quot;kim&quot;,&quot;management&quot;],&quot;value&quot;:8756},\n{&quot;id&quot;:&quot;5603&quot;,&quot;key&quot;:[&quot;kim&quot;,&quot;management&quot;],&quot;value&quot;:12853},\n\n{&quot;id&quot;:&quot;0743&quot;,&quot;key&quot;:[&quot;tom&quot;,&quot;programming&quot;],&quot;value&quot;:600},\n{&quot;id&quot;:&quot;4958&quot;,&quot;key&quot;:[&quot;tom&quot;,&quot;programming&quot;],&quot;value&quot;:1234},\n</code></pre>\n<p>The pairs above will be sum up, as we can observe in the results below:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?group_level=2&#39;\n\n{&quot;rows&quot;:[\n{&quot;key&quot;:[&quot;kim&quot;,&quot;management&quot;],&quot;value&quot;:21609},\n{&quot;key&quot;:[&quot;kim&quot;,&quot;startups&quot;],&quot;value&quot;:4300},\n{&quot;key&quot;:[&quot;mark&quot;,&quot;cooking&quot;],&quot;value&quot;:7845},\n{&quot;key&quot;:[&quot;mark&quot;,&quot;management&quot;],&quot;value&quot;:1000},\n{&quot;key&quot;:[&quot;tom&quot;,&quot;programming&quot;],&quot;value&quot;:1834}\n]}\n</code></pre>\n<p>Another way of turning reduce on is using the <code>group=true</code> (which is default in Futon - CouchDB&#39;s default client). Using this parameter would have the same effect as <code>group_level=2</code> in our example database and view as CouchDB would just take all key components returned for each record from the map to group documents and reduce them, into corresponding values.</p>\n<p>If we repeat request with <code>group_level=3</code>, we will get the same results as for level 2 because there are only two keys returned from the emit.</p>\n<p>More info on reduce and lookup views can be found <a href=\"https://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Lookup_Views\">https://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Lookup_Views</a>.</p>\n<hr>\n<h3 id=\"5-9-custom-reduce-functions-rereduce\">5.9 Custom reduce functions - rereduce</h3>\n<p>The reduce functions allow us creating custom calculations beyond the built-in functions. The reduce function takes three arguments: </p>\n<ul>\n<li>document keys in the form of array consisting of the key and document&#39;s ID received from the map function (only in non-rereduce mode - more on that soon)</li>\n<li>document values as the array of values emitted from the map function (in rereduce mode values will be product of the previous reduce)</li>\n<li>boolean value, if true, then the function is called by itself or in other words run in the <code>rereduce</code> mode.</li>\n</ul>\n<p>Lets create a reduce function that will return us an object containing count of records and sum of the visits:</p>\n<pre><code class=\"lang-js\">function (keys, values, rereduce) {\n   var count = 0, sum = 0, i;\n   count = values.length;\n   sum = sum(values);\n\n   return {count: count, sum: sum};\n}\n</code></pre>\n<p>In the example reduce function above we are simply taking the values emitted from the map function (each item in the value array comes from separate emits for each individual record). We are going through each of the value incrementing the count and adding the number of visits to the sum. For our sample database with few records the expected output would be this:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET &#39;http://localhost:5984/blogarticles/_design/articles/_view/by_name_category_custom?group_level=1&#39;\n\n{\n   &quot;rows&quot;:[{\n      &quot;key&quot;:[&quot;kim&quot;],\n      &quot;value&quot;:{&quot;count&quot;:3,&quot;sum&quot;:25909}\n    },{\n      &quot;key&quot;:[&quot;mark&quot;],\n      &quot;value&quot;:{&quot;count&quot;:2,&quot;sum&quot;:8845}\n    },{\n       &quot;key&quot;:[&quot;tom&quot;],\n       &quot;value&quot;:{&quot;count&quot;:2,&quot;sum&quot;:1834}\n    }]\n}\n</code></pre>\n<p>If we run the code above on a very large amount of records, instead of the expected results as before, we could see these:</p>\n<pre><code class=\"lang-js\">{\n    &quot;rows&quot;:[{\n        &quot;key&quot;:&quot;null&quot;,\n        &quot;value&quot;: {\n            count: 3,\n            sum: &quot;0[object Object][object Object][object Object]&quot;\n        }\n    }]\n}\n</code></pre>\n<p>This can happen if there is a lot of data to process (many rows produced by emits), in such case the reduction process will be repeated - the reduce function is going to be called by itself. CouchDB uses divide and conquer strategy to calculate reduce results more efficiently by breaking up the key/value pairs into smaller chunks. The results are combined into arrays and they are passed to reduce again - which can happen more than once!</p>\n<p>This is what the custom reduce function receives from the map function that emits three documents:</p>\n<pre><code class=\"lang-js\">reduce([ [key1,id1], [key2,id2], [key3,id3] ], [value1,value2,value3], false)\n</code></pre>\n<p>If we put a breakpoint and inspected the argument values we would see something along these lines (ids and records truncated for the sake of brevity) - refer to the sample records presented in 5.8.3:</p>\n<pre><code class=\"lang-js\">reduce([ [[&quot;kim&quot;,&quot;management&quot;], &quot;1bbc&quot;], [[&quot;kim&quot;, &quot;management&quot;], &quot;5603&quot;], [[&quot;kim&quot;, &quot;startups&quot;], &quot;13a3&quot;] ...], [8756, 12853, 4300], false)\n</code></pre>\n<p>If the same reduce function was called in the rereduce mode, it wouldn&#39;t receive the keys, the values would be calculations returned from the previous reduce call and the boolean will be true:</p>\n<pre><code class=\"lang-js\">reduce(null, [value1, value2], true)\n</code></pre>\n<p>If we inspected the argument values in this case we would see something along these lines:</p>\n<pre><code class=\"lang-js\">reduce(null, [{count:123, sum:123}, {count:213, sum:231}], true)\n</code></pre>\n<p>In order to make sure our custom reduce function works properly with larger amount of data, we will need to add a condition to handle the rereduce scenario and correctly use the values passed:</p>\n<pre><code class=\"lang-js\">function (keys, values, rereduce) {\n   var count = 0, sum = 0, i;\n\n   if (rereduce) {\n      for (i in values) {\n         count += values[i].count;\n         sum += values[i].sum;\n      }\n   } else {\n      count = values.length;\n      sum = sum(values);\n   }\n\n   return {count: count, sum: sum};\n}\n</code></pre>\n<hr>\n<h3 id=\"5-10-temporary-views\">5.10 Temporary views</h3>\n<p>Temporary views are the views that aren&#39;t stored permanently in the design document and therefore don&#39;t have any index data stored for performance efficiency (hence they are also called one-off queries). Instead, when making request, we can provide our map or reduce function to a special _temp_view endpoint and let CouchDB query the database &quot;on the fly&quot; and return results. This isn&#39;t a solution we would use for production, but is very handy to quickly check things.</p>\n<p>In example with this view we could request tags for each article (ids and results truncated for the sake of brevity):</p>\n<pre><code class=\"lang-bash\">$ curl -X POST http://localhost:5984/blogarticles/_temp_view -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;map&quot;:&quot;function(doc){emit(null, doc.tags);}&quot;}&#39;\n\n{&quot;total_rows&quot;:18,&quot;offset&quot;:0,&quot;rows&quot;:[\n{&quot;id&quot;:&quot;4f86&quot;,&quot;key&quot;:null,&quot;value&quot;:[&quot;pmp&quot;,&quot;project&quot;,&quot;management&quot;,&quot;tips&quot;]},\n{&quot;id&quot;:&quot;0743&quot;,&quot;key&quot;:null,&quot;value&quot;:[&quot;programming&quot;,&quot;game&quot;,&quot;software&quot;]},\n{&quot;id&quot;:&quot;13a3&quot;,&quot;key&quot;:null,&quot;value&quot;:[&quot;marketing&quot;,&quot;public relations&quot;,&quot;startup&quot;,&quot;tips&quot;]},\n...\n</code></pre>\n<hr>\n<h3 id=\"5-11-view-cleanup-and-compaction\">5.11 View cleanup and compaction</h3>\n<p>Both cleanup and compaction will help with reclaiming some disk space, especially with large databases.</p>\n<p>Cleanup process purges old view indexes remaining on a disk for a particular database (after a new view has been created). To trigger it we need to send a POST request to the database <code>_view_cleanup</code> endpoint:</p>\n<pre><code class=\"lang-bash\">$ curl -X POST -H &quot;Content-Type: application/json&quot; http://localhost:5984/blogarticles/_view_cleanup\n\n{&quot;ok&quot;:true}\n</code></pre>\n<p>The design document can be queried to get statistics information about it:</p>\n<pre><code class=\"lang-bash\">$ curl -X GET http://localhost:5984/databasename/_design/test/_info\n</code></pre>\n<p>There are two types of compaction, one for databases and one for views. Compaction removes unused sections created during updates and also old revisions of documents (but will still leave some metadata that is needed for handling conflicts during replication). The view compaction works on the view index from the current version of the design document. We kick off compacting process by sending a POST request to URL made of database name, _compact and the name of the design document:</p>\n<pre><code class=\"lang-bash\">$ curl -X POST -H &quot;Content-Type: application/json&quot; http://localhost:5984/blogarticles/_compact/articles\n\n{&quot;ok&quot;:true}\n</code></pre>\n<p>More on compaction of databases can be found here:<a href=\"https://wiki.apache.org/couchdb/Compaction\">https://wiki.apache.org/couchdb/Compaction</a>.</p>\n<hr>\n<h2 id=\"6-debugging\">6. Debugging</h2>\n<p>The database log is available from this endpoint:</p>\n<pre><code class=\"lang-bash\">http://127.0.0.1:5984/_log\n</code></pre>\n<pre><code>[Fri, 18 Mar 2015 12:40:54 GMT] [info] [&lt;0.116.0&gt;] 127.0.0.1 - - GET /_session 200\n[Fri, 18 Mar 2015 12:40:54 GMT] [info] [&lt;0.19980.1&gt;] 127.0.0.1 - - GET / 200\n[Fri, 18 Mar 2015 12:40:54 GMT] [info] [&lt;0.5765.1&gt;] 127.0.0.1 - - GET /blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=7-fb5654d85ff16f57bf079aee05f35de7 200\n</code></pre><p>In order to be able to see more lines in the log, the number of bytes may be changed:</p>\n<pre><code class=\"lang-bash\">http://127.0.0.1:5984/_log?bytes=10000\n</code></pre>\n<p>Outputting to the log from the view function:</p>\n<pre><code class=\"lang-js\">{\n  &quot;map&quot;: &quot;function(doc) { log(doc); }&quot;\n}\n</code></pre>\n",
            "md": "---\r\n\r\nLink to the first part of the primer: [CouchDB primer part 1 - the basics](/posts/couchdb-primer-part-1-the-basics)\r\n\r\n---\r\n## 5. Design documents\r\n---\r\n### 5.1 Purpose and structure of design documents\r\n\r\nEvery database created in CouchDB can have none, one or more design documents. By default, when creating a new database, there isn't any. Design documents are JavaScript objects represented as JSON containing methods that are this database's logic responsible for transformations and outputting of documents this database contains. They are stored just like other documents in the database, they can be retrieved in the same way too through the HTTP API, but they are part of a dedicated _design space and their methods are designed to be executed in order to process the documents. \r\n\r\nDesign documents can consist of the following functionalities:\r\n- **Views** - they go through each document from the database to return only these that meet criteria defined by us (map function) and they can group data as well. Functionally they are what SELECT, WHERE, GROUP, COUNT, SUM are in SQL (reduce function).\r\n- **Shows** - they convert the _single_document's_ structure (JSON) into another format, like HTML, XML\r\n- **Lists** - they convert the whole view into another format, in example a table or XML collection\r\n- **Document validations** - are validations function that can check and reformat incoming documents to ensure consistency before they are saved.\r\n- **Update handlers** - they are invoked during document create or update action. They can be implemented to auto-increment some values or update timestamps.\r\n- **Filters** - they are used during replication to filter out documents that should not be exchanged, after inspecting properties and values of each document they return it or not (null).\r\n\r\nDesign document doesn't have to contain all of the properties listed above. One design document can contain many different views, each with a different key.\r\n\r\nBy convention design document name should represent the type of the document that is generated by it.\r\n\r\nExample design document may look as below:\r\n\r\n```js\r\n{\r\n  \"_id\": \"_design/articles\",\r\n  \"language\": \"javascript\",\r\n  \"views\": {\r\n    \"all\": {\r\n      \"map\": \"function(doc) { emit(doc.title, doc) }\"\r\n    },\r\n    \"by_title\": {\r\n      \"map\": \"function(doc) { if (doc.title != null) emit(doc.title, doc) }\",\r\n      \"reduce\": \"function(keys, values, rereduce){}\"\r\n    },\r\n    \"by_tag\": {\r\n      \"map\": \"function(doc) { \r\n        for(i=0;i<doc.tag.lenghth();i++) {    \r\n          emit(doc.keywords[i], doc); \r\n        } \r\n      }\",\r\n    },\r\n  },\r\n  \"shows\": {\r\n    \"article\": \"function(doc, req) { return '<h1>' + doc.title + '</h1>' }\"\r\n}\r\n```\r\n\r\n---\r\n### 5.2 Creating design document\r\n\r\nWhat makes a document the design document is the document ID `_id` value which indicates that the blogarticles document is in the special dedicated `_design` space:\r\n\r\n```\r\n\"_id\": \"_design/articles\"\r\n```\r\n\r\nNew design documents need to be created with a PUT request, the `_id` is required and won't be automatically generated by CouchDB as in the case of standard documents.\r\n\r\nSince design documents are usually large, it becomes cumbersome to pass them as parameter with cURL, a more effective way is to save the document's JSON structure to the file and then upload it using the --data argument, as in the example below:\r\n\r\n```bash\r\n$ curl -X PUT -d @blogarticles_design.js 'http://localhost:5984/blogarticles/_design/articles'\r\n```\r\n\r\n---\r\n### 5.3 Retrieving and updating design documents\r\n\r\nRetrieval of the design documents structure is done in the same way standard documents are retrieved, remembering that the document's ID is made of the \"_design/\" part and the document's name:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles'\r\n\r\n{\"_id\":\"_design/articles\",\"_rev\":\"1-a572b72927492f44aa976d9f5f9b0c0d\",\"language\":\"javascript\",\"views\":{\"by_published_date\":{\"map\":\"function(doc){if(doc.published_date){emit(doc.published_date, doc);}}\"}}}\r\n```\r\n\r\nExecuting any of the design document functions is done by sending a GET request to the design document URL appended with the type of the function (_show/_view or other) and it's name:\r\n\r\nHere we are looking up the results of the show function named article:\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_show/articles/'\r\n```\r\n\r\nAnd here we access the results produced by the by_title view:\r\n```bash\r\nhttp://127.0.0.1:5984/blogarticles/_design/articles/_view/by_title\r\n```\r\n\r\nSimilarly, updating of design documents requires a PUT request with document ID and revision number:\r\n\r\n```bash\r\ncurl -X PUT -H 'Content-type: application/json' -d '{\"_rev\":\"1-b41a673ce62351a2c629734d4dc220f9\", \"view/by_title\": \"...\"}' 'http://localhost:5984/blogarticles/_design/articles'\r\n```\r\n\r\n---\r\n### 5.4 View functions overview\r\n\r\nFrom purely technical perspective, views are just JavaScript functions that you can write to emit individual documents based on some criteria. In some cases a view may emit more data than the actual number of documents, for example you may want to iterate through comments in each article and emit them. The most common uses of views are querying data from documents, rendering lists or tables for extracted data, summarising, filtering, calculating, counting or reducing numbers of documents.\r\n\r\nWhen a new view is created and first time accessed, CouchDB processes all documents in the database and creates an index made up of information generated by the view function. Depending on amount of data to process, this may make take a while. Every time a view is changed, all data (in the database that uses that particular view) needs to be reindexed. Every time a document in a database is created or changed, CouchDB needs to update the view's index. Even though you access one view only after adding a new document, all views in the same design documents are updated. Under the hood, the indexes are in the form of (B-Trees)[http://guide.couchdb.org/draft/btree.html], this ensures efficient retrieval of data.\r\n\r\nViews are made of two functions: `map` and `reduce`. (MapReduce)[https://en.wikipedia.org/wiki/MapReduce] is a programming model that has become very popular due to it's efficiently processing large amounts of data and transforming it into useful information. \r\n\r\nDuring the map phase CouchDB takes each document from the database and sends it to the map function, which may or may not emit the document in the same or different form to generate the view. The pieces of data that are emitted are document's ID, the key that can be used later for querying and the value. Both the key and the value may take the form of a boolean, string, number, lists, objects. Emitting is done with the built-in `emit()` function that takes the key and value as two arguments.\r\n\r\nBy convention, the view names are prefixed with \"_by\" to indicate by which criteria the view returns the data.\r\n\r\nIn the example below the view name is \"by_title\" and the map function checks if the document (article) has a value for the title and emits that title as the key and no value.\r\n\r\n```js\r\n{\r\n    \"views\": {\r\n        \"by_title\": {\r\n            \"map\": \"function(doc) { if (doc.title != null) emit(doc.title, null) }\"\r\n        },\r\n}\r\n```\r\n\r\n---\r\n### 5.5 Querying views\r\n\r\nCouchDB sorts view results by key values represented as UTF-8 encoded strings.\r\n\r\nThe following map function returns the list of documents with the published_date value as the key and the object containing article's title and author as the value:\r\n\r\n```js\r\nfunction(doc){\r\n  if(doc.published_date){\r\n    emit(doc.published_date, {title: doc.title, author: doc.author\r\n  });\r\n}\r\n```\r\n\r\nIf we call the view without any extra parameters we are going to receive all records (note the key always contains the \"id\", even if it wasn't emitted by us):\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_published_date'\r\n\r\n{\"total_rows\":7,\"offset\":0,\"rows\":[\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f004958\",\"key\":\"2014-01-20T00:00:00.000Z\",\"value\":{\"title\":\"Make your C++ Effective\",\"author\":\"tom\"}},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f005603\",\"key\":\"2014-10-10T00:00:00.000Z\",\"value\":{\"title\":\"Effective Problem Solving\",\"author\":\"kim\"}},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f001bbc\",\"key\":\"2014-10-19T00:00:00.000Z\",\"value\":{\"title\":\"Secrets of Effective Negotiations\",\"author\":\"kim\"}},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f0032f4\",\"key\":\"2014-11-18T00:00:00.000Z\",\"value\":{\"title\":\"Grandma's Cook Book Samples\",\"author\":\"mark\"}},\r\n{\"id\":\"24c8ea5e0552db4cfdede39584004f86\",\"key\":\"2015-03-19T00:00:00.000Z\",\"value\":{\"title\":\"10 Project Management Tips\",\"author\":\"mark\"}},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f000743\",\"key\":\"2015-05-29T00:00:00.000Z\",\"value\":{\"title\":\"Programming Game AI\",\"author\":\"tom\"}},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f0013a3\",\"key\":\"2015-07-03T00:00:00.000Z\",\"value\":{\"title\":\"Marketing and Public Relations in Startups\",\"author\":\"kim\"}}\r\n]}\r\n\r\n```\r\n\r\nThe blogarticles published dates are ranging from 2014-01-20 to 2015-07-03. If we wanted to request a document with a specific published date using the by_published_date view, we can provide the date as the value of the `key` query string parameter:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?key=\"2015-03-19T00:00:00.000Z\"'\r\n\r\n{\"total_rows\":7,\"offset\":4,\"rows\":[\r\n{\"id\":\"24c8ea5e0552db4cfdede39584004f86\",\"key\":\"2015-03-19T00:00:00.000Z\",\"value\":{\"title\":\"10 Project Management Tips\",\"author\":\"mark\"}}\r\n]}\r\n```\r\nTo get articles with published_date starting from and including a specific date we can use the `startkey` parameter. To get articles with date including and no older that a specific date we can use the `endkey` parameter. For getting the range between two dates we could use both parameters together:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_published_date?startkey=\"2014-11-18T00:00:00.000Z\"&endkey=\"2015-03-19T00:00:00.000Z\"'\r\n\r\n{\r\n    \"total_rows\": 7,\r\n    \"offset\": 3,\r\n    \"rows\": [{\r\n        \"id\": \"3c9187bdabb2408e3fbfe6a76f0032f4\",\r\n        \"key\": \"2014-11-18T00:00:00.000Z\",\r\n        \"value\": {\r\n            \"title\": \"Grandma's Cook Book Samples\",\r\n            \"author\": \"mark\"\r\n        }\r\n    }, {\r\n        \"id\": \"24c8ea5e0552db4cfdede39584004f86\",\r\n        \"key\": \"2015-03-19T00:00:00.000Z\",\r\n        \"value\": {\r\n            \"title\": \"10 Project Management Tips\",\r\n            \"author\": \"mark\"\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\nTo learn more about views visit: [http://guide.couchdb.org/draft/views.html](http://guide.couchdb.org/draft/views.html)\r\n\r\n---\r\n### 5.6 Querying compound keys\r\n\r\nIt is also possible to search by more complex keys then just a single dimensional value. If we wanted to find all comments having  article_rate equal or greater than \"3\" for articles from the \"management\" category, we would first need to create the following `by_category_comment_rate` view map function emitting the compound key made of two values:\r\n\r\n```js\r\nfunction(doc) {\r\n  if (doc.category && doc.comments) {\r\n    for (var i = 0, len = doc.comments.length; i < len; i++) {\r\n      var commRate = doc.comments[i].article_rate;\r\n      if (commRate !== null) {\r\n        emit([doc.category, commRate], doc.title);\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis will give the following output when querying without any parameters (document ids are shortened for brevity):\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_category_comment_rate'\r\n\r\n{\"total_rows\":19,\"offset\":0,\"rows\":[\r\n{\"id\":\"32f4\",\"key\":[\"cooking\",2],\"value\":\"Grandma's Cook Book Samples\"},\r\n{\"id\":\"32f4\",\"key\":[\"cooking\",3],\"value\":\"Grandma's Cook Book Samples\"},\r\n{\"id\":\"32f4\",\"key\":[\"cooking\",4],\"value\":\"Grandma's Cook Book Samples\"},\r\n{\"id\":\"32f4\",\"key\":[\"cooking\",5],\"value\":\"Grandma's Cook Book Samples\"},\r\n{\"id\":\"5603\",\"key\":[\"management\",null],\"value\":\"Effective Problem Solving\"}\r\n// ... and so on ...\r\n]}\r\n```\r\n\r\nNow we can send a GET request using the `startkey` and `endkey` in a form of array, where the first item would be the category and the second the start and end of the comment rate range. If our function emitted more values in the key array, the `startkey` and `endkey` parameters could contain more values as well. Note that we use the `--globoff` or `-g` parameter, as otherwise the square brackets would cause the following error:\r\n\r\n```bash\r\ncurl: (3) [globbing] bad range specification in column 89\r\n``` \r\n\r\nHere are the results:\r\n\r\n```bash\r\n$ curl -X GET --globoff 'http://localhost:5984/blogarticles/_design/articles/_view/by_category_comment_rate?startkey=[\"management\",3]&endkey=[\"management\",5]'\r\n\r\n{\"total_rows\":19,\"offset\":9,\"rows\":[\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f001bbc\",\"key\":[\"management\",3],\"value\":\"Secrets of Effective Negotiations\"},\r\n{\"id\":\"24c8ea5e0552db4cfdede39584004f86\",\"key\":[\"management\",4],\"value\":\"10 Project Management Tips\"},\r\n{\"id\":\"24c8ea5e0552db4cfdede39584004f86\",\"key\":[\"management\",5],\"value\":\"10 Project Management Tips\"},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f001bbc\",\"key\":[\"management\",5],\"value\":\"Secrets of Effective Negotiations\"}\r\n]}\r\n```\r\n\r\nDespite the fact that the view queried using the filter returned only 4 records, the total_rows property shows total number of records that the view returns (with no query string filter applied).\r\n\r\n---\r\n### 5.7 Lookup views\r\n---\r\n#### 5.7.1 View Collation\r\n\r\nUnlike in RDBMS (Relational Database Management Systems), it is not possible to join results from two different tables (or databases in CouchDB world) using one request. Instead two separate requests would need to be sent to each of the databases and data would need to be joined on the client side.\r\n\r\nOne common approach to overcome this limitation, described in the [official documentation](http://docs.couchdb.org/en/1.6.1/couchapp/views/joins.html), is to store two different type of documents in the same database. \r\n\r\nTo explain that better, lets discuss the blogarticles database we've been using so far. The fact that the article and associated comments are part of the same document allows us to request them together using one request. But the problem is that if a new comment needs to be added or an existing comment needs to be edited, the whole document needs to be updated because comments are just article's properties. In the case when multiple blog viewers wanted to comment the same article at the same time, some of them would get document update conflict error since as soon as the first user adds her comment, the revision number is going to be updated. \r\n\r\nTo overcome this issue we can split articles and comments but still keep them in the same database allowing the view to access both. Lets take this document:\r\n\r\n```js\r\n{\r\n   \"_id\": \"3c9187bdabb2408e3fbfe6a76f0013a3\",\r\n   \"title\": \"Marketing and Public Relations in Startups\",\r\n   \"category\": \"startups\",\r\n   \"published_date\": \"2015-07-03T00:00:00.000Z\",\r\n   \"author\": \"kim\",\r\n   \"tags\": [\"marketing\", \"public relations\"],\r\n   \"visits\": 4300,\r\n   \"comments\": [\r\n       {\r\n           \"nick\": \"alex\",\r\n           \"date\": \"2015-07-03T00:00:00.000Z\",\r\n           \"comment\": \"Sample comment\",\r\n           \"article_rate\": 3\r\n       },\r\n       {\r\n           \"nick\": \"nick\",\r\n           \"date\": \"2015-08-09T00:00:00.000Z\",\r\n           \"comment\": \"Sample comment\",\r\n           \"article_rate\": 2\r\n       }\r\n   ]\r\n}\r\n```\r\n\r\nAnd split it into three, first the article and then the two comments:\r\n\r\n```js\r\n{\r\n   \"_id\": \"marketing-and-public-relations-in-startups\",\r\n   \"type\": \"article\",\r\n   \"title\": \"Marketing and Public Relations in Startups\",\r\n   \"category\": \"startups\",\r\n   \"published_date\": \"2015-07-03T00:00:00.000Z\",\r\n   \"author\": \"kim\",\r\n   \"tags\": [\"marketing\",\"public relations\"],\r\n   \"visits\": 4300\r\n}, {\r\n   \"_id\": \"3c9187bdabb2408e3fbfe6a76f00a488\",\r\n   \"type\": \"comment\",\r\n   \"article\": \"marketing-and-public-relations-in-startups\",\r\n   \"nick\": \"alex\",\r\n   \"date\": \"2015-07-03T00:00:00.000Z\",\r\n   \"comment\": \"Sample comment\",\r\n   \"article_rate\": 3\r\n}, {\r\n   \"_id\": \"3c9187bdabb2408e3fbfe6a76f00aa87\",\r\n   \"type\": \"comment\",\r\n   \"article\": \"marketing-and-public-relations-in-startups\",\r\n   \"nick\": \"nick\",\r\n   \"date\": \"2015-08-09T00:00:00.000Z\",\r\n   \"comment\": \"Sample comment\",\r\n   \"article_rate\": 2\r\n}\r\n```\r\n\r\nWhat we have done here is added a new property called `type` that describes the type of the document, which could be `article` or `comment`. For the sake of brevity, instead of using UUID for article IDs, we use the `slug`, which is just a user friendly version of the article title in the form of URL. By doing this we also agree that article titles are required to be unique or alternatively we could add some logic to make sure that if there is a title conflict, a slug would get some random prefix like a digit to ensure uniqueness (we could use the [update handlers](https://wiki.apache.org/couchdb/Document_Update_Handlers) in the design document for this purpose). We linked comment documents with their parent articles using the `article` property populated with the article's ID.\r\n\r\nNow, the next step is to create a view with the map function called 'by_article_id' that would enable us to get both the articles and their comments together:\r\n```js\r\nfunction(doc){\r\n  if (doc.type === \"article\") {\r\n     emit([doc._id, 0],doc);\r\n  }\r\n  else if (doc.type === \"comment\") {\r\n     emit([doc.article, 1],doc);\r\n  }\r\n}\r\n```\r\n\r\nIf we send the following query:\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_article_id?key=[\"marketing-and-public-relations-in-startups\",0]'\r\n```\r\n\r\nwe will get just the article itself. If we provide 1 as the second value to the key we will get comments only:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_article_id?key=[\"marketing-and-public-relations-in-startups\",1]\r\n```\r\n\r\nBut if we provide a range we will get both type of documents ordered in the way that comments are positioned after the article - thanks to the second value in the emitted key, called `sorting token`:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_article_id?startkey=[\"marketing-and-public-relations-in-startups\",0]&endkey=[\"marketing-and-public-relations-in-startups\",1]' --globoff\r\n\r\n{\r\n    \"total_rows\": 6,\r\n    \"offset\": 3,\r\n    \"rows\": [{\r\n        \"id\": \"marketing-and-public-relations-in-startups\",\r\n        \"key\": [\"marketing-and-public-relations-in-startups\", 0],\r\n        \"value\": {\r\n            \"_id\": \"marketing-and-public-relations-in-startups\",\r\n            \"type\": \"article\",\r\n            \"title\": \"Marketing and Public Relations in Startups\",\r\n            \"category\": \"startups\",\r\n            \"published_date\": \"2015-07-03T00:00:00.000Z\",\r\n            \"author\": \"kim\",\r\n            \"tags\": [\"marketing\", \"public relations\", \"startup\", \"tips\"],\r\n            \"visits\": 4300\r\n        }\r\n    }, {\r\n        \"id\": \"3c9187bdabb2408e3fbfe6a76f00a488\",\r\n        \"key\": [\"marketing-and-public-relations-in-startups\", 1],\r\n        \"value\": {\r\n            \"_id\": \"3c9187bdabb2408e3fbfe6a76f00a488\",\r\n            \"type\": \"comment\",\r\n            \"article\": \"marketing-and-public-relations-in-startups\",\r\n            \"nick\": \"alex\",\r\n            \"date\": \"2015-07-03T00:00:00.000Z\",\r\n            \"comment\": \"Sample comment\",\r\n            \"article_rate\": 3\r\n        }\r\n    }, {\r\n        \"id\": \"3c9187bdabb2408e3fbfe6a76f00aa87\",\r\n        \"key\": [\"marketing-and-public-relations-in-startups\", 1],\r\n        \"value\": {\r\n            \"_id\": \"3c9187bdabb2408e3fbfe6a76f00aa87\",\r\n            \"type\": \"comment\",\r\n            \"article\": \"marketing-and-public-relations-in-startups\",\r\n            \"nick\": \"nick\",\r\n            \"date\": \"2015-08-09T00:00:00.000Z\",\r\n            \"comment\": \"Sample comment\",\r\n            \"article_rate\": 2\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\nMore on collation including sorting by keys can be found here: [http://docs.couchdb.org/en/1.6.1/couchapp/views/collation.html#views-collation](http://docs.couchdb.org/en/1.6.1/couchapp/views/collation.html#views-collation).\r\n\r\n---\r\n#### 5.7.2 Linked Documents\r\n\r\nNow what solution could we use if we wanted to request comments by their ID and also see the corresponding article using one request? We could create a view as below, where the map function is called \"by_comments\":\r\n\r\n```js\r\nfunction(doc){\r\n  if (doc.type === \"comment\") {\r\n     emit(doc._id, {\"_id\":doc.article});\r\n  }\r\n}\r\n```\r\n\r\nWhat we are doing here is we emit the comment's doc_id in order to be able to query by comment's ID and as the value we emit an object with the \"_id\" as a key and the corresponding article's ID as a value.\r\n\r\nQuerying by key gives us the following response:\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_comment?key=\"3c9187bdabb2408e3fbfe6a76f008f03\"'\r\n\r\n\"rows\": [{\r\n    \"id\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n    \"key\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n    \"value\": {\r\n        \"_id\": \"make-your-c++-effective\"\r\n    }\r\n}]\r\n```\r\n\r\nBut if we add the `include_docs=true` parameter we are going to receive something completely different:\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_comment?key=\"3c9187bdabb2408e3fbfe6a76f008f03\"&include_docs=true'\r\n\r\n{\r\n    \"total_rows\": 4,\r\n    \"offset\": 0,\r\n    \"rows\": [{\r\n        \"id\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n        \"key\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n        \"value\": {\r\n            \"_id\": \"make-your-c++-effective\"\r\n        },\r\n        \"doc\": {\r\n            \"_id\": \"make-your-c++-effective\",\r\n            \"_rev\": \"5-19b57826876e9bd14b526f5d354c02a1\",\r\n            \"type\": \"article\",\r\n            \"title\": \"Make your C++ Effective\",\r\n            \"category\": \"programming\",\r\n            \"published_date\": \"2014-01-20T00:00:00.000Z\",\r\n            \"author\": \"tom\",\r\n            \"tags\": [\"programming\", \"c++\", \"software\"],\r\n            \"visits\": 1234\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\nAs you can see the `include_docs=true` option made CouchDB add the `doc` property to the returned results containing the article document referenced by the _id value emitted from the view.\r\n\r\nIf we wanted to receive the full comment document as well, we could modify the view so that it could have another emit or add another property to the returned object:\r\n\r\n```js\r\nfunction(doc){\r\n  if (doc.type === \"comment\") {\r\n     emit(doc._id, null);\r\n     emit(doc._id, {\"_id\":doc.article});\r\n  }\r\n}\r\n\r\n// or\r\n\r\nfunction(doc){\r\n  if (doc.type === \"comment\") {\r\n     emit(doc._id, {\"_id\":doc.article, \"doc\":doc});\r\n  }\r\n}\r\n```\r\n\r\nWhy are we emitting null in the first emit? If we didn't, the `include_docs=true` switch would make the same document returned twice:\r\n\r\n```bash\r\n{\r\n        \"id\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n        \"key\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n        \"value\": {\r\n            \"_id\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n            \"_rev\": \"2-da6c6825e4f305fe8034bbc57d5c2610\",\r\n            \"type\": \"comment\",\r\n            \"article\": \"make-your-c++-effective\",\r\n            \"nick\": \"steve\",\r\n            \"date\": \"2014-01-20T00:00:00.000Z\",\r\n            \"comment\": \"Sample comment\",\r\n            \"article_rate\": 4\r\n        },\r\n        \"doc\": {\r\n            \"_id\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n            \"_rev\": \"2-da6c6825e4f305fe8034bbc57d5c2610\",\r\n            \"type\": \"comment\",\r\n            \"article\": \"make-your-c++-effective\",\r\n            \"nick\": \"steve\",\r\n            \"date\": \"2014-01-20T00:00:00.000Z\",\r\n            \"comment\": \"Sample comment\",\r\n            \"article_rate\": 4\r\n        }\r\n    }\r\n```\r\n\r\nIf we emit null, the document is returned in the doc property:\r\n```emit\r\n{\r\n        \"id\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n        \"key\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n        \"value\": null,\r\n        \"doc\": {\r\n            \"_id\": \"3c9187bdabb2408e3fbfe6a76f008f03\",\r\n            \"_rev\": \"2-da6c6825e4f305fe8034bbc57d5c2610\",\r\n            \"type\": \"comment\",\r\n            \"article\": \"make-your-c++-effective\",\r\n            \"nick\": \"steve\",\r\n            \"date\": \"2014-01-20T00:00:00.000Z\",\r\n            \"comment\": \"Sample comment\",\r\n            \"article_rate\": 4\r\n        }\r\n    }\r\n```\r\n\r\nThe `include_docs` switch lets the CouchDB engine query the database \"on the fly\" when a request is sent and inject resulting document to the response as the `doc` value. If we emit documents as values in our view (doc as the second parameter in the emit function), these documents are actually going to be cached/indexed on disk (as discussed earlier). The official documentation in the chapter for [joins](http://docs.couchdb.org/en/1.6.1/couchapp/views/collation.html#views-collation) advises that it is not recommended to emit the documents in the view and instead, it is suggested to include the bodies of the documents by requesting the view with `?include_docs=true`. This way we save disk space for a price of incurring overhead of making the engine querying the docs from the database requested by us. More details in [this thread](http://stackoverflow.com/questions/36210507/why-is-the-couchdb-documentation-suggesting-docs-should-not-be-emitted-in-the-vi).\r\n\r\n---\r\n### 5.8 Reduce functions\r\n---\r\n#### 5.8.1 Purpose\r\n\r\nRole of the reduce functions is to collate the output of the map function call by counting, summing up, grouping items of a particular type. Output of the reduce function is always **one** new record containing the result of the operation on all documents returned from the map step. Results of the reduce step are indexed in the same way as the results of the map step, this means that the response will be much faster as the data comes from the \"cache\" and isn't calculated \"on the fly\" every time a query is sent. Two main things to know about the reduction functionality is the available built-in functions and what are the group levels.\r\n\r\n---\r\n#### 5.8.2 Using built in functions\r\n---\r\n##### 5.8.2.1 Count\r\n\r\nIf we wanted to count how many comments we have in total in all articles, we could come up with the following view, where the map function returns each record (the fact that value is 1 isn't important, it could be null as well) and the `_count` function as the reduce:\r\n\r\n```js\r\n\"all_comments\": {\r\n      \"map\": \"function(doc) { if (doc.type == 'comment')  emit(doc.id, 1) }\",\r\n      \"reduce\" : \"_count\"\r\n}\r\n```\r\n\r\nIf we query this without reduction using the `reduce=false` parameter we are going to get this result:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/all_comments?reduce=false'\r\n\r\n{\"total_rows\":4,\"offset\":0,\"rows\":[\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f008f03\",\"key\":null,\"value\":1},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f00948e\",\"key\":null,\"value\":1},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f00a488\",\"key\":null,\"value\":1},\r\n{\"id\":\"3c9187bdabb2408e3fbfe6a76f00aa87\",\"key\":null,\"value\":1}\r\n]}\r\n```\r\n\r\nIf we do not provide any parameter which is equivalent to providing `group_level=0` we are going to get the value that represents the result of taking each of the records returned from the map function and adding it to the counter:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/all_comments'\r\n\r\n{\"rows\":[\r\n{\"key\":null,\"value\":4}\r\n]}\r\n```\r\n\r\n---\r\n##### 5.8.2.2 Sum\r\n\r\nAs an exercise lets sum up the visits in all articles, in other words lets get a number representing total visits to our blog. For this we would create a view with the map function returning the visits value for each article and use the `_sum` as the reduction function:\r\n\r\n```js\r\n\"all_articles_visits\": {\r\n   \"map\": \"function(doc) { if (doc.type === 'article')  emit(doc.id, doc.visits) }\",\r\n   \"reduce\": \"_sum\"\r\n}\r\n```\r\n\r\nIt is important to note that since the sum is going to add numbers, the number needs to be returned from the emit function. If the value isn't actually a number but a string, it should be converted into number using likes of `parseInt` or `parseFloat`.\r\n\r\nWithout reduce and with reduce:\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/all_articles_visits?reduce=false'\r\n\r\n{\"total_rows\":2,\"offset\":0,\"rows\":[\r\n{\"id\":\"make-your-c++-effective\",\"key\":null,\"value\":1234},\r\n{\"id\":\"marketing-and-public-relations-in-startups\",\"key\":null,\"value\":4300}\r\n]}\r\n\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/all_articles_visits'\r\n\r\n{\"rows\":[\r\n{\"key\":null,\"value\":5534}\r\n]}\r\n```\r\n\r\n---\r\n##### 5.8.2.3 Stats\r\n\r\nFor the following view, where we use `_stats` for the reduce:\r\n\r\n```js\r\n\"all_articles_stats\": {\r\n   \"map\": \"function(doc) { if (doc.type === 'article')  emit(doc.id, doc.visits); }\",\r\n   \"reduce\": \"_stats\"\r\n}\r\n```\r\n\r\nwe will get the following response data:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/all_articles_stats?reduce=false'\r\n\r\n{\"total_rows\":2,\"offset\":0,\"rows\":[\r\n{\"id\":\"make-your-c++-effective\",\"key\":null,\"value\":1234},\r\n{\"id\":\"marketing-and-public-relations-in-startups\",\"key\":null,\"value\":4300}\r\n]}\r\n\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/all_articles_stats'\r\n\r\n{\"rows\":[\r\n{\"key\":null,\"value\":{\"sum\":5534,\"count\":2,\"min\":1234,\"max\":4300,\"sumsqr\":20012756}}\r\n]}\r\n```\r\n\r\nSince the stats method similarly to the sum takes numbers, the emit is required to return numbers.\r\n\r\n---\r\n#### 5.8.3 Group levels\r\n\r\nTo better explain the group levels, lets use the example database presented at the beginning of this article and the following view that will provide us information of which author and which article category became most successful in terms of number of visits (our key is is the `collation key` since it is made up of two elements):\r\n\r\n```js\r\n\"by_name_category\": {\r\n   \"map\": \"function(doc) { emit([doc.author, doc.category], doc.visits) }\",\r\n   \"reduce\": \"_sum\"\r\n}\r\n```\r\n\r\n**Without reduction99 we will get the following results (ids truncated for brevity):\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?reduce=false'\r\n\r\n{\"total_rows\":12,\"offset\":0,\"rows\":[\r\n{\"id\":\"1bbc\",\"key\":[\"kim\",\"management\"],\"value\":8756},\r\n{\"id\":\"5603\",\"key\":[\"kim\",\"management\"],\"value\":12853},\r\n{\"id\":\"13a3\",\"key\":[\"kim\",\"startups\"],\"value\":4300},\r\n{\"id\":\"32f4\",\"key\":[\"mark\",\"cooking\"],\"value\":7845},\r\n{\"id\":\"4f86\",\"key\":[\"mark\",\"management\"],\"value\":1000},\r\n{\"id\":\"0743\",\"key\":[\"tom\",\"programming\"],\"value\":600},\r\n{\"id\":\"4958\",\"key\":[\"tom\",\"programming\"],\"value\":1234}\r\n]}\r\n```\r\n\r\nNotice that the compound key is made of two values. By using the array as the key we can group to multiple levels (as many as values in the key).\r\n\r\n**Reduction with level 0**: `group_level=0`, equivalent to `group=false` or no parameters in the query string, is the default and means that no key (sent from the emit) is used for grouping - in other words each line is taken into calculation separately. This is called reducing to a single value. The key in the reduce results is null, this is because we took all different records and calculated them together, so the key is irrelevant in this case.\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?group_level=0'\r\n\r\n{\"rows\":[\r\n{\"key\":null,\"value\":36588}\r\n]}\r\n```\r\n\r\n**Reduction with level 1**: `group_level=1` means that the first key is going to be taken into account in the calculations. Since the first item in the key is the author name, all values (visits) for each name are are grouped and added to the sum, hence we are getting summary per each user.\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?group_level=1'\r\n\r\n{\"rows\":[\r\n{\"key\":[\"kim\"],\"value\":47518},\r\n{\"key\":[\"mark\"],\"value\":17690},\r\n{\"key\":[\"tom\"],\"value\":2434}\r\n]}\r\n```\r\n\r\n**Reduction with level 2**: `group_level=2` means that both values from the compound key are going to be used to group values. This means that CouchDB will go through the records, if it finds ones with the same key (both values), it will summarise their values. To explain this better, if we look at the results returned from the view without reduction turned on, we will notice that some records have the same keys, in example these (ids truncated for brevity):\r\n\r\n```js\r\n{\"id\":\"1bbc\",\"key\":[\"kim\",\"management\"],\"value\":8756},\r\n{\"id\":\"5603\",\"key\":[\"kim\",\"management\"],\"value\":12853},\r\n\r\n{\"id\":\"0743\",\"key\":[\"tom\",\"programming\"],\"value\":600},\r\n{\"id\":\"4958\",\"key\":[\"tom\",\"programming\"],\"value\":1234},\r\n```\r\n\r\nThe pairs above will be sum up, as we can observe in the results below:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_name_category?group_level=2'\r\n\r\n{\"rows\":[\r\n{\"key\":[\"kim\",\"management\"],\"value\":21609},\r\n{\"key\":[\"kim\",\"startups\"],\"value\":4300},\r\n{\"key\":[\"mark\",\"cooking\"],\"value\":7845},\r\n{\"key\":[\"mark\",\"management\"],\"value\":1000},\r\n{\"key\":[\"tom\",\"programming\"],\"value\":1834}\r\n]}\r\n```\r\n\r\nAnother way of turning reduce on is using the `group=true` (which is default in Futon - CouchDB's default client). Using this parameter would have the same effect as `group_level=2` in our example database and view as CouchDB would just take all key components returned for each record from the map to group documents and reduce them, into corresponding values.\r\n\r\nIf we repeat request with `group_level=3`, we will get the same results as for level 2 because there are only two keys returned from the emit.\r\n\r\nMore info on reduce and lookup views can be found [https://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Lookup_Views](https://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Lookup_Views).\r\n\r\n---\r\n### 5.9 Custom reduce functions - rereduce\r\n\r\nThe reduce functions allow us creating custom calculations beyond the built-in functions. The reduce function takes three arguments: \r\n\r\n- document keys in the form of array consisting of the key and document's ID received from the map function (only in non-rereduce mode - more on that soon)\r\n- document values as the array of values emitted from the map function (in rereduce mode values will be product of the previous reduce)\r\n- boolean value, if true, then the function is called by itself or in other words run in the `rereduce` mode.\r\n\r\nLets create a reduce function that will return us an object containing count of records and sum of the visits:\r\n\r\n```js\r\nfunction (keys, values, rereduce) {\r\n   var count = 0, sum = 0, i;\r\n   count = values.length;\r\n   sum = sum(values);\r\n\r\n   return {count: count, sum: sum};\r\n}\r\n```\r\n\r\nIn the example reduce function above we are simply taking the values emitted from the map function (each item in the value array comes from separate emits for each individual record). We are going through each of the value incrementing the count and adding the number of visits to the sum. For our sample database with few records the expected output would be this:\r\n\r\n```bash\r\n$ curl -X GET 'http://localhost:5984/blogarticles/_design/articles/_view/by_name_category_custom?group_level=1'\r\n\r\n{\r\n   \"rows\":[{\r\n      \"key\":[\"kim\"],\r\n      \"value\":{\"count\":3,\"sum\":25909}\r\n    },{\r\n      \"key\":[\"mark\"],\r\n      \"value\":{\"count\":2,\"sum\":8845}\r\n    },{\r\n       \"key\":[\"tom\"],\r\n       \"value\":{\"count\":2,\"sum\":1834}\r\n    }]\r\n}\r\n```\r\n\r\nIf we run the code above on a very large amount of records, instead of the expected results as before, we could see these:\r\n\r\n```js\r\n{\r\n    \"rows\":[{\r\n        \"key\":\"null\",\r\n        \"value\": {\r\n            count: 3,\r\n            sum: \"0[object Object][object Object][object Object]\"\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\nThis can happen if there is a lot of data to process (many rows produced by emits), in such case the reduction process will be repeated - the reduce function is going to be called by itself. CouchDB uses divide and conquer strategy to calculate reduce results more efficiently by breaking up the key/value pairs into smaller chunks. The results are combined into arrays and they are passed to reduce again - which can happen more than once!\r\n\r\nThis is what the custom reduce function receives from the map function that emits three documents:\r\n\r\n```js\r\nreduce([ [key1,id1], [key2,id2], [key3,id3] ], [value1,value2,value3], false)\r\n```\r\n\r\nIf we put a breakpoint and inspected the argument values we would see something along these lines (ids and records truncated for the sake of brevity) - refer to the sample records presented in 5.8.3:\r\n\r\n```js\r\nreduce([ [[\"kim\",\"management\"], \"1bbc\"], [[\"kim\", \"management\"], \"5603\"], [[\"kim\", \"startups\"], \"13a3\"] ...], [8756, 12853, 4300], false)\r\n```\r\n\r\nIf the same reduce function was called in the rereduce mode, it wouldn't receive the keys, the values would be calculations returned from the previous reduce call and the boolean will be true:\r\n\r\n```js\r\nreduce(null, [value1, value2], true)\r\n```\r\n\r\nIf we inspected the argument values in this case we would see something along these lines:\r\n\r\n```js\r\nreduce(null, [{count:123, sum:123}, {count:213, sum:231}], true)\r\n```\r\n\r\nIn order to make sure our custom reduce function works properly with larger amount of data, we will need to add a condition to handle the rereduce scenario and correctly use the values passed:\r\n\r\n```js\r\nfunction (keys, values, rereduce) {\r\n   var count = 0, sum = 0, i;\r\n\r\n   if (rereduce) {\r\n      for (i in values) {\r\n         count += values[i].count;\r\n         sum += values[i].sum;\r\n      }\r\n   } else {\r\n      count = values.length;\r\n      sum = sum(values);\r\n   }\r\n\r\n   return {count: count, sum: sum};\r\n}\r\n```\r\n\r\n---\r\n### 5.10 Temporary views\r\n\r\nTemporary views are the views that aren't stored permanently in the design document and therefore don't have any index data stored for performance efficiency (hence they are also called one-off queries). Instead, when making request, we can provide our map or reduce function to a special _temp_view endpoint and let CouchDB query the database \"on the fly\" and return results. This isn't a solution we would use for production, but is very handy to quickly check things.\r\n\r\nIn example with this view we could request tags for each article (ids and results truncated for the sake of brevity):\r\n\r\n```bash\r\n$ curl -X POST http://localhost:5984/blogarticles/_temp_view -H \"Content-Type: application/json\" -d '{\"map\":\"function(doc){emit(null, doc.tags);}\"}'\r\n\r\n{\"total_rows\":18,\"offset\":0,\"rows\":[\r\n{\"id\":\"4f86\",\"key\":null,\"value\":[\"pmp\",\"project\",\"management\",\"tips\"]},\r\n{\"id\":\"0743\",\"key\":null,\"value\":[\"programming\",\"game\",\"software\"]},\r\n{\"id\":\"13a3\",\"key\":null,\"value\":[\"marketing\",\"public relations\",\"startup\",\"tips\"]},\r\n...\r\n```\r\n\r\n---\r\n### 5.11 View cleanup and compaction\r\n\r\nBoth cleanup and compaction will help with reclaiming some disk space, especially with large databases.\r\n\r\nCleanup process purges old view indexes remaining on a disk for a particular database (after a new view has been created). To trigger it we need to send a POST request to the database `_view_cleanup` endpoint:\r\n\r\n```bash\r\n$ curl -X POST -H \"Content-Type: application/json\" http://localhost:5984/blogarticles/_view_cleanup\r\n\r\n{\"ok\":true}\r\n```\r\n\r\nThe design document can be queried to get statistics information about it:\r\n\r\n```bash\r\n$ curl -X GET http://localhost:5984/databasename/_design/test/_info\r\n```\r\n\r\nThere are two types of compaction, one for databases and one for views. Compaction removes unused sections created during updates and also old revisions of documents (but will still leave some metadata that is needed for handling conflicts during replication). The view compaction works on the view index from the current version of the design document. We kick off compacting process by sending a POST request to URL made of database name, _compact and the name of the design document:\r\n\r\n```bash\r\n$ curl -X POST -H \"Content-Type: application/json\" http://localhost:5984/blogarticles/_compact/articles\r\n\r\n{\"ok\":true}\r\n```\r\n\r\nMore on compaction of databases can be found here:[https://wiki.apache.org/couchdb/Compaction](https://wiki.apache.org/couchdb/Compaction).\r\n\r\n---\r\n## 6. Debugging\r\n\r\nThe database log is available from this endpoint:\r\n\r\n```bash\r\nhttp://127.0.0.1:5984/_log\r\n```\r\n\r\n```\r\n[Fri, 18 Mar 2015 12:40:54 GMT] [info] [<0.116.0>] 127.0.0.1 - - GET /_session 200\r\n[Fri, 18 Mar 2015 12:40:54 GMT] [info] [<0.19980.1>] 127.0.0.1 - - GET / 200\r\n[Fri, 18 Mar 2015 12:40:54 GMT] [info] [<0.5765.1>] 127.0.0.1 - - GET /blogarticles/3c9187bdabb2408e3fbfe6a76f000743?rev=7-fb5654d85ff16f57bf079aee05f35de7 200\r\n```\r\n\r\nIn order to be able to see more lines in the log, the number of bytes may be changed:\r\n\r\n```bash\r\nhttp://127.0.0.1:5984/_log?bytes=10000 \r\n```\r\n\r\nOutputting to the log from the view function:\r\n```js\r\n{\r\n  \"map\": \"function(doc) { log(doc); }\"\r\n}\r\n```"
        },
        "extendedType": "markdown"
    },
    "hits": 3182,
    "publishedDate": {
        "$date": "2015-10-01T23:00:00.000+0000"
    },
    "slug": "couchdb-primer-part-2-design-documents-and-views",
    "state": "published",
    "tags": [{
        "$oid": "56fc38c5c4677bdcc57f2cf9"
    }, {
        "$oid": "56fc388fc4677bdcc57f2cf7"
    }, {
        "$oid": "56fc38a4c4677bdcc57f2cf8"
    }],
    "title": "CouchDB primer part 2 - design documents and views"
} {
    "_id": {
        "$oid": "5702cc43dbcb53ee0ab5f70f"
    },
    "__v": 1,
    "author": {
        "$oid": "55af9f5d8fb1260489f3050d"
    },
    "categories": [{
        "$oid": "55ae65e269291600761cdc35"
    }],
    "content": {
        "brief": "<p>I needed to create an utility that when installed as a global module, it would be both available as a command line tool in bash and&nbsp;as a Node module that could be imported with require function from any Node script. As&nbsp;the command line tool, i wanted it to take input in two ways: take parameters and read input from a file or take piped streams. This tip explains how this can be achieved.</p>",
        "extendedMarkdown": {
            "html": "<hr>\n<h2 id=\"background\">Background</h2>\n<p>Creating command line tools with Node was the initial reason that hooked me in when my journey as Node.JS developer started almost 4 years ago. I recently needed to create a module for converting/parsing tests written in plain text format to JSON, so that they could be imported to the database easily.</p>\n<p>The module is available here on NPM: \n<a href=\"https://www.npmjs.com/package/tests2json\">https://www.npmjs.com/package/tests2json</a> <br>\nor on github:\n<a href=\"https://github.com/wsierakowski/tests2json\">https://github.com/wsierakowski/tests2json</a></p>\n<hr>\n<p>I wanted this module to have the following features:</p>\n<hr>\n<h5 id=\"1-import-as-a-node-module-\">1. <strong>Import as a Node module</strong></h5>\n<p>When installed with:</p>\n<pre><code>npm install tests2json\n</code></pre><p>I should be able to import it in a standard way with the require:</p>\n<pre><code>var t2j = require(&#39;tests2json&#39;)\n</code></pre><hr>\n<h5 id=\"2-use-as-command-line-tool-\">2. <strong>Use as command line tool</strong></h5>\n<p>When installed globally </p>\n<pre><code>npm install tests2json -g\n</code></pre><p>I should be able to run it from command line interface (CLI) as any other program available from bash.</p>\n<hr>\n<h5 id=\"3-accept-parameters-in-cli-\">3. <strong>Accept parameters in CLI</strong></h5>\n<p>When run from CLI it should take both short: </p>\n<pre><code>$ tests2json -h\n</code></pre><p>and long parameters: </p>\n<pre><code>$ tests2json --help\n</code></pre><p>and display verbose help to the user. \nTwo key parameters would be the <code>input</code> to specify a path where the text file with tests should be read from and the <code>output</code> for a path which the json output should be saved to.</p>\n<hr>\n<h5 id=\"4-accept-piped-streams-\">4. <strong>Accept piped streams</strong></h5>\n<p>When run from CLI accept output of other programs as input and output tests as JSON so that other programs could consume it:</p>\n<pre><code>$ cat tests.txt | tests2json &gt;&gt; tests.json\n</code></pre><hr>\n<h2 id=\"solution\">Solution</h2>\n<hr>\n<h3 id=\"folder-structure\">Folder Structure</h3>\n<p>The <a href=\"https://github.com/wsierakowski/tests2json\">folder structure</a> is fairly standard, skipping the obvious things like .gitignore, LICENSE, README.md and package.json, the entry point for the module working as the command line tool is the <code>tests2json.js</code> file. The script internally loads the <code>lib/tests2json.js</code> module that is the actual logic that parses raw tests text. The test folder contains <a href=\"https://mochajs.org/\">mocha</a> test runner tests that use <a href=\"http://chaijs.com/\">chai</a> as the assertion library.</p>\n<pre><code class=\"lang-bash\">.\nâ”œâ”€â”€ .gitignore\nâ”œâ”€â”€ LICENSE\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ lib\nâ”‚   â””â”€â”€ tests2json.js\nâ”œâ”€â”€ package.json\nâ”œâ”€â”€ test\nâ”‚   â”œâ”€â”€ convert.js\nâ”‚   â”œâ”€â”€ get_options.js\nâ”‚   â”œâ”€â”€ get_question.js\nâ”‚   â””â”€â”€ split_raw_tests.js\nâ””â”€â”€ tests2json.js\n</code></pre>\n<hr>\n<h3 id=\"package-json\">Package.json</h3>\n<p>The <a href=\"https://github.com/wsierakowski/tests2json/blob/master/package.json\">package.json</a> file contents reveals that the only core dependency is the <a href=\"https://www.npmjs.com/package/commander\">commander</a> module that facilitates creating command-line interfaces:</p>\n<pre><code class=\"lang-json\">{\n  &quot;name&quot;: &quot;tests2json&quot;,\n  &quot;version&quot;: &quot;1.0.1&quot;,\n  &quot;description&quot;: &quot;Converts plain text tests to json&quot;,\n  &quot;main&quot;: &quot;lib/tests2json.js&quot;,\n  &quot;bin&quot;: {\n    &quot;tests2json&quot;: &quot;./tests2json.js&quot;\n  },\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;./node_modules/.bin/mocha --reporter spec test&quot;,\n    &quot;start&quot;: &quot;node tests2json.js&quot;\n  },\n  &quot;author&quot;: &quot;sigman.pl &lt;wojciech@sierakowski.eu&gt;&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;chai&quot;: &quot;^3.5.0&quot;,\n    &quot;mocha&quot;: &quot;^2.4.5&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;commander&quot;: &quot;^2.9.0&quot;\n  },\n  &quot;repository&quot;: {\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;https://github.com/wsierakowski/tests2json.git&quot;\n  }\n}\n</code></pre>\n<p>The <code>main</code> property provides the entry point for the case the script is <strong>loaded as the module with the require function</strong>. When the user requires the module with <code>require(&#39;tests2json&#39;)</code>, the file specified as the value in this property is going to be loaded.</p>\n<p>The <a href=\"https://docs.npmjs.com/files/package.json#bin\"><code>bin</code> property</a> on the other hand is used to make the script available from the command line. The &#39;tests2json&#39; key tells the name of the tool and the value is a path to the entry point which in this case is the tests2json.js in the project root folder. What actually happens during the <code>npm install</code> of the module is npm will add an entry to the <em>PATH</em> environmental variable&#39;s and will create a symlink from the ./tests2json.js to usr/local/bin/tests2json (for global install with -g) or ./node_modules/.bin/tests2json (for local install).</p>\n<p>Another thing worth mentioning here is the <code>scripts</code> entry that enables the users to start the script using:</p>\n<pre><code class=\"lang-bash\">$ npm start\n</code></pre>\n<p>and run the tests using:</p>\n<pre><code class=\"lang-bash\">$npm tests\n</code></pre>\n<hr>\n<h3 id=\"the-command-line-entry-point-tests2json-js-https-github-com-wsierakowski-tests2json-blob-master-tests2json-js-\">The command line entry point <a href=\"https://github.com/wsierakowski/tests2json/blob/master/tests2json.js\">./tests2json.js</a></h3>\n<hr>\n<h4 id=\"make-module-command-line-executable\">Make module command line executable</h4>\n<p>To let the Node script run as any other script like bash, perl or python, we need to add the Node.js <a href=\"https://en.wikipedia.org/wiki/Shebang_%28Unix%29\">shebang</a> at the top of the script file to specify its environment.</p>\n<p>The shebang <code>#!</code> tells the system to pass the rest of the line after shebang to the interpreter, in other words when we run the script from the console, the system will run the /usr/bin/env and feed the contents of the file to the node interpreter. Node itself, like other scripting languages will ignore (will not interpret) the line that starts with shebang. An example of shebang for Perl: <code>#!/usr/bin/perl</code>.</p>\n<pre><code class=\"lang-js\">#!/usr/bin/env node\n</code></pre>\n<p>Once we make the file executable by providing executable permissions with <code>chmod</code>...</p>\n<pre><code class=\"lang-bash\">$ chmod u+x tests2json\n</code></pre>\n<p>...we should be able to run is as a script:</p>\n<pre><code class=\"lang-bash\">$ ./tests2json --version\n</code></pre>\n<p>But since we populated the <code>bin</code> property in the package.json and installed the module with <code>npn install</code> what made npm create the symlink for us, we can run the script globally:</p>\n<pre><code class=\"lang-bash\">$ tests2json --version\n</code></pre>\n<hr>\n<h4 id=\"find-out-if-input-comes-from-pipe-or-from-command-line-with-params\">Find out if input comes from pipe or from command line with params</h4>\n<p>We want our tool to support running in the two following ways:</p>\n<ol>\n<li>With parameters: <code>tests2json --input testsfile.txt</code></li>\n<li>With pipe so that the input comes as stdin: <code>cat testsfile.txt | tests2json</code></li>\n</ol>\n<p>Node allows to recognise this is with the <a href=\"https://nodejs.org/api/process.html#process_process_stdout\"><code>isTTY</code> property</a> available in the process.stdin which essentially checks if the script is run in the <a href=\"http://stackoverflow.com/questions/13388704/what-is-a-tty-and-how-can-i-enable-it-on-ubuntu\">TTY</a> context:</p>\n<pre><code class=\"lang-js\">if (process.stdin.isTTY) {\n  // Command line args - read args from process.argv\n} else {\n  // Pipe data - read from process.stdin\n}\n</code></pre>\n<hr>\n<h4 id=\"read-arguments-and-display-help\">Read arguments and display help</h4>\n<p>There are quite many options for reading parameters and values passed from the shell when executing the script.</p>\n<p>For the following execution:</p>\n<pre><code class=\"lang-bash\">$ tests2json -i tests.txt\n</code></pre>\n<p>we could read the parameters in the following way using the built in Node functions in the built-in <code>process</code> module:</p>\n<pre><code class=\"lang-js\">console.log(process.argv);\n\n// returns:\n// [&#39;node&#39;, &#39;tests2json&#39;, &#39;-i&#39;, &#39;tests.txt&#39;]\n\n// Remove two first values: the &#39;node&#39; and the file name of he executed script:\nvar args = process.argv.slice(2);\n</code></pre>\n<p>Since we want to be able to print tool help and also support short and long parameters, it might be easier to use one of the popular npm modules, my favourite is <a href=\"https://www.npmjs.com/package/commander\">commander</a>.</p>\n<pre><code class=\"lang-js\">var program = require(&#39;commander&#39;);\n\nprogram\n  .version(&#39;1.0.1&#39;)\n  .description(&#39;Converts tests in text format to json.&#39;)\n  .option(&#39;-i, --input &lt;value&gt;&#39;, &#39;Input tests text file.&#39;)\n  .option(&#39;-o, --output [value]&#39;, &#39;Output tests json file.&#39;)\n  .on(&#39;--help&#39;, function(){\n    console.log(&#39;  Alternatively you can pipe raw tests as input and output the json from the script.&#39;);\n    console.log(&#39;&#39;);\n    console.log(&#39;    $ cat tests.txt | tests2json &gt;&gt; tests.json&#39;);\n    console.log(&#39;&#39;);\n  })\n  .parse(process.argv);\n</code></pre>\n<p>Purpose of each of the functions:</p>\n<ul>\n<li><code>version</code> sets the application version number that will get printed when we execute the script with <code>-v</code>/<code>--version</code> (we could actually read it from package.json to have just one point of reference)</li>\n<li><code>description</code> provides app description that will be printed at the top of the help (we could read that from package.json as well)</li>\n<li><code>option</code> specifies the short and the long version for parameters, type of the values expected and the description for the help. The angle brackets denote this parameter is required, square brackets are for optional.</li>\n<li><code>on</code> responds to event, in this case this is the custom help message when the user calls with <code>-h</code>/<code>--help</code>. In the callback we just use console.log to print the lines to terminal. If we didn&#39;t use that event handler, commander would still print help generated by default based on the options provided by us.</li>\n</ul>\n<p>Here is how the help is generated using the above configuration:</p>\n<pre><code class=\"lang-bash\">$ tests2json --help\n\n  Usage: tests2json [options]\n\n  Converts tests in text format to json.\n\n  Options:\n\n    -h, --help            output usage information\n    -V, --version         output the version number\n    -i, --input &lt;value&gt;   Input tests text file.\n    -o, --output [value]  Output tests json file.\n\n  Alternatively you can pipe raw tests as input and output the json from the script.\n\n    $ cat tests.txt | tests2json &gt;&gt; tests.json\n</code></pre>\n<p>The script will expect the following parameters ( the output param is optional, if not provided, the results will be printed to console instead of saved to a file):</p>\n<pre><code class=\"lang-bash\">  $ tests2json -i tests.txt -o tests.json\n\n  $ tests2json --input tests.txt --output tests.json\n</code></pre>\n<p>To print the error message when a required parameter is missing...</p>\n<pre><code class=\"lang-bash\">$ tests2json\n\nError: Providing input tests text file is required.\n</code></pre>\n<p>...I&#39;m using the following code, where I&#39;m checking if the input property isn&#39;t null, or alternatively in the same way I could check if the value provided is of the right data type or expected format with a regex value. In case the input isn&#39;t right, the script will printing the error message followed by the full help message printed again (for user&#39;s convenience) with the <code>program.outputHelp()</code> function and finally the script will exit with code 1 to indicate an error back to the shell.</p>\n<pre><code class=\"lang-js\">if (!program.input) {\n    console.log(&#39;Error: Providing input tests text file is required.&#39;);\n    program.outputHelp();\n    process.exit(1);   \n  }\n</code></pre>\n<hr>\n<h4 id=\"read-piped-or-redirected-data\">Read piped or redirected data</h4>\n<p>Piping data between scripts is in the core of any *nix system. We want to allow output from other scripts to be piped as input to tests2json and we want to be able to pass the result to other apps, like in the example below when we read the contests of the tests.txt file with the <code>cat</code> utility, pipe it to our script and then redirect the results to the tests.json file using <code>&gt;&gt;</code>:</p>\n<pre><code class=\"lang-bash\">$ cat tests.txt | tests2json &gt;&gt; tests.json\n</code></pre>\n<p>Or redirected input:</p>\n<pre><code class=\"lang-bash\">$ cat tests2json &lt; tests.txt &gt;&gt; tests.json\n</code></pre>\n<p>In order to implement that in Node, first we need to ensure the standard input isn&#39;t in the TTY mode as mentioned earlier in this article. Then we need to start reading from the <a href=\"https://nodejs.org/api/process.html\">process.stdin</a> using the resume function, otherwise the script will exit without waiting for anything. After setting the utf8 encoding we are listening for the <code>data</code> event on the stdin to receive the piped data.</p>\n<pre><code class=\"lang-js\">process.stdin.resume();\nprocess.stdin.setEncoding(&quot;utf8&quot;);\nprocess.stdin.on(&quot;data&quot;, function(data){\n  // process received data here...\n}\n</code></pre>\n<hr>\n<h4 id=\"exit-codes\">Exit codes</h4>\n<p>A decent command line script should indicate whether there has been an error executing it or the process completed successfully. For this purpose we use the exit codes. You may have noticed earlier that we provided the exit code 1 when there has been an error condition (missing required input). When everything goes well, the process should finish execution with exit code 0.</p>\n<pre><code class=\"lang-js\">if (err) process.exit(1)\n\n// When complete:\nprocess.exit(0);\n</code></pre>\n<hr>\n<h4 id=\"signals\">Signals</h4>\n<p>Node applications can also listen to signals sent by the operating system, the process or the user. For example a signal might be sent by the user hitting <code>ctrl+c</code> (SIGINT) or another process (like <code>kill -9 pid</code>) sending the kill signal (SIGKILL/SIGSTOP/SIGTERM). List of signals and information on which are supported on Windows can be found in the node docs: <a href=\"https://nodejs.org/api/process.html\">https://nodejs.org/api/process.html</a>.</p>\n<p>Listening to particular signals is done in the following way:</p>\n<pre><code class=\"lang-js\">process.on(&#39;SIGINT&#39;, function () {\n  console.log(&#39;Received SIGINT!&#39;);\n  process.exit(0);\n});\n</code></pre>\n<p>If you find out the node&#39;s process ID, you can use it then to send the <code>SIGINT</code> signal:</p>\n<pre><code class=\"lang-bash\">$ ps aux | grep node\n\n$ kill -s SIGINT node_process_id\n</code></pre>\n",
            "md": "---\r\n## Background\r\n\r\nCreating command line tools with Node was the initial reason that hooked me in when my journey as Node.JS developer started almost 4 years ago. I recently needed to create a module for converting/parsing tests written in plain text format to JSON, so that they could be imported to the database easily.\r\n\r\nThe module is available here on NPM: \r\n[https://www.npmjs.com/package/tests2json](https://www.npmjs.com/package/tests2json) <br>\r\nor on github:\r\n[https://github.com/wsierakowski/tests2json](https://github.com/wsierakowski/tests2json)\r\n\r\n---\r\nI wanted this module to have the following features:\r\n\r\n---\r\n##### 1. **Import as a Node module** \r\nWhen installed with:\r\n```\r\nnpm install tests2json\r\n```\r\nI should be able to import it in a standard way with the require:\r\n```\r\nvar t2j = require('tests2json')\r\n```\r\n\r\n---\r\n##### 2. **Use as command line tool** \r\nWhen installed globally \r\n```\r\nnpm install tests2json -g\r\n``` \r\nI should be able to run it from command line interface (CLI) as any other program available from bash.\r\n\r\n---\r\n##### 3. **Accept parameters in CLI** \r\nWhen run from CLI it should take both short: \r\n```\r\n$ tests2json -h\r\n```\r\nand long parameters: \r\n```\r\n$ tests2json --help\r\n``` \r\nand display verbose help to the user. \r\nTwo key parameters would be the `input` to specify a path where the text file with tests should be read from and the `output` for a path which the json output should be saved to.\r\n\r\n---\r\n##### 4. **Accept piped streams** \r\nWhen run from CLI accept output of other programs as input and output tests as JSON so that other programs could consume it:\r\n```\r\n$ cat tests.txt | tests2json >> tests.json\r\n```\r\n\r\n---\r\n## Solution\r\n\r\n---\r\n### Folder Structure\r\n\r\nThe [folder structure](https://github.com/wsierakowski/tests2json) is fairly standard, skipping the obvious things like .gitignore, LICENSE, README.md and package.json, the entry point for the module working as the command line tool is the `tests2json.js` file. The script internally loads the `lib/tests2json.js` module that is the actual logic that parses raw tests text. The test folder contains [mocha](https://mochajs.org/) test runner tests that use [chai](http://chaijs.com/) as the assertion library.\r\n\r\n```bash\r\n.\r\nâ”œâ”€â”€ .gitignore\r\nâ”œâ”€â”€ LICENSE\r\nâ”œâ”€â”€ README.md\r\nâ”œâ”€â”€ lib\r\nâ”‚Â Â  â””â”€â”€ tests2json.js\r\nâ”œâ”€â”€ package.json\r\nâ”œâ”€â”€ test\r\nâ”‚Â Â  â”œâ”€â”€ convert.js\r\nâ”‚Â Â  â”œâ”€â”€ get_options.js\r\nâ”‚Â Â  â”œâ”€â”€ get_question.js\r\nâ”‚Â Â  â””â”€â”€ split_raw_tests.js\r\nâ””â”€â”€ tests2json.js\r\n```\r\n\r\n---\r\n### Package.json\r\nThe [package.json](https://github.com/wsierakowski/tests2json/blob/master/package.json) file contents reveals that the only core dependency is the [commander](https://www.npmjs.com/package/commander) module that facilitates creating command-line interfaces:\r\n\r\n```json\r\n{\r\n  \"name\": \"tests2json\",\r\n  \"version\": \"1.0.1\",\r\n  \"description\": \"Converts plain text tests to json\",\r\n  \"main\": \"lib/tests2json.js\",\r\n  \"bin\": {\r\n    \"tests2json\": \"./tests2json.js\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"./node_modules/.bin/mocha --reporter spec test\",\r\n    \"start\": \"node tests2json.js\"\r\n  },\r\n  \"author\": \"sigman.pl <wojciech@sierakowski.eu>\",\r\n  \"license\": \"MIT\",\r\n  \"devDependencies\": {\r\n    \"chai\": \"^3.5.0\",\r\n    \"mocha\": \"^2.4.5\"\r\n  },\r\n  \"dependencies\": {\r\n    \"commander\": \"^2.9.0\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/wsierakowski/tests2json.git\"\r\n  }\r\n}\r\n```\r\n\r\nThe `main` property provides the entry point for the case the script is **loaded as the module with the require function**. When the user requires the module with `require('tests2json')`, the file specified as the value in this property is going to be loaded.\r\n\r\nThe [`bin` property](https://docs.npmjs.com/files/package.json#bin) on the other hand is used to make the script available from the command line. The 'tests2json' key tells the name of the tool and the value is a path to the entry point which in this case is the tests2json.js in the project root folder. What actually happens during the `npm install` of the module is npm will add an entry to the *PATH* environmental variable's and will create a symlink from the ./tests2json.js to usr/local/bin/tests2json (for global install with -g) or ./node_modules/.bin/tests2json (for local install).\r\n\r\nAnother thing worth mentioning here is the `scripts` entry that enables the users to start the script using:\r\n```bash\r\n$ npm start\r\n```\r\n\r\nand run the tests using:\r\n```bash\r\n$npm tests\r\n```\r\n\r\n---\r\n### The command line entry point [./tests2json.js](https://github.com/wsierakowski/tests2json/blob/master/tests2json.js)\r\n\r\n---\r\n#### Make module command line executable\r\n\r\nTo let the Node script run as any other script like bash, perl or python, we need to add the Node.js [shebang](https://en.wikipedia.org/wiki/Shebang_%28Unix%29) at the top of the script file to specify its environment.\r\n\r\nThe shebang `#!` tells the system to pass the rest of the line after shebang to the interpreter, in other words when we run the script from the console, the system will run the /usr/bin/env and feed the contents of the file to the node interpreter. Node itself, like other scripting languages will ignore (will not interpret) the line that starts with shebang. An example of shebang for Perl: `#!/usr/bin/perl`.\r\n\r\n```js\r\n#!/usr/bin/env node\r\n```\r\n\r\nOnce we make the file executable by providing executable permissions with `chmod`...\r\n\r\n```bash\r\n$ chmod u+x tests2json\r\n```\r\n\r\n...we should be able to run is as a script:\r\n\r\n```bash\r\n$ ./tests2json --version\r\n``` \r\n\r\nBut since we populated the `bin` property in the package.json and installed the module with `npn install` what made npm create the symlink for us, we can run the script globally:\r\n\r\n```bash\r\n$ tests2json --version\r\n```\r\n\r\n---\r\n#### Find out if input comes from pipe or from command line with params\r\n\r\nWe want our tool to support running in the two following ways:\r\n1. With parameters: `tests2json --input testsfile.txt`\r\n2. With pipe so that the input comes as stdin: `cat testsfile.txt | tests2json`\r\n\r\nNode allows to recognise this is with the [`isTTY` property](https://nodejs.org/api/process.html#process_process_stdout) available in the process.stdin which essentially checks if the script is run in the [TTY](http://stackoverflow.com/questions/13388704/what-is-a-tty-and-how-can-i-enable-it-on-ubuntu) context:\r\n\r\n```js\r\nif (process.stdin.isTTY) {\r\n  // Command line args - read args from process.argv\r\n} else {\r\n  // Pipe data - read from process.stdin\r\n}\r\n```\r\n\r\n---\r\n#### Read arguments and display help\r\n\r\nThere are quite many options for reading parameters and values passed from the shell when executing the script.\r\n\r\nFor the following execution:\r\n\r\n```bash\r\n$ tests2json -i tests.txt\r\n```\r\n\r\nwe could read the parameters in the following way using the built in Node functions in the built-in `process` module:\r\n\r\n```js\r\nconsole.log(process.argv);\r\n\r\n// returns:\r\n// ['node', 'tests2json', '-i', 'tests.txt']\r\n\r\n// Remove two first values: the 'node' and the file name of he executed script:\r\nvar args = process.argv.slice(2);\r\n```\r\n\r\nSince we want to be able to print tool help and also support short and long parameters, it might be easier to use one of the popular npm modules, my favourite is [commander](https://www.npmjs.com/package/commander).\r\n\r\n```js\r\nvar program = require('commander');\r\n\r\nprogram\r\n  .version('1.0.1')\r\n  .description('Converts tests in text format to json.')\r\n  .option('-i, --input <value>', 'Input tests text file.')\r\n  .option('-o, --output [value]', 'Output tests json file.')\r\n  .on('--help', function(){\r\n    console.log('  Alternatively you can pipe raw tests as input and output the json from the script.');\r\n    console.log('');\r\n    console.log('    $ cat tests.txt | tests2json >> tests.json');\r\n    console.log('');\r\n  })\r\n  .parse(process.argv);\r\n```\r\n\r\nPurpose of each of the functions:\r\n- `version` sets the application version number that will get printed when we execute the script with `-v`/`--version` (we could actually read it from package.json to have just one point of reference)\r\n- `description` provides app description that will be printed at the top of the help (we could read that from package.json as well)\r\n- `option` specifies the short and the long version for parameters, type of the values expected and the description for the help. The angle brackets denote this parameter is required, square brackets are for optional.\r\n- `on` responds to event, in this case this is the custom help message when the user calls with `-h`/`--help`. In the callback we just use console.log to print the lines to terminal. If we didn't use that event handler, commander would still print help generated by default based on the options provided by us.\r\n\r\nHere is how the help is generated using the above configuration:\r\n\r\n```bash\r\n$ tests2json --help\r\n\r\n  Usage: tests2json [options]\r\n\r\n  Converts tests in text format to json.\r\n\r\n  Options:\r\n\r\n    -h, --help            output usage information\r\n    -V, --version         output the version number\r\n    -i, --input <value>   Input tests text file.\r\n    -o, --output [value]  Output tests json file.\r\n\r\n  Alternatively you can pipe raw tests as input and output the json from the script.\r\n\r\n    $ cat tests.txt | tests2json >> tests.json\r\n```\r\n\r\nThe script will expect the following parameters ( the output param is optional, if not provided, the results will be printed to console instead of saved to a file):\r\n\r\n```bash\r\n  $ tests2json -i tests.txt -o tests.json\r\n\r\n  $ tests2json --input tests.txt --output tests.json\r\n```\r\n\r\nTo print the error message when a required parameter is missing...\r\n\r\n```bash\r\n$ tests2json\r\n\r\nError: Providing input tests text file is required.\r\n```\r\n \r\n...I'm using the following code, where I'm checking if the input property isn't null, or alternatively in the same way I could check if the value provided is of the right data type or expected format with a regex value. In case the input isn't right, the script will printing the error message followed by the full help message printed again (for user's convenience) with the `program.outputHelp()` function and finally the script will exit with code 1 to indicate an error back to the shell.\r\n\r\n```js\r\nif (!program.input) {\r\n    console.log('Error: Providing input tests text file is required.');\r\n    program.outputHelp();\r\n    process.exit(1);   \r\n  }\r\n```\r\n---\r\n#### Read piped or redirected data\r\n\r\nPiping data between scripts is in the core of any *nix system. We want to allow output from other scripts to be piped as input to tests2json and we want to be able to pass the result to other apps, like in the example below when we read the contests of the tests.txt file with the `cat` utility, pipe it to our script and then redirect the results to the tests.json file using `>>`:\r\n\r\n```bash\r\n$ cat tests.txt | tests2json >> tests.json\r\n```\r\n\r\nOr redirected input:\r\n\r\n```bash\r\n$ cat tests2json < tests.txt >> tests.json\r\n```\r\n\r\nIn order to implement that in Node, first we need to ensure the standard input isn't in the TTY mode as mentioned earlier in this article. Then we need to start reading from the [process.stdin](https://nodejs.org/api/process.html) using the resume function, otherwise the script will exit without waiting for anything. After setting the utf8 encoding we are listening for the `data` event on the stdin to receive the piped data.\r\n\r\n```js\r\nprocess.stdin.resume();\r\nprocess.stdin.setEncoding(\"utf8\");\r\nprocess.stdin.on(\"data\", function(data){\r\n  // process received data here...\r\n}\r\n```\r\n\r\n---\r\n#### Exit codes\r\n\r\nA decent command line script should indicate whether there has been an error executing it or the process completed successfully. For this purpose we use the exit codes. You may have noticed earlier that we provided the exit code 1 when there has been an error condition (missing required input). When everything goes well, the process should finish execution with exit code 0.\r\n\r\n```js\r\nif (err) process.exit(1)\r\n\r\n// When complete:\r\nprocess.exit(0);\r\n```\r\n\r\n---\r\n#### Signals\r\n\r\nNode applications can also listen to signals sent by the operating system, the process or the user. For example a signal might be sent by the user hitting `ctrl+c` (SIGINT) or another process (like `kill -9 pid`) sending the kill signal (SIGKILL/SIGSTOP/SIGTERM). List of signals and information on which are supported on Windows can be found in the node docs: [https://nodejs.org/api/process.html](https://nodejs.org/api/process.html).\r\n\r\nListening to particular signals is done in the following way:\r\n\r\n```js\r\nprocess.on('SIGINT', function () {\r\n  console.log('Received SIGINT!');\r\n  process.exit(0);\r\n});\r\n```\r\n\r\nIf you find out the node's process ID, you can use it then to send the `SIGINT` signal:\r\n\r\n```bash\r\n$ ps aux | grep node\r\n\r\n$ kill -s SIGINT node_process_id\r\n```"
        },
        "extendedType": "markdown"
    },
    "hits": 834,
    "publishedDate": {
        "$date": "2016-03-15T00:00:00.000+0000"
    },
    "slug": "creating-command-line-tools-with-nodejs",
    "state": "published",
    "tags": [{
        "$oid": "55ae65e269291600761cdc3c"
    }, {
        "$oid": "55ae65e269291600761cdc3b"
    }, {
        "$oid": "55ae65e269291600761cdc39"
    }, {
        "$oid": "55ae65e269291600761cdc38"
    }],
    "title": "Creating command line tools with Node.js"
}
