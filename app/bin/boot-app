#!/usr/bin/env node

/**
 * Module dependencies.
 */

const webApp = require('../web-app');
const debug = require('debug')('myheykaApp2:server');
const http = require('http');
const path = require('path');
const async = require('async');

const myUtils = require('../libs/my-utils');
const conf = require('../config');

// content-provider, content-updater
let cp, cu;

if (conf.CONTENT_SOURCE_TYPE === 'local-git-repo') {
  const CPLocalGitRepo = require('../article-importer/cp-local-git-repo');
  cp = new CPLocalGitRepo(path.join(__dirname, '../../test/_sample-articles'));
  cu = require('../content-updater/local-git-update-task');

} else if (conf.CONTENT_SOURCE_TYPE === 'remote-github-repo') {
  const CPRemoteGithubRepo = require('../article-importer/cp-remote-github-repo');
  cp = new CPRemoteGithubRepo('', conf.REPO_REMOTE_OWNER, conf.REPO_REMOTE_NAME);
  cu = require('../content-updater/remote-github-update-task');
}

const model = require('../model').model;
model.setContentProvider(cp);

var heykaApp, server;

/**
 * Get port from environment and store in Express.
 */

// TODO: ports for webapp and for webhook should optionally be different
// in this case there would be two servers run at the same time
const port = normalizePort(process.env.PORT || conf.BLOG_PORT);

// TODO Fix UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1)
// by making sure all promises have catch that reports to next()

/**
 * Listen on provided port, on all network interfaces.
 */

async.series([
  function pullLocalRepo(cb) {
    cu.beginPull(err => {
      if (err) return cb(err);
      cu.finish();
      cb();
    });
  },
  model.init,
  function initialiseWebApp(cb) {
    heykaApp = webApp.init(cu);
    heykaApp.set('port', port);

    /**
     * Create HTTP server.
     */

    server = http.createServer(heykaApp);

    console.log('* Model initialization complete');

    async.setImmediate(() => cb(null));
  },
  webApp.initNav
], function initCompleteCallback(err) {
  if (err) {
    console.log('Ouch...', err);
    throw `Error initializing application: ${err}.`;
  }
  console.log('* Pre-initialization complete.', heykaApp.locals.navLinks)
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
