#!/usr/bin/env node

/**
 * Module dependencies.
 */

const webApp = require('../web-app');
const debug = require('debug')('mywebApp2:server');
const http = require('http');
const path = require('path');
const async = require('async');
const model = require('../model');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
webApp.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(webApp);

/**
 * Listen on provided port, on all network interfaces.
 */
const localBlogRepoPath = path.join(process.cwd(), '_sample-blog-local-repo');
async.waterfall([
  function initModel(cb) {
    model.init(localBlogRepoPath, (err) => {
      if (err) return cb({where: 'initModel', error: err});
      console.log('* Model initialization complete');
      cb(null);
    });
  },
  function initNav(cb) {
    webApp.locals.navLinks = [];
    model.db.categories.allDocs({include_docs: true}, (err, res) => {
      if (err) return cb({where: 'initNav', err: err});
      //webApp.locals.navLinks.push({label: 'MenuItem1', key: 'menuitem1', href:'http://sigman.pl'});
      res.rows.forEach(doc => {
        let item = doc.doc;
        console.log('item:', {label: item._id, key: item._id, href: item._id});
        webApp.locals.navLinks.push({label: item._id, key: item._id, href: item._id});
      });
      cb(null);
    });
  }
], function initCompleteCallback(err) {
  if (err) throw `Error initializing application: ${err}.`;
  console.log('* Pre-initialization complete.')
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
